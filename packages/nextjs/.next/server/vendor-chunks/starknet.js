"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/starknet";
exports.ids = ["vendor-chunks/starknet"];
exports.modules = {

/***/ "(ssr)/./node_modules/starknet/dist/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/starknet/dist/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   AccountInterface: () => (/* binding */ AccountInterface),\n/* harmony export */   BlockStatus: () => (/* binding */ BlockStatus),\n/* harmony export */   BlockTag: () => (/* binding */ BlockTag),\n/* harmony export */   CairoCustomEnum: () => (/* binding */ CairoCustomEnum),\n/* harmony export */   CairoOption: () => (/* binding */ CairoOption),\n/* harmony export */   CairoOptionVariant: () => (/* binding */ CairoOptionVariant),\n/* harmony export */   CairoResult: () => (/* binding */ CairoResult),\n/* harmony export */   CairoResultVariant: () => (/* binding */ CairoResultVariant),\n/* harmony export */   CallData: () => (/* binding */ CallData),\n/* harmony export */   Contract: () => (/* binding */ Contract),\n/* harmony export */   ContractFactory: () => (/* binding */ ContractFactory),\n/* harmony export */   ContractInterface: () => (/* binding */ ContractInterface),\n/* harmony export */   CustomError: () => (/* binding */ CustomError),\n/* harmony export */   EntryPointType: () => (/* binding */ EntryPointType),\n/* harmony export */   GatewayError: () => (/* binding */ GatewayError),\n/* harmony export */   HttpError: () => (/* binding */ HttpError),\n/* harmony export */   LibraryError: () => (/* binding */ LibraryError),\n/* harmony export */   Litteral: () => (/* binding */ Litteral),\n/* harmony export */   Provider: () => (/* binding */ Provider),\n/* harmony export */   ProviderInterface: () => (/* binding */ ProviderInterface),\n/* harmony export */   RPC: () => (/* binding */ rpc_exports),\n/* harmony export */   RpcProvider: () => (/* binding */ RpcProvider),\n/* harmony export */   SIMULATION_FLAG: () => (/* binding */ SIMULATION_FLAG),\n/* harmony export */   Sequencer: () => (/* binding */ sequencer_exports),\n/* harmony export */   SequencerProvider: () => (/* binding */ SequencerProvider),\n/* harmony export */   Signer: () => (/* binding */ Signer),\n/* harmony export */   SignerInterface: () => (/* binding */ SignerInterface),\n/* harmony export */   TransactionExecutionStatus: () => (/* binding */ TransactionExecutionStatus),\n/* harmony export */   TransactionFinalityStatus: () => (/* binding */ TransactionFinalityStatus),\n/* harmony export */   TransactionStatus: () => (/* binding */ TransactionStatus),\n/* harmony export */   TransactionType: () => (/* binding */ TransactionType),\n/* harmony export */   Uint: () => (/* binding */ Uint),\n/* harmony export */   ValidateType: () => (/* binding */ ValidateType),\n/* harmony export */   addAddressPadding: () => (/* binding */ addAddressPadding),\n/* harmony export */   buildUrl: () => (/* binding */ buildUrl),\n/* harmony export */   cairo: () => (/* binding */ cairo_exports),\n/* harmony export */   constants: () => (/* binding */ constants_exports),\n/* harmony export */   contractClassResponseToLegacyCompiledContract: () => (/* binding */ contractClassResponseToLegacyCompiledContract),\n/* harmony export */   defaultProvider: () => (/* binding */ defaultProvider),\n/* harmony export */   ec: () => (/* binding */ ec_exports),\n/* harmony export */   encode: () => (/* binding */ encode_exports),\n/* harmony export */   events: () => (/* binding */ events_exports),\n/* harmony export */   extractContractHashes: () => (/* binding */ extractContractHashes),\n/* harmony export */   fixProto: () => (/* binding */ fixProto),\n/* harmony export */   fixStack: () => (/* binding */ fixStack),\n/* harmony export */   getCalldata: () => (/* binding */ getCalldata),\n/* harmony export */   getChecksumAddress: () => (/* binding */ getChecksumAddress),\n/* harmony export */   getDefaultNodeUrl: () => (/* binding */ getDefaultNodeUrl),\n/* harmony export */   hash: () => (/* binding */ hash_exports),\n/* harmony export */   isSierra: () => (/* binding */ isSierra),\n/* harmony export */   isUrl: () => (/* binding */ isUrl),\n/* harmony export */   json: () => (/* binding */ json_exports),\n/* harmony export */   merkle: () => (/* binding */ merkle_exports),\n/* harmony export */   num: () => (/* binding */ num_exports),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   parseUDCEvent: () => (/* binding */ parseUDCEvent),\n/* harmony export */   provider: () => (/* binding */ provider_exports),\n/* harmony export */   selector: () => (/* binding */ selector_exports),\n/* harmony export */   shortString: () => (/* binding */ shortString_exports),\n/* harmony export */   splitArgsAndOptions: () => (/* binding */ splitArgsAndOptions),\n/* harmony export */   stark: () => (/* binding */ stark_exports),\n/* harmony export */   starknetId: () => (/* binding */ starknetId_exports),\n/* harmony export */   transaction: () => (/* binding */ transaction_exports),\n/* harmony export */   typedData: () => (/* binding */ typedData_exports),\n/* harmony export */   types: () => (/* binding */ types_exports),\n/* harmony export */   uint256: () => (/* binding */ uint256_exports),\n/* harmony export */   validateAndParseAddress: () => (/* binding */ validateAndParseAddress),\n/* harmony export */   validateChecksumAddress: () => (/* binding */ validateChecksumAddress)\n/* harmony export */ });\n/* harmony import */ var _scure_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @scure/base */ \"(ssr)/./node_modules/@scure/base/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _scure_starknet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @scure/starknet */ \"(ssr)/./node_modules/@scure/starknet/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_abstract_weierstrass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/curves/abstract/weierstrass */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/* harmony import */ var lossless_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lossless-json */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_abstract_poseidon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/curves/abstract/poseidon */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/poseidon.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! pako */ \"(ssr)/./node_modules/pako/dist/pako.esm.mjs\");\n/* harmony import */ var isomorphic_fetch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! isomorphic-fetch */ \"(ssr)/./node_modules/isomorphic-fetch/fetch-npm-node.js\");\n/* harmony import */ var url_join__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! url-join */ \"(ssr)/./node_modules/url-join/lib/url-join.js\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/constants.ts\nvar constants_exports = {};\n__export(constants_exports, {\n  ADDR_BOUND: () => ADDR_BOUND,\n  API_VERSION: () => API_VERSION,\n  BN_FEE_TRANSACTION_VERSION_1: () => BN_FEE_TRANSACTION_VERSION_1,\n  BN_FEE_TRANSACTION_VERSION_2: () => BN_FEE_TRANSACTION_VERSION_2,\n  BN_TRANSACTION_VERSION_1: () => BN_TRANSACTION_VERSION_1,\n  BN_TRANSACTION_VERSION_2: () => BN_TRANSACTION_VERSION_2,\n  BaseUrl: () => BaseUrl,\n  HEX_STR_TRANSACTION_VERSION_1: () => HEX_STR_TRANSACTION_VERSION_1,\n  HEX_STR_TRANSACTION_VERSION_2: () => HEX_STR_TRANSACTION_VERSION_2,\n  IS_BROWSER: () => IS_BROWSER,\n  MASK_250: () => MASK_250,\n  MAX_STORAGE_ITEM_SIZE: () => MAX_STORAGE_ITEM_SIZE,\n  NetworkName: () => NetworkName,\n  RPC_DEFAULT_VERSION: () => RPC_DEFAULT_VERSION,\n  RPC_NODES: () => RPC_NODES,\n  StarknetChainId: () => StarknetChainId,\n  TEXT_TO_FELT_MAX_LEN: () => TEXT_TO_FELT_MAX_LEN,\n  TransactionHashPrefix: () => TransactionHashPrefix,\n  UDC: () => UDC,\n  ZERO: () => ZERO\n});\n\n// src/utils/encode.ts\nvar encode_exports = {};\n__export(encode_exports, {\n  IS_BROWSER: () => IS_BROWSER,\n  addHexPrefix: () => addHexPrefix,\n  arrayBufferToString: () => arrayBufferToString,\n  atobUniversal: () => atobUniversal,\n  btoaUniversal: () => btoaUniversal,\n  buf2hex: () => buf2hex,\n  calcByteLength: () => calcByteLength,\n  padLeft: () => padLeft,\n  pascalToSnake: () => pascalToSnake,\n  removeHexPrefix: () => removeHexPrefix,\n  sanitizeBytes: () => sanitizeBytes,\n  sanitizeHex: () => sanitizeHex,\n  stringToArrayBuffer: () => stringToArrayBuffer,\n  utf8ToArray: () => utf8ToArray\n});\n\nvar IS_BROWSER = typeof window !== \"undefined\";\nvar STRING_ZERO = \"0\";\nfunction arrayBufferToString(array) {\n  return new Uint8Array(array).reduce((data, byte) => data + String.fromCharCode(byte), \"\");\n}\nfunction utf8ToArray(str) {\n  return new TextEncoder().encode(str);\n}\nfunction stringToArrayBuffer(str) {\n  return utf8ToArray(str);\n}\nfunction atobUniversal(a) {\n  return _scure_base__WEBPACK_IMPORTED_MODULE_0__.base64.decode(a);\n}\nfunction btoaUniversal(b) {\n  return _scure_base__WEBPACK_IMPORTED_MODULE_0__.base64.encode(new Uint8Array(b));\n}\nfunction buf2hex(buffer) {\n  return buffer.reduce((r, x) => r + x.toString(16).padStart(2, \"0\"), \"\");\n}\nfunction removeHexPrefix(hex) {\n  return hex.replace(/^0x/i, \"\");\n}\nfunction addHexPrefix(hex) {\n  return `0x${removeHexPrefix(hex)}`;\n}\nfunction padString(str, length, left, padding = STRING_ZERO) {\n  const diff = length - str.length;\n  let result = str;\n  if (diff > 0) {\n    const pad = padding.repeat(diff);\n    result = left ? pad + str : str + pad;\n  }\n  return result;\n}\nfunction padLeft(str, length, padding = STRING_ZERO) {\n  return padString(str, length, true, padding);\n}\nfunction calcByteLength(str, byteSize = 8) {\n  const { length } = str;\n  const remainder = length % byteSize;\n  return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;\n}\nfunction sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {\n  return padLeft(str, calcByteLength(str, byteSize), padding);\n}\nfunction sanitizeHex(hex) {\n  hex = removeHexPrefix(hex);\n  hex = sanitizeBytes(hex, 2);\n  if (hex) {\n    hex = addHexPrefix(hex);\n  }\n  return hex;\n}\nvar pascalToSnake = (text) => /[a-z]/.test(text) ? text.split(/(?=[A-Z])/).join(\"_\").toUpperCase() : text;\n\n// src/constants.ts\nvar TEXT_TO_FELT_MAX_LEN = 31;\nvar HEX_STR_TRANSACTION_VERSION_1 = \"0x1\";\nvar HEX_STR_TRANSACTION_VERSION_2 = \"0x2\";\nvar BN_TRANSACTION_VERSION_1 = 1n;\nvar BN_TRANSACTION_VERSION_2 = 2n;\nvar BN_FEE_TRANSACTION_VERSION_1 = 2n ** 128n + BN_TRANSACTION_VERSION_1;\nvar BN_FEE_TRANSACTION_VERSION_2 = 2n ** 128n + BN_TRANSACTION_VERSION_2;\nvar ZERO = 0n;\nvar MASK_250 = 2n ** 250n - 1n;\nvar API_VERSION = ZERO;\nvar MAX_STORAGE_ITEM_SIZE = 256n;\nvar ADDR_BOUND = 2n ** 251n - MAX_STORAGE_ITEM_SIZE;\nvar BaseUrl = /* @__PURE__ */ ((BaseUrl2) => {\n  BaseUrl2[\"SN_MAIN\"] = \"https://alpha-mainnet.starknet.io\";\n  BaseUrl2[\"SN_GOERLI\"] = \"https://alpha4.starknet.io\";\n  BaseUrl2[\"SN_SEPOLIA\"] = \"https://alpha-sepolia.starknet.io\";\n  return BaseUrl2;\n})(BaseUrl || {});\nvar NetworkName = /* @__PURE__ */ ((NetworkName2) => {\n  NetworkName2[\"SN_MAIN\"] = \"SN_MAIN\";\n  NetworkName2[\"SN_GOERLI\"] = \"SN_GOERLI\";\n  NetworkName2[\"SN_SEPOLIA\"] = \"SN_SEPOLIA\";\n  return NetworkName2;\n})(NetworkName || {});\nvar StarknetChainId = /* @__PURE__ */ ((StarknetChainId4) => {\n  StarknetChainId4[\"SN_MAIN\"] = \"0x534e5f4d41494e\";\n  StarknetChainId4[\"SN_GOERLI\"] = \"0x534e5f474f45524c49\";\n  StarknetChainId4[\"SN_SEPOLIA\"] = \"0x534e5f5345504f4c4941\";\n  return StarknetChainId4;\n})(StarknetChainId || {});\nvar TransactionHashPrefix = /* @__PURE__ */ ((TransactionHashPrefix2) => {\n  TransactionHashPrefix2[\"DECLARE\"] = \"0x6465636c617265\";\n  TransactionHashPrefix2[\"DEPLOY\"] = \"0x6465706c6f79\";\n  TransactionHashPrefix2[\"DEPLOY_ACCOUNT\"] = \"0x6465706c6f795f6163636f756e74\";\n  TransactionHashPrefix2[\"INVOKE\"] = \"0x696e766f6b65\";\n  TransactionHashPrefix2[\"L1_HANDLER\"] = \"0x6c315f68616e646c6572\";\n  return TransactionHashPrefix2;\n})(TransactionHashPrefix || {});\nvar UDC = {\n  ADDRESS: \"0x041a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf\",\n  ENTRYPOINT: \"deployContract\"\n};\nvar RPC_DEFAULT_VERSION = \"v0_5\";\nvar RPC_NODES = {\n  SN_GOERLI: [\n    `https://starknet-testnet.public.blastapi.io/rpc/`,\n    `https://free-rpc.nethermind.io/goerli-juno/`\n  ],\n  SN_MAIN: [\n    `https://starknet-mainnet.public.blastapi.io/rpc/`,\n    `https://free-rpc.nethermind.io/mainnet-juno/`\n  ],\n  SN_SEPOLIA: [\n    `https://starknet-sepolia.public.blastapi.io/rpc/`,\n    `https://free-rpc.nethermind.io/sepolia-juno/`\n  ]\n};\n\n// src/types/index.ts\nvar types_exports = {};\n__export(types_exports, {\n  BlockStatus: () => BlockStatus,\n  BlockTag: () => BlockTag,\n  EntryPointType: () => EntryPointType,\n  Litteral: () => Litteral,\n  RPC: () => rpc_exports,\n  SIMULATION_FLAG: () => SIMULATION_FLAG,\n  Sequencer: () => sequencer_exports,\n  TransactionExecutionStatus: () => TransactionExecutionStatus,\n  TransactionFinalityStatus: () => TransactionFinalityStatus,\n  TransactionStatus: () => TransactionStatus,\n  TransactionType: () => TransactionType,\n  Uint: () => Uint,\n  ValidateType: () => ValidateType\n});\n\n// src/types/account.ts\nvar SIMULATION_FLAG = /* @__PURE__ */ ((SIMULATION_FLAG2) => {\n  SIMULATION_FLAG2[\"SKIP_VALIDATE\"] = \"SKIP_VALIDATE\";\n  SIMULATION_FLAG2[\"SKIP_EXECUTE\"] = \"SKIP_EXECUTE\";\n  return SIMULATION_FLAG2;\n})(SIMULATION_FLAG || {});\n\n// src/types/calldata.ts\nvar ValidateType = /* @__PURE__ */ ((ValidateType2) => {\n  ValidateType2[\"DEPLOY\"] = \"DEPLOY\";\n  ValidateType2[\"CALL\"] = \"CALL\";\n  ValidateType2[\"INVOKE\"] = \"INVOKE\";\n  return ValidateType2;\n})(ValidateType || {});\nvar Uint = /* @__PURE__ */ ((Uint2) => {\n  Uint2[\"u8\"] = \"core::integer::u8\";\n  Uint2[\"u16\"] = \"core::integer::u16\";\n  Uint2[\"u32\"] = \"core::integer::u32\";\n  Uint2[\"u64\"] = \"core::integer::u64\";\n  Uint2[\"u128\"] = \"core::integer::u128\";\n  Uint2[\"u256\"] = \"core::integer::u256\";\n  return Uint2;\n})(Uint || {});\nvar Litteral = /* @__PURE__ */ ((Litteral2) => {\n  Litteral2[\"ClassHash\"] = \"core::starknet::class_hash::ClassHash\";\n  Litteral2[\"ContractAddress\"] = \"core::starknet::contract_address::ContractAddress\";\n  return Litteral2;\n})(Litteral || {});\n\n// src/types/lib/contract/index.ts\nvar EntryPointType = /* @__PURE__ */ ((EntryPointType2) => {\n  EntryPointType2[\"EXTERNAL\"] = \"EXTERNAL\";\n  EntryPointType2[\"L1_HANDLER\"] = \"L1_HANDLER\";\n  EntryPointType2[\"CONSTRUCTOR\"] = \"CONSTRUCTOR\";\n  return EntryPointType2;\n})(EntryPointType || {});\n\n// src/types/lib/index.ts\nvar TransactionType = /* @__PURE__ */ ((TransactionType2) => {\n  TransactionType2[\"DECLARE\"] = \"DECLARE\";\n  TransactionType2[\"DEPLOY\"] = \"DEPLOY\";\n  TransactionType2[\"DEPLOY_ACCOUNT\"] = \"DEPLOY_ACCOUNT\";\n  TransactionType2[\"INVOKE\"] = \"INVOKE_FUNCTION\";\n  return TransactionType2;\n})(TransactionType || {});\nvar TransactionStatus = /* @__PURE__ */ ((TransactionStatus2) => {\n  TransactionStatus2[\"NOT_RECEIVED\"] = \"NOT_RECEIVED\";\n  TransactionStatus2[\"RECEIVED\"] = \"RECEIVED\";\n  TransactionStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  TransactionStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  TransactionStatus2[\"REJECTED\"] = \"REJECTED\";\n  TransactionStatus2[\"REVERTED\"] = \"REVERTED\";\n  return TransactionStatus2;\n})(TransactionStatus || {});\nvar TransactionFinalityStatus = /* @__PURE__ */ ((TransactionFinalityStatus2) => {\n  TransactionFinalityStatus2[\"NOT_RECEIVED\"] = \"NOT_RECEIVED\";\n  TransactionFinalityStatus2[\"RECEIVED\"] = \"RECEIVED\";\n  TransactionFinalityStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  TransactionFinalityStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  return TransactionFinalityStatus2;\n})(TransactionFinalityStatus || {});\nvar TransactionExecutionStatus = /* @__PURE__ */ ((TransactionExecutionStatus2) => {\n  TransactionExecutionStatus2[\"REJECTED\"] = \"REJECTED\";\n  TransactionExecutionStatus2[\"REVERTED\"] = \"REVERTED\";\n  TransactionExecutionStatus2[\"SUCCEEDED\"] = \"SUCCEEDED\";\n  return TransactionExecutionStatus2;\n})(TransactionExecutionStatus || {});\nvar BlockStatus = /* @__PURE__ */ ((BlockStatus2) => {\n  BlockStatus2[\"PENDING\"] = \"PENDING\";\n  BlockStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  BlockStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  BlockStatus2[\"REJECTED\"] = \"REJECTED\";\n  return BlockStatus2;\n})(BlockStatus || {});\nvar BlockTag = /* @__PURE__ */ ((BlockTag2) => {\n  BlockTag2[\"pending\"] = \"pending\";\n  BlockTag2[\"latest\"] = \"latest\";\n  return BlockTag2;\n})(BlockTag || {});\n\n// src/types/api/rpc.ts\nvar rpc_exports = {};\n__export(rpc_exports, {\n  EBlockTag: () => EBlockTag,\n  EDataAvailabilityMode: () => EDataAvailabilityMode,\n  ESimulationFlag: () => ESimulationFlag,\n  ETransactionExecutionStatus: () => ETransactionExecutionStatus,\n  ETransactionFinalityStatus: () => ETransactionFinalityStatus,\n  ETransactionStatus: () => ETransactionStatus,\n  ETransactionType: () => ETransactionType,\n  Errors: () => errors_exports,\n  JRPC: () => jsonrpc_exports,\n  SPEC: () => components_exports\n});\n\n// src/types/api/jsonrpc/index.ts\nvar jsonrpc_exports = {};\n\n// src/types/api/rpcspec/errors.ts\nvar errors_exports = {};\n\n// src/types/api/rpcspec/components.ts\nvar components_exports = {};\n\n// src/types/api/rpcspec/nonspec.ts\nvar ETransactionType = /* @__PURE__ */ ((ETransactionType2) => {\n  ETransactionType2[\"DECLARE\"] = \"DECLARE\";\n  ETransactionType2[\"DEPLOY\"] = \"DEPLOY\";\n  ETransactionType2[\"DEPLOY_ACCOUNT\"] = \"DEPLOY_ACCOUNT\";\n  ETransactionType2[\"INVOKE\"] = \"INVOKE\";\n  ETransactionType2[\"L1_HANDLER\"] = \"L1_HANDLER\";\n  return ETransactionType2;\n})(ETransactionType || {});\nvar ESimulationFlag = /* @__PURE__ */ ((ESimulationFlag2) => {\n  ESimulationFlag2[\"SKIP_VALIDATE\"] = \"SKIP_VALIDATE\";\n  ESimulationFlag2[\"SKIP_FEE_CHARGE\"] = \"SKIP_FEE_CHARGE\";\n  return ESimulationFlag2;\n})(ESimulationFlag || {});\nvar ETransactionStatus = /* @__PURE__ */ ((ETransactionStatus2) => {\n  ETransactionStatus2[\"RECEIVED\"] = \"RECEIVED\";\n  ETransactionStatus2[\"REJECTED\"] = \"REJECTED\";\n  ETransactionStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  ETransactionStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  return ETransactionStatus2;\n})(ETransactionStatus || {});\nvar ETransactionFinalityStatus = /* @__PURE__ */ ((ETransactionFinalityStatus2) => {\n  ETransactionFinalityStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  ETransactionFinalityStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  return ETransactionFinalityStatus2;\n})(ETransactionFinalityStatus || {});\nvar ETransactionExecutionStatus = /* @__PURE__ */ ((ETransactionExecutionStatus2) => {\n  ETransactionExecutionStatus2[\"SUCCEEDED\"] = \"SUCCEEDED\";\n  ETransactionExecutionStatus2[\"REVERTED\"] = \"REVERTED\";\n  return ETransactionExecutionStatus2;\n})(ETransactionExecutionStatus || {});\nvar EBlockTag = /* @__PURE__ */ ((EBlockTag2) => {\n  EBlockTag2[\"LATEST\"] = \"latest\";\n  EBlockTag2[\"PENDING\"] = \"pending\";\n  return EBlockTag2;\n})(EBlockTag || {});\nvar EDataAvailabilityMode = /* @__PURE__ */ ((EDataAvailabilityMode2) => {\n  EDataAvailabilityMode2[\"L1\"] = \"L1\";\n  EDataAvailabilityMode2[\"L2\"] = \"L2\";\n  return EDataAvailabilityMode2;\n})(EDataAvailabilityMode || {});\n\n// src/types/api/sequencer.ts\nvar sequencer_exports = {};\n\n// src/utils/assert.ts\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || \"Assertion failure\");\n  }\n}\n\n// src/utils/num.ts\nvar num_exports = {};\n__export(num_exports, {\n  assertInRange: () => assertInRange,\n  bigNumberishArrayToDecimalStringArray: () => bigNumberishArrayToDecimalStringArray,\n  bigNumberishArrayToHexadecimalStringArray: () => bigNumberishArrayToHexadecimalStringArray,\n  cleanHex: () => cleanHex,\n  getDecimalString: () => getDecimalString,\n  getHexString: () => getHexString,\n  getHexStringArray: () => getHexStringArray,\n  hexToBytes: () => hexToBytes,\n  hexToDecimalString: () => hexToDecimalString,\n  isBigInt: () => isBigInt,\n  isHex: () => isHex,\n  isStringWholeNumber: () => isStringWholeNumber,\n  toBigInt: () => toBigInt,\n  toCairoBool: () => toCairoBool,\n  toHex: () => toHex,\n  toHexString: () => toHexString,\n  toStorageKey: () => toStorageKey\n});\n\nfunction isHex(hex) {\n  return /^0x[0-9a-f]*$/i.test(hex);\n}\nfunction toBigInt(value) {\n  return BigInt(value);\n}\nfunction isBigInt(value) {\n  return typeof value === \"bigint\";\n}\nfunction toHex(number2) {\n  return addHexPrefix(toBigInt(number2).toString(16));\n}\nvar toHexString = toHex;\nfunction toStorageKey(number2) {\n  const res = addHexPrefix(toBigInt(number2).toString(16).padStart(64, \"0\"));\n  return res;\n}\nfunction hexToDecimalString(hex) {\n  return BigInt(addHexPrefix(hex)).toString(10);\n}\nvar cleanHex = (hex) => hex.toLowerCase().replace(/^(0x)0+/, \"$1\");\nfunction assertInRange(input, lowerBound, upperBound, inputName = \"\") {\n  const messageSuffix = inputName === \"\" ? \"invalid length\" : `invalid ${inputName} length`;\n  const inputBigInt = BigInt(input);\n  const lowerBoundBigInt = BigInt(lowerBound);\n  const upperBoundBigInt = BigInt(upperBound);\n  assert(\n    inputBigInt >= lowerBoundBigInt && inputBigInt <= upperBoundBigInt,\n    `Message not signable, ${messageSuffix}.`\n  );\n}\nfunction bigNumberishArrayToDecimalStringArray(rawCalldata) {\n  return rawCalldata.map((x) => toBigInt(x).toString(10));\n}\nfunction bigNumberishArrayToHexadecimalStringArray(rawCalldata) {\n  return rawCalldata.map((x) => toHex(x));\n}\nvar isStringWholeNumber = (value) => /^\\d+$/.test(value);\nfunction getDecimalString(value) {\n  if (isHex(value)) {\n    return hexToDecimalString(value);\n  }\n  if (isStringWholeNumber(value)) {\n    return value;\n  }\n  throw new Error(`${value} need to be hex-string or whole-number-string`);\n}\nfunction getHexString(value) {\n  if (isHex(value)) {\n    return value;\n  }\n  if (isStringWholeNumber(value)) {\n    return toHexString(value);\n  }\n  throw new Error(`${value} need to be hex-string or whole-number-string`);\n}\nfunction getHexStringArray(value) {\n  return value.map((el) => getHexString(el));\n}\nvar toCairoBool = (value) => (+value).toString();\nfunction hexToBytes(value) {\n  if (!isHex(value))\n    throw new Error(`${value} need to be a hex-string`);\n  let adaptedValue = removeHexPrefix(value);\n  if (adaptedValue.length % 2 !== 0) {\n    adaptedValue = `0${adaptedValue}`;\n  }\n  return (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(adaptedValue);\n}\n\n// src/utils/selector.ts\nvar selector_exports = {};\n__export(selector_exports, {\n  getSelector: () => getSelector,\n  getSelectorFromName: () => getSelectorFromName,\n  keccakBn: () => keccakBn,\n  starknetKeccak: () => starknetKeccak\n});\n\nfunction keccakBn(value) {\n  const hexWithoutPrefix = removeHexPrefix(toHex(BigInt(value)));\n  const evenHex = hexWithoutPrefix.length % 2 === 0 ? hexWithoutPrefix : `0${hexWithoutPrefix}`;\n  return addHexPrefix((0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak)(hexToBytes(addHexPrefix(evenHex))).toString(16));\n}\nfunction keccakHex(str) {\n  return addHexPrefix((0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak)(utf8ToArray(str)).toString(16));\n}\nfunction starknetKeccak(str) {\n  const hash = BigInt(keccakHex(str));\n  return hash & MASK_250;\n}\nfunction getSelectorFromName(funcName) {\n  return toHex(starknetKeccak(funcName));\n}\nfunction getSelector(value) {\n  if (isHex(value)) {\n    return value;\n  }\n  if (isStringWholeNumber(value)) {\n    return toHexString(value);\n  }\n  return getSelectorFromName(value);\n}\n\n// src/utils/shortString.ts\nvar shortString_exports = {};\n__export(shortString_exports, {\n  decodeShortString: () => decodeShortString,\n  encodeShortString: () => encodeShortString,\n  isASCII: () => isASCII,\n  isDecimalString: () => isDecimalString,\n  isLongText: () => isLongText,\n  isShortString: () => isShortString,\n  isShortText: () => isShortText,\n  isText: () => isText,\n  splitLongString: () => splitLongString\n});\nfunction isASCII(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\nfunction isShortString(str) {\n  return str.length <= TEXT_TO_FELT_MAX_LEN;\n}\nfunction isDecimalString(str) {\n  return /^[0-9]*$/i.test(str);\n}\nfunction isText(val) {\n  return typeof val === \"string\" && !isHex(val) && !isStringWholeNumber(val);\n}\nvar isShortText = (val) => isText(val) && isShortString(val);\nvar isLongText = (val) => isText(val) && !isShortString(val);\nfunction splitLongString(longStr) {\n  const regex = RegExp(`[^]{1,${TEXT_TO_FELT_MAX_LEN}}`, \"g\");\n  return longStr.match(regex) || [];\n}\nfunction encodeShortString(str) {\n  if (!isASCII(str))\n    throw new Error(`${str} is not an ASCII string`);\n  if (!isShortString(str))\n    throw new Error(`${str} is too long`);\n  return addHexPrefix(str.replace(/./g, (char) => char.charCodeAt(0).toString(16)));\n}\nfunction decodeShortString(str) {\n  if (!isASCII(str))\n    throw new Error(`${str} is not an ASCII string`);\n  if (isHex(str)) {\n    return removeHexPrefix(str).replace(/.{2}/g, (hex) => String.fromCharCode(parseInt(hex, 16)));\n  }\n  if (isDecimalString(str)) {\n    return decodeShortString(\"0X\".concat(BigInt(str).toString(16)));\n  }\n  throw new Error(`${str} is not Hex or decimal`);\n}\n\n// src/utils/calldata/cairo.ts\nvar cairo_exports = {};\n__export(cairo_exports, {\n  felt: () => felt,\n  getAbiContractVersion: () => getAbiContractVersion,\n  getArrayType: () => getArrayType,\n  isCairo1Abi: () => isCairo1Abi,\n  isCairo1Type: () => isCairo1Type,\n  isLen: () => isLen,\n  isTypeArray: () => isTypeArray,\n  isTypeBool: () => isTypeBool,\n  isTypeContractAddress: () => isTypeContractAddress,\n  isTypeEnum: () => isTypeEnum,\n  isTypeEthAddress: () => isTypeEthAddress,\n  isTypeFelt: () => isTypeFelt,\n  isTypeLitteral: () => isTypeLitteral,\n  isTypeNamedTuple: () => isTypeNamedTuple,\n  isTypeOption: () => isTypeOption,\n  isTypeResult: () => isTypeResult,\n  isTypeStruct: () => isTypeStruct,\n  isTypeTuple: () => isTypeTuple,\n  isTypeUint: () => isTypeUint,\n  isTypeUint256: () => isTypeUint256,\n  tuple: () => tuple,\n  uint256: () => uint256\n});\n\n// src/utils/uint256.ts\nvar uint256_exports = {};\n__export(uint256_exports, {\n  UINT_128_MAX: () => UINT_128_MAX,\n  UINT_256_MAX: () => UINT_256_MAX,\n  bnToUint256: () => bnToUint256,\n  isUint256: () => isUint256,\n  uint256ToBN: () => uint256ToBN\n});\nvar UINT_128_MAX = (1n << 128n) - 1n;\nvar UINT_256_MAX = (1n << 256n) - 1n;\nfunction uint256ToBN(uint2562) {\n  return (toBigInt(uint2562.high) << 128n) + toBigInt(uint2562.low);\n}\nfunction isUint256(bn) {\n  return toBigInt(bn) <= UINT_256_MAX;\n}\nfunction bnToUint256(bn) {\n  const bi = toBigInt(bn);\n  if (!isUint256(bi))\n    throw new Error(\"Number is too large\");\n  return {\n    low: addHexPrefix((bi & UINT_128_MAX).toString(16)),\n    high: addHexPrefix((bi >> 128n).toString(16))\n  };\n}\n\n// src/utils/calldata/cairo.ts\nvar isLen = (name) => /_len$/.test(name);\nvar isTypeFelt = (type) => type === \"felt\" || type === \"core::felt252\";\nvar isTypeArray = (type) => /\\*/.test(type) || type.startsWith(\"core::array::Array::\") || type.startsWith(\"core::array::Span::\");\nvar isTypeTuple = (type) => /^\\(.*\\)$/i.test(type);\nvar isTypeNamedTuple = (type) => /\\(.*\\)/i.test(type) && type.includes(\":\");\nvar isTypeStruct = (type, structs) => type in structs;\nvar isTypeEnum = (type, enums) => type in enums;\nvar isTypeOption = (type) => type.startsWith(\"core::option::Option::\");\nvar isTypeResult = (type) => type.startsWith(\"core::result::Result::\");\nvar isTypeUint = (type) => Object.values(Uint).includes(type);\nvar isTypeLitteral = (type) => Object.values(Litteral).includes(type);\nvar isTypeUint256 = (type) => type === \"core::integer::u256\";\nvar isTypeBool = (type) => type === \"core::bool\";\nvar isTypeContractAddress = (type) => type === \"core::starknet::contract_address::ContractAddress\";\nvar isTypeEthAddress = (type) => type === \"core::starknet::eth_address::EthAddress\";\nvar isCairo1Type = (type) => type.includes(\"::\");\nvar getArrayType = (type) => {\n  if (isCairo1Type(type)) {\n    return type.substring(type.indexOf(\"<\") + 1, type.lastIndexOf(\">\"));\n  }\n  return type.replace(\"*\", \"\");\n};\nfunction isCairo1Abi(abi) {\n  const { cairo } = getAbiContractVersion(abi);\n  if (cairo === void 0) {\n    throw Error(\"Unable to determine Cairo version\");\n  }\n  return cairo === \"1\";\n}\nfunction getAbiContractVersion(abi) {\n  if (abi.find((it) => it.type === \"interface\")) {\n    return { cairo: \"1\", compiler: \"2\" };\n  }\n  const testFunction = abi.find(\n    (it) => it.type === \"function\" && (it.inputs.length || it.outputs.length)\n  );\n  if (!testFunction) {\n    return { cairo: void 0, compiler: void 0 };\n  }\n  const io = testFunction.inputs.length ? testFunction.inputs : testFunction.outputs;\n  if (isCairo1Type(io[0].type)) {\n    return { cairo: \"1\", compiler: \"1\" };\n  }\n  return { cairo: \"0\", compiler: \"0\" };\n}\nvar uint256 = (it) => {\n  const bn = BigInt(it);\n  if (!isUint256(bn))\n    throw new Error(\"Number is too large\");\n  return {\n    // eslint-disable-next-line no-bitwise\n    low: (bn & UINT_128_MAX).toString(10),\n    // eslint-disable-next-line no-bitwise\n    high: (bn >> 128n).toString(10)\n  };\n};\nvar tuple = (...args) => ({ ...args });\nfunction felt(it) {\n  if (isBigInt(it) || typeof it === \"number\" && Number.isInteger(it)) {\n    return it.toString();\n  }\n  if (isText(it)) {\n    if (!isShortString(it))\n      throw new Error(\n        `${it} is a long string > 31 chars, felt can store short strings, split it to array of short strings`\n      );\n    const encoded = encodeShortString(it);\n    return BigInt(encoded).toString();\n  }\n  if (typeof it === \"string\" && isHex(it)) {\n    return BigInt(it).toString();\n  }\n  if (typeof it === \"string\" && isStringWholeNumber(it)) {\n    return it;\n  }\n  if (typeof it === \"boolean\") {\n    return `${+it}`;\n  }\n  throw new Error(`${it} can't be computed by felt()`);\n}\n\n// src/utils/calldata/enum/CairoCustomEnum.ts\nvar CairoCustomEnum = class {\n  /**\n   * @param enumContent an object with the variants as keys and the content as value. Only one content shall be defined.\n   */\n  constructor(enumContent) {\n    const variantsList = Object.values(enumContent);\n    if (variantsList.length === 0) {\n      throw new Error(\"This Enum must have a least 1 variant\");\n    }\n    const nbActiveVariants = variantsList.filter(\n      (content) => typeof content !== \"undefined\"\n    ).length;\n    if (nbActiveVariants !== 1) {\n      throw new Error(\"This Enum must have exactly one active variant\");\n    }\n    this.variant = enumContent;\n  }\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   */\n  unwrap() {\n    const variants = Object.entries(this.variant);\n    const activeVariant = variants.find((item) => typeof item[1] !== \"undefined\");\n    if (typeof activeVariant === \"undefined\") {\n      return void 0;\n    }\n    return activeVariant[1];\n  }\n  /**\n   *\n   * @returns the name of the valid variant of a Cairo custom Enum.\n   */\n  activeVariant() {\n    const variants = Object.entries(this.variant);\n    const activeVariant = variants.find((item) => typeof item[1] !== \"undefined\");\n    if (typeof activeVariant === \"undefined\") {\n      return \"\";\n    }\n    return activeVariant[0];\n  }\n};\n\n// src/utils/calldata/enum/CairoOption.ts\nvar CairoOptionVariant = /* @__PURE__ */ ((CairoOptionVariant2) => {\n  CairoOptionVariant2[CairoOptionVariant2[\"Some\"] = 0] = \"Some\";\n  CairoOptionVariant2[CairoOptionVariant2[\"None\"] = 1] = \"None\";\n  return CairoOptionVariant2;\n})(CairoOptionVariant || {});\nvar CairoOption = class {\n  constructor(variant, someContent) {\n    if (!(variant in CairoOptionVariant)) {\n      throw new Error(\"Wrong variant : should be CairoOptionVariant.Some or .None.\");\n    }\n    if (variant === 0 /* Some */) {\n      if (typeof someContent === \"undefined\") {\n        throw new Error(\n          'The creation of a Cairo Option with \"Some\" variant needs a content as input.'\n        );\n      }\n      this.Some = someContent;\n      this.None = void 0;\n    } else {\n      this.Some = void 0;\n      this.None = true;\n    }\n  }\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   *  If None, returns 'undefined'.\n   */\n  unwrap() {\n    if (this.None) {\n      return void 0;\n    }\n    return this.Some;\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'isSome'.\n   */\n  isSome() {\n    return !(typeof this.Some === \"undefined\");\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'isNone'.\n   */\n  isNone() {\n    return this.None === true;\n  }\n};\n\n// src/utils/calldata/enum/CairoResult.ts\nvar CairoResultVariant = /* @__PURE__ */ ((CairoResultVariant2) => {\n  CairoResultVariant2[CairoResultVariant2[\"Ok\"] = 0] = \"Ok\";\n  CairoResultVariant2[CairoResultVariant2[\"Err\"] = 1] = \"Err\";\n  return CairoResultVariant2;\n})(CairoResultVariant || {});\nvar CairoResult = class {\n  constructor(variant, resultContent) {\n    if (!(variant in CairoResultVariant)) {\n      throw new Error(\"Wrong variant : should be CairoResultVariant.Ok or .Err.\");\n    }\n    if (variant === 0 /* Ok */) {\n      this.Ok = resultContent;\n      this.Err = void 0;\n    } else {\n      this.Ok = void 0;\n      this.Err = resultContent;\n    }\n  }\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo Result.\n   */\n  unwrap() {\n    if (typeof this.Ok !== \"undefined\") {\n      return this.Ok;\n    }\n    if (typeof this.Err !== \"undefined\") {\n      return this.Err;\n    }\n    throw new Error(\"Both Result.Ok and .Err are undefined. Not authorized.\");\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'Ok'.\n   */\n  isOk() {\n    return !(typeof this.Ok === \"undefined\");\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'isErr'.\n   */\n  isErr() {\n    return !(typeof this.Err === \"undefined\");\n  }\n};\n\n// src/utils/calldata/formatter.ts\nvar guard = {\n  isBN: (data, type, key) => {\n    if (!isBigInt(data[key]))\n      throw new Error(\n        `Data and formatter mismatch on ${key}:${type[key]}, expected response data ${key}:${data[key]} to be BN instead it is ${typeof data[key]}`\n      );\n  },\n  unknown: (data, type, key) => {\n    throw new Error(`Unhandled formatter type on ${key}:${type[key]} for data ${key}:${data[key]}`);\n  }\n};\nfunction formatter(data, type, sameType) {\n  return Object.entries(data).reduce((acc, [key, value]) => {\n    const elType = sameType ?? type[key];\n    if (!(key in type) && !sameType) {\n      acc[key] = value;\n      return acc;\n    }\n    if (elType === \"string\") {\n      if (Array.isArray(data[key])) {\n        const arrayStr = formatter(\n          data[key],\n          data[key].map((_) => elType)\n        );\n        acc[key] = Object.values(arrayStr).join(\"\");\n        return acc;\n      }\n      guard.isBN(data, type, key);\n      acc[key] = decodeShortString(value);\n      return acc;\n    }\n    if (elType === \"number\") {\n      guard.isBN(data, type, key);\n      acc[key] = Number(value);\n      return acc;\n    }\n    if (typeof elType === \"function\") {\n      acc[key] = elType(value);\n      return acc;\n    }\n    if (Array.isArray(elType)) {\n      const arrayObj = formatter(data[key], elType, elType[0]);\n      acc[key] = Object.values(arrayObj);\n      return acc;\n    }\n    if (typeof elType === \"object\") {\n      acc[key] = formatter(data[key], elType);\n      return acc;\n    }\n    guard.unknown(data, type, key);\n    return acc;\n  }, {});\n}\n\n// src/utils/calldata/parser/parser-0-1.1.0.ts\nvar AbiParser1 = class {\n  constructor(abi) {\n    this.abi = abi;\n  }\n  /**\n   * abi method inputs length without '_len' inputs\n   * cairo 0 reducer\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */\n  methodInputsLength(abiMethod) {\n    return abiMethod.inputs.reduce((acc, input) => !isLen(input.name) ? acc + 1 : acc, 0);\n  }\n  /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */\n  getMethod(name) {\n    return this.abi.find((it) => it.name === name);\n  }\n  /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */\n  getLegacyFormat() {\n    return this.abi;\n  }\n};\n\n// src/utils/calldata/parser/parser-2.0.0.ts\nvar AbiParser2 = class {\n  constructor(abi) {\n    this.abi = abi;\n  }\n  /**\n   * abi method inputs length\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */\n  methodInputsLength(abiMethod) {\n    return abiMethod.inputs.length;\n  }\n  /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */\n  getMethod(name) {\n    const intf = this.abi.find((it) => it.type === \"interface\");\n    return intf.items.find((it) => it.name === name);\n  }\n  /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */\n  getLegacyFormat() {\n    return this.abi.flatMap((e) => {\n      if (e.type === \"interface\") {\n        return e.items;\n      }\n      return e;\n    });\n  }\n};\n\n// src/utils/calldata/parser/index.ts\nfunction createAbiParser(abi) {\n  const version = getAbiVersion(abi);\n  if (version === 0 || version === 1) {\n    return new AbiParser1(abi);\n  }\n  if (version === 2) {\n    return new AbiParser2(abi);\n  }\n  throw Error(`Unsupported ABI version ${version}`);\n}\nfunction getAbiVersion(abi) {\n  if (abi.find((it) => it.type === \"interface\"))\n    return 2;\n  if (isCairo1Abi(abi))\n    return 1;\n  return 0;\n}\nfunction isNoConstructorValid(method, argsCalldata, abiMethod) {\n  return method === \"constructor\" && !abiMethod && !argsCalldata.length;\n}\n\n// src/utils/calldata/tuple.ts\nfunction parseNamedTuple(namedTuple) {\n  const name = namedTuple.substring(0, namedTuple.indexOf(\":\"));\n  const type = namedTuple.substring(name.length + \":\".length);\n  return { name, type };\n}\nfunction parseSubTuple(s) {\n  if (!s.includes(\"(\"))\n    return { subTuple: [], result: s };\n  const subTuple = [];\n  let result = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \"(\") {\n      let counter = 1;\n      const lBracket = i;\n      i++;\n      while (counter) {\n        if (s[i] === \")\")\n          counter--;\n        if (s[i] === \"(\")\n          counter++;\n        i++;\n      }\n      subTuple.push(s.substring(lBracket, i));\n      result += \" \";\n      i--;\n    } else {\n      result += s[i];\n    }\n    i++;\n  }\n  return {\n    subTuple,\n    result\n  };\n}\nfunction extractCairo0Tuple(type) {\n  const cleanType = type.replace(/\\s/g, \"\").slice(1, -1);\n  const { subTuple, result } = parseSubTuple(cleanType);\n  let recomposed = result.split(\",\").map((it) => {\n    return subTuple.length ? it.replace(\" \", subTuple.shift()) : it;\n  });\n  if (isTypeNamedTuple(type)) {\n    recomposed = recomposed.reduce((acc, it) => {\n      return acc.concat(parseNamedTuple(it));\n    }, []);\n  }\n  return recomposed;\n}\nfunction extractCairo1Tuple(type) {\n  const cleanType = type.replace(/\\s/g, \"\").slice(1, -1);\n  const { subTuple, result } = parseSubTuple(cleanType);\n  const recomposed = result.split(\",\").map((it) => {\n    return subTuple.length ? it.replace(\" \", subTuple.shift()) : it;\n  });\n  return recomposed;\n}\nfunction extractTupleMemberTypes(type) {\n  if (isCairo1Type(type)) {\n    return extractCairo1Tuple(type);\n  }\n  return extractCairo0Tuple(type);\n}\n\n// src/utils/calldata/propertyOrder.ts\nfunction errorU256(key) {\n  return Error(\n    `Your object includes the property : ${key}, containing an Uint256 object without the 'low' and 'high' keys.`\n  );\n}\nfunction orderPropsByAbi(unorderedObject, abiOfObject, structs, enums) {\n  const orderInput = (unorderedItem, abiType) => {\n    if (isTypeArray(abiType)) {\n      return orderArray(unorderedItem, abiType);\n    }\n    if (isTypeEnum(abiType, enums)) {\n      const abiObj = enums[abiType];\n      return orderEnum(unorderedItem, abiObj);\n    }\n    if (isTypeTuple(abiType)) {\n      return orderTuple(unorderedItem, abiType);\n    }\n    if (isTypeEthAddress(abiType)) {\n      return unorderedItem;\n    }\n    if (isTypeUint256(abiType)) {\n      const u256 = unorderedItem;\n      if (typeof u256 !== \"object\") {\n        return u256;\n      }\n      if (!(\"low\" in u256 && \"high\" in u256)) {\n        throw errorU256(abiType);\n      }\n      return { low: u256.low, high: u256.high };\n    }\n    if (isTypeStruct(abiType, structs)) {\n      const abiOfStruct = structs[abiType].members;\n      return orderStruct(unorderedItem, abiOfStruct);\n    }\n    return unorderedItem;\n  };\n  const orderStruct = (unorderedObject2, abiObject) => {\n    const orderedObject2 = abiObject.reduce((orderedObject, abiParam) => {\n      const setProperty = (value) => Object.defineProperty(orderedObject, abiParam.name, {\n        enumerable: true,\n        value: value ?? unorderedObject2[abiParam.name]\n      });\n      if (unorderedObject2[abiParam.name] === \"undefined\") {\n        if (isCairo1Type(abiParam.type) || !isLen(abiParam.name)) {\n          throw Error(`Your object needs a property with key : ${abiParam.name} .`);\n        }\n      }\n      setProperty(orderInput(unorderedObject2[abiParam.name], abiParam.type));\n      return orderedObject;\n    }, {});\n    return orderedObject2;\n  };\n  function orderArray(myArray, abiParam) {\n    const typeInArray = getArrayType(abiParam);\n    if (typeof myArray === \"string\") {\n      return myArray;\n    }\n    return myArray.map((myElem) => orderInput(myElem, typeInArray));\n  }\n  function orderTuple(unorderedObject2, abiParam) {\n    const typeList = extractTupleMemberTypes(abiParam);\n    const orderedObject2 = typeList.reduce((orderedObject, abiTypeCairoX, index) => {\n      const myObjKeys = Object.keys(unorderedObject2);\n      const setProperty = (value) => Object.defineProperty(orderedObject, index.toString(), {\n        enumerable: true,\n        value: value ?? unorderedObject2[myObjKeys[index]]\n      });\n      const abiType = abiTypeCairoX?.type ? abiTypeCairoX.type : abiTypeCairoX;\n      setProperty(orderInput(unorderedObject2[myObjKeys[index]], abiType));\n      return orderedObject;\n    }, {});\n    return orderedObject2;\n  }\n  const orderEnum = (unorderedObject2, abiObject) => {\n    if (isTypeResult(abiObject.name)) {\n      const unorderedResult = unorderedObject2;\n      const resultOkType = abiObject.name.substring(\n        abiObject.name.indexOf(\"<\") + 1,\n        abiObject.name.lastIndexOf(\",\")\n      );\n      const resultErrType = abiObject.name.substring(\n        abiObject.name.indexOf(\",\") + 1,\n        abiObject.name.lastIndexOf(\">\")\n      );\n      if (unorderedResult.isOk()) {\n        return new CairoResult(\n          0 /* Ok */,\n          orderInput(unorderedObject2.unwrap(), resultOkType)\n        );\n      }\n      return new CairoResult(\n        1 /* Err */,\n        orderInput(unorderedObject2.unwrap(), resultErrType)\n      );\n    }\n    if (isTypeOption(abiObject.name)) {\n      const unorderedOption = unorderedObject2;\n      const resultSomeType = abiObject.name.substring(\n        abiObject.name.indexOf(\"<\") + 1,\n        abiObject.name.lastIndexOf(\">\")\n      );\n      if (unorderedOption.isSome()) {\n        return new CairoOption(\n          0 /* Some */,\n          orderInput(unorderedOption.unwrap(), resultSomeType)\n        );\n      }\n      return new CairoOption(1 /* None */, {});\n    }\n    const unorderedCustomEnum = unorderedObject2;\n    const variants = Object.entries(unorderedCustomEnum.variant);\n    const newEntries = variants.map((variant) => {\n      if (typeof variant[1] === \"undefined\") {\n        return variant;\n      }\n      const variantType = abiObject.type.substring(\n        abiObject.type.lastIndexOf(\"<\") + 1,\n        abiObject.type.lastIndexOf(\">\")\n      );\n      if (variantType === \"()\") {\n        return variant;\n      }\n      return [variant[0], orderInput(unorderedCustomEnum.unwrap(), variantType)];\n    });\n    return new CairoCustomEnum(Object.fromEntries(newEntries));\n  };\n  const finalOrderedObject = abiOfObject.reduce((orderedObject, abiParam) => {\n    const setProperty = (value) => Object.defineProperty(orderedObject, abiParam.name, {\n      enumerable: true,\n      value\n    });\n    if (isLen(abiParam.name) && !isCairo1Type(abiParam.type)) {\n      return orderedObject;\n    }\n    setProperty(orderInput(unorderedObject[abiParam.name], abiParam.type));\n    return orderedObject;\n  }, {});\n  return finalOrderedObject;\n}\n\n// src/utils/calldata/requestParser.ts\nfunction parseBaseTypes(type, val) {\n  switch (true) {\n    case isTypeUint256(type):\n      const el_uint256 = uint256(val);\n      return [felt(el_uint256.low), felt(el_uint256.high)];\n    default:\n      return felt(val);\n  }\n}\nfunction parseTuple(element, typeStr) {\n  const memberTypes = extractTupleMemberTypes(typeStr);\n  const elements = Object.values(element);\n  if (elements.length !== memberTypes.length) {\n    throw Error(\n      `ParseTuple: provided and expected abi tuple size do not match.\n      provided: ${elements} \n      expected: ${memberTypes}`\n    );\n  }\n  return memberTypes.map((it, dx) => {\n    return {\n      element: elements[dx],\n      type: it.type ?? it\n    };\n  });\n}\nfunction parseUint256(element) {\n  if (typeof element === \"object\") {\n    const { low, high } = element;\n    return [felt(low), felt(high)];\n  }\n  const el_uint256 = uint256(element);\n  return [felt(el_uint256.low), felt(el_uint256.high)];\n}\nfunction parseCalldataValue(element, type, structs, enums) {\n  if (element === void 0) {\n    throw Error(`Missing parameter for type ${type}`);\n  }\n  if (Array.isArray(element)) {\n    const result = [];\n    result.push(felt(element.length));\n    const arrayType = getArrayType(type);\n    return element.reduce((acc, it) => {\n      return acc.concat(parseCalldataValue(it, arrayType, structs, enums));\n    }, result);\n  }\n  if (structs[type] && structs[type].members.length) {\n    if (isTypeUint256(type)) {\n      return parseUint256(element);\n    }\n    if (type === \"core::starknet::eth_address::EthAddress\")\n      return parseBaseTypes(type, element);\n    const { members } = structs[type];\n    const subElement = element;\n    return members.reduce((acc, it) => {\n      return acc.concat(parseCalldataValue(subElement[it.name], it.type, structs, enums));\n    }, []);\n  }\n  if (isTypeTuple(type)) {\n    const tupled = parseTuple(element, type);\n    return tupled.reduce((acc, it) => {\n      const parsedData = parseCalldataValue(it.element, it.type, structs, enums);\n      return acc.concat(parsedData);\n    }, []);\n  }\n  if (isTypeUint256(type)) {\n    return parseUint256(element);\n  }\n  if (isTypeEnum(type, enums)) {\n    const { variants } = enums[type];\n    if (isTypeOption(type)) {\n      const myOption = element;\n      if (myOption.isSome()) {\n        const listTypeVariant2 = variants.find((variant) => variant.name === \"Some\");\n        if (typeof listTypeVariant2 === \"undefined\") {\n          throw Error(`Error in abi : Option has no 'Some' variant.`);\n        }\n        const typeVariantSome = listTypeVariant2.type;\n        if (typeVariantSome === \"()\") {\n          return 0 /* Some */.toString();\n        }\n        const parsedParameter2 = parseCalldataValue(\n          myOption.unwrap(),\n          typeVariantSome,\n          structs,\n          enums\n        );\n        if (Array.isArray(parsedParameter2)) {\n          return [0 /* Some */.toString(), ...parsedParameter2];\n        }\n        return [0 /* Some */.toString(), parsedParameter2];\n      }\n      return 1 /* None */.toString();\n    }\n    if (isTypeResult(type)) {\n      const myResult = element;\n      if (myResult.isOk()) {\n        const listTypeVariant3 = variants.find((variant) => variant.name === \"Ok\");\n        if (typeof listTypeVariant3 === \"undefined\") {\n          throw Error(`Error in abi : Result has no 'Ok' variant.`);\n        }\n        const typeVariantOk = listTypeVariant3.type;\n        if (typeVariantOk === \"()\") {\n          return 0 /* Ok */.toString();\n        }\n        const parsedParameter3 = parseCalldataValue(\n          myResult.unwrap(),\n          typeVariantOk,\n          structs,\n          enums\n        );\n        if (Array.isArray(parsedParameter3)) {\n          return [0 /* Ok */.toString(), ...parsedParameter3];\n        }\n        return [0 /* Ok */.toString(), parsedParameter3];\n      }\n      const listTypeVariant2 = variants.find((variant) => variant.name === \"Err\");\n      if (typeof listTypeVariant2 === \"undefined\") {\n        throw Error(`Error in abi : Result has no 'Err' variant.`);\n      }\n      const typeVariantErr = listTypeVariant2.type;\n      if (typeVariantErr === \"()\") {\n        return 1 /* Err */.toString();\n      }\n      const parsedParameter2 = parseCalldataValue(myResult.unwrap(), typeVariantErr, structs, enums);\n      if (Array.isArray(parsedParameter2)) {\n        return [1 /* Err */.toString(), ...parsedParameter2];\n      }\n      return [1 /* Err */.toString(), parsedParameter2];\n    }\n    const myEnum = element;\n    const activeVariant = myEnum.activeVariant();\n    const listTypeVariant = variants.find((variant) => variant.name === activeVariant);\n    if (typeof listTypeVariant === \"undefined\") {\n      throw Error(`Not find in abi : Enum has no '${activeVariant}' variant.`);\n    }\n    const typeActiveVariant = listTypeVariant.type;\n    const numActiveVariant = variants.findIndex((variant) => variant.name === activeVariant);\n    if (typeActiveVariant === \"()\") {\n      return numActiveVariant.toString();\n    }\n    const parsedParameter = parseCalldataValue(myEnum.unwrap(), typeActiveVariant, structs, enums);\n    if (Array.isArray(parsedParameter)) {\n      return [numActiveVariant.toString(), ...parsedParameter];\n    }\n    return [numActiveVariant.toString(), parsedParameter];\n  }\n  if (typeof element === \"object\") {\n    throw Error(`Parameter ${element} do not align with abi parameter ${type}`);\n  }\n  return parseBaseTypes(type, element);\n}\nfunction parseCalldataField(argsIterator, input, structs, enums) {\n  const { name, type } = input;\n  let { value } = argsIterator.next();\n  switch (true) {\n    case isTypeArray(type):\n      if (!Array.isArray(value) && !isText(value)) {\n        throw Error(`ABI expected parameter ${name} to be array or long string, got ${value}`);\n      }\n      if (typeof value === \"string\") {\n        value = splitLongString(value);\n      }\n      return parseCalldataValue(value, input.type, structs, enums);\n    case type === \"core::starknet::eth_address::EthAddress\":\n      return parseBaseTypes(type, value);\n    case (isTypeStruct(type, structs) || isTypeTuple(type) || isTypeUint256(type)):\n      return parseCalldataValue(value, type, structs, enums);\n    case isTypeEnum(type, enums):\n      return parseCalldataValue(\n        value,\n        type,\n        structs,\n        enums\n      );\n    default:\n      return parseBaseTypes(type, value);\n  }\n}\n\n// src/utils/calldata/responseParser.ts\nfunction parseBaseTypes2(type, it) {\n  let temp;\n  switch (true) {\n    case isTypeBool(type):\n      temp = it.next().value;\n      return Boolean(BigInt(temp));\n    case isTypeUint256(type):\n      const low = it.next().value;\n      const high = it.next().value;\n      return uint256ToBN({ low, high });\n    case type === \"core::starknet::eth_address::EthAddress\":\n      temp = it.next().value;\n      return BigInt(temp);\n    default:\n      temp = it.next().value;\n      return BigInt(temp);\n  }\n}\nfunction parseResponseValue(responseIterator, element, structs, enums) {\n  if (element.type === \"()\") {\n    return {};\n  }\n  if (isTypeUint256(element.type)) {\n    const low = responseIterator.next().value;\n    const high = responseIterator.next().value;\n    return uint256ToBN({ low, high });\n  }\n  if (isTypeArray(element.type)) {\n    const parsedDataArr = [];\n    const el = { name: \"\", type: getArrayType(element.type) };\n    const len = BigInt(responseIterator.next().value);\n    while (parsedDataArr.length < len) {\n      parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n    }\n    return parsedDataArr;\n  }\n  if (structs && element.type in structs && structs[element.type]) {\n    if (element.type === \"core::starknet::eth_address::EthAddress\") {\n      return parseBaseTypes2(element.type, responseIterator);\n    }\n    return structs[element.type].members.reduce((acc, el) => {\n      acc[el.name] = parseResponseValue(responseIterator, el, structs, enums);\n      return acc;\n    }, {});\n  }\n  if (enums && element.type in enums && enums[element.type]) {\n    const variantNum = Number(responseIterator.next().value);\n    const rawEnum = enums[element.type].variants.reduce((acc, variant, num) => {\n      if (num === variantNum) {\n        acc[variant.name] = parseResponseValue(\n          responseIterator,\n          { name: \"\", type: variant.type },\n          structs,\n          enums\n        );\n        return acc;\n      }\n      acc[variant.name] = void 0;\n      return acc;\n    }, {});\n    if (element.type.startsWith(\"core::option::Option\")) {\n      const content = variantNum === 0 /* Some */ ? rawEnum.Some : void 0;\n      return new CairoOption(variantNum, content);\n    }\n    if (element.type.startsWith(\"core::result::Result\")) {\n      let content;\n      if (variantNum === 0 /* Ok */) {\n        content = rawEnum.Ok;\n      } else {\n        content = rawEnum.Err;\n      }\n      return new CairoResult(variantNum, content);\n    }\n    const customEnum = new CairoCustomEnum(rawEnum);\n    return customEnum;\n  }\n  if (isTypeTuple(element.type)) {\n    const memberTypes = extractTupleMemberTypes(element.type);\n    return memberTypes.reduce((acc, it, idx) => {\n      const name = it?.name ? it.name : idx;\n      const type = it?.type ? it.type : it;\n      const el = { name, type };\n      acc[name] = parseResponseValue(responseIterator, el, structs, enums);\n      return acc;\n    }, {});\n  }\n  if (isTypeArray(element.type)) {\n    const parsedDataArr = [];\n    const el = { name: \"\", type: getArrayType(element.type) };\n    const len = BigInt(responseIterator.next().value);\n    while (parsedDataArr.length < len) {\n      parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n    }\n    return parsedDataArr;\n  }\n  return parseBaseTypes2(element.type, responseIterator);\n}\nfunction responseParser(responseIterator, output, structs, enums, parsedResult) {\n  const { name, type } = output;\n  let temp;\n  switch (true) {\n    case isLen(name):\n      temp = responseIterator.next().value;\n      return BigInt(temp);\n    case (structs && type in structs || isTypeTuple(type)):\n      return parseResponseValue(responseIterator, output, structs, enums);\n    case (enums && isTypeEnum(type, enums)):\n      return parseResponseValue(responseIterator, output, structs, enums);\n    case isTypeArray(type):\n      if (isCairo1Type(type)) {\n        return parseResponseValue(responseIterator, output, structs, enums);\n      }\n      const parsedDataArr = [];\n      if (parsedResult && parsedResult[`${name}_len`]) {\n        const arrLen = parsedResult[`${name}_len`];\n        while (parsedDataArr.length < arrLen) {\n          parsedDataArr.push(\n            parseResponseValue(\n              responseIterator,\n              { name, type: output.type.replace(\"*\", \"\") },\n              structs,\n              enums\n            )\n          );\n        }\n      }\n      return parsedDataArr;\n    default:\n      return parseBaseTypes2(type, responseIterator);\n  }\n}\n\n// src/utils/calldata/validate.ts\nvar validateFelt = (parameter, input) => {\n  assert(\n    typeof parameter === \"string\" || typeof parameter === \"number\" || typeof parameter === \"bigint\",\n    `Validate: arg ${input.name} should be a felt typed as (String, Number or BigInt)`\n  );\n  if (typeof parameter === \"string\" && !isHex(parameter))\n    return;\n  const param = BigInt(parameter.toString(10));\n  assert(\n    // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1266\n    param >= 0n && param <= 2n ** 252n - 1n,\n    `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n  );\n};\nvar validateUint = (parameter, input) => {\n  if (typeof parameter === \"number\") {\n    assert(\n      parameter <= Number.MAX_SAFE_INTEGER,\n      `Validation: Parameter is to large to be typed as Number use (BigInt or String)`\n    );\n  }\n  assert(\n    typeof parameter === \"string\" || typeof parameter === \"number\" || typeof parameter === \"bigint\" || typeof parameter === \"object\" && \"low\" in parameter && \"high\" in parameter,\n    `Validate: arg ${input.name} of cairo type ${input.type} should be type (String, Number or BigInt), but is ${typeof parameter} ${parameter}.`\n  );\n  const param = typeof parameter === \"object\" ? uint256ToBN(parameter) : toBigInt(parameter);\n  switch (input.type) {\n    case \"core::integer::u8\" /* u8 */:\n      assert(\n        param >= 0n && param <= 255n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0 - 255]`\n      );\n      break;\n    case \"core::integer::u16\" /* u16 */:\n      assert(\n        param >= 0n && param <= 65535n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 65535]`\n      );\n      break;\n    case \"core::integer::u32\" /* u32 */:\n      assert(\n        param >= 0n && param <= 4294967295n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 4294967295]`\n      );\n      break;\n    case \"core::integer::u64\" /* u64 */:\n      assert(\n        param >= 0n && param <= 2n ** 64n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^64-1]`\n      );\n      break;\n    case \"core::integer::u128\" /* u128 */:\n      assert(\n        param >= 0n && param <= 2n ** 128n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^128-1]`\n      );\n      break;\n    case \"core::integer::u256\" /* u256 */:\n      assert(\n        param >= 0n && param <= 2n ** 256n - 1n,\n        `Validate: arg ${input.name} is ${input.type} 0 - 2^256-1`\n      );\n      break;\n    case \"core::starknet::class_hash::ClassHash\" /* ClassHash */:\n      assert(\n        // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1670\n        param >= 0n && param <= 2n ** 252n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n      );\n      break;\n    case \"core::starknet::contract_address::ContractAddress\" /* ContractAddress */:\n      assert(\n        // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1245\n        param >= 0n && param <= 2n ** 252n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n      );\n      break;\n    default:\n      break;\n  }\n};\nvar validateBool = (parameter, input) => {\n  assert(\n    typeof parameter === \"boolean\",\n    `Validate: arg ${input.name} of cairo type ${input.type} should be type (Boolean)`\n  );\n};\nvar validateStruct = (parameter, input, structs) => {\n  if (input.type === \"core::integer::u256\" /* u256 */) {\n    validateUint(parameter, input);\n    return;\n  }\n  if (input.type === \"core::starknet::eth_address::EthAddress\") {\n    assert(\n      typeof parameter !== \"object\",\n      `EthAddress type is waiting a BigNumberish. Got ${parameter}`\n    );\n    const param = BigInt(parameter.toString(10));\n    assert(\n      // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1259\n      param >= 0n && param <= 2n ** 160n - 1n,\n      `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^160-1]`\n    );\n    return;\n  }\n  assert(\n    typeof parameter === \"object\" && !Array.isArray(parameter),\n    `Validate: arg ${input.name} is cairo type struct (${input.type}), and should be defined as js object (not array)`\n  );\n  structs[input.type].members.forEach(({ name }) => {\n    assert(\n      Object.keys(parameter).includes(name),\n      `Validate: arg ${input.name} should have a property ${name}`\n    );\n  });\n};\nvar validateEnum = (parameter, input) => {\n  assert(\n    typeof parameter === \"object\" && !Array.isArray(parameter),\n    `Validate: arg ${input.name} is cairo type Enum (${input.type}), and should be defined as js object (not array)`\n  );\n  const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(parameter));\n  const keys = [...Object.getOwnPropertyNames(parameter), ...methodsKeys];\n  if (isTypeOption(input.type) && keys.includes(\"isSome\") && keys.includes(\"isNone\")) {\n    return;\n  }\n  if (isTypeResult(input.type) && keys.includes(\"isOk\") && keys.includes(\"isErr\")) {\n    return;\n  }\n  if (keys.includes(\"variant\") && keys.includes(\"activeVariant\")) {\n    return;\n  }\n  throw new Error(\n    `Validate Enum: argument ${input.name}, type ${input.type}, value received ${parameter}, is not an Enum.`\n  );\n};\nvar validateTuple = (parameter, input) => {\n  assert(\n    typeof parameter === \"object\" && !Array.isArray(parameter),\n    `Validate: arg ${input.name} should be a tuple (defined as object)`\n  );\n};\nvar validateArray = (parameter, input, structs, enums) => {\n  const baseType = getArrayType(input.type);\n  if (isTypeFelt(baseType) && isLongText(parameter)) {\n    return;\n  }\n  assert(Array.isArray(parameter), `Validate: arg ${input.name} should be an Array`);\n  switch (true) {\n    case isTypeFelt(baseType):\n      parameter.forEach((param) => validateFelt(param, input));\n      break;\n    case isTypeTuple(baseType):\n      parameter.forEach((it) => validateTuple(it, { name: input.name, type: baseType }));\n      break;\n    case isTypeArray(baseType):\n      parameter.forEach(\n        (param) => validateArray(param, { name: \"\", type: baseType }, structs, enums)\n      );\n      break;\n    case isTypeStruct(baseType, structs):\n      parameter.forEach(\n        (it) => validateStruct(it, { name: input.name, type: baseType }, structs)\n      );\n      break;\n    case isTypeEnum(baseType, enums):\n      parameter.forEach((it) => validateEnum(it, { name: input.name, type: baseType }));\n      break;\n    case (isTypeUint(baseType) || isTypeLitteral(baseType)):\n      parameter.forEach((param) => validateUint(param, input));\n      break;\n    case isTypeBool(baseType):\n      parameter.forEach((param) => validateBool(param, input));\n      break;\n    default:\n      throw new Error(\n        `Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`\n      );\n  }\n};\nfunction validateFields(abiMethod, args, structs, enums) {\n  abiMethod.inputs.reduce((acc, input) => {\n    const parameter = args[acc];\n    switch (true) {\n      case isLen(input.name):\n        return acc;\n      case isTypeFelt(input.type):\n        validateFelt(parameter, input);\n        break;\n      case (isTypeUint(input.type) || isTypeLitteral(input.type)):\n        validateUint(parameter, input);\n        break;\n      case isTypeBool(input.type):\n        validateBool(parameter, input);\n        break;\n      case isTypeArray(input.type):\n        validateArray(parameter, input, structs, enums);\n        break;\n      case isTypeStruct(input.type, structs):\n        validateStruct(parameter, input, structs);\n        break;\n      case isTypeEnum(input.type, enums):\n        validateEnum(parameter, input);\n        break;\n      case isTypeTuple(input.type):\n        validateTuple(parameter, input);\n        break;\n      default:\n        throw new Error(\n          `Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`\n        );\n    }\n    return acc + 1;\n  }, 0);\n}\n\n// src/utils/calldata/index.ts\nvar CallData = class {\n  constructor(abi) {\n    this.structs = CallData.getAbiStruct(abi);\n    this.enums = CallData.getAbiEnum(abi);\n    this.parser = createAbiParser(abi);\n    this.abi = this.parser.getLegacyFormat();\n  }\n  /**\n   * Validate arguments passed to the method as corresponding to the ones in the abi\n   * @param type ValidateType - type of the method\n   * @param method string - name of the method\n   * @param args ArgsOrCalldata - arguments that are passed to the method\n   */\n  validate(type, method, args = []) {\n    if (type !== \"DEPLOY\" /* DEPLOY */) {\n      const invocableFunctionNames = this.abi.filter((abi) => {\n        if (abi.type !== \"function\")\n          return false;\n        const isView = abi.stateMutability === \"view\" || abi.state_mutability === \"view\";\n        return type === \"INVOKE\" /* INVOKE */ ? !isView : isView;\n      }).map((abi) => abi.name);\n      assert(\n        invocableFunctionNames.includes(method),\n        `${type === \"INVOKE\" /* INVOKE */ ? \"invocable\" : \"viewable\"} method not found in abi`\n      );\n    }\n    const abiMethod = this.abi.find(\n      (abi) => type === \"DEPLOY\" /* DEPLOY */ ? abi.name === method && abi.type === \"constructor\" : abi.name === method && abi.type === \"function\"\n    );\n    if (isNoConstructorValid(method, args, abiMethod)) {\n      return;\n    }\n    const inputsLength = this.parser.methodInputsLength(abiMethod);\n    if (args.length !== inputsLength) {\n      throw Error(\n        `Invalid number of arguments, expected ${inputsLength} arguments, but got ${args.length}`\n      );\n    }\n    validateFields(abiMethod, args, this.structs, this.enums);\n  }\n  /**\n   * Compile contract callData with abi\n   * Parse the calldata by using input fields from the abi for that method\n   * @param method string - method name\n   * @param args RawArgs - arguments passed to the method. Can be an array of arguments (in the order of abi definition), or an object constructed in conformity with abi (in this case, the parameter can be in a wrong order).\n   * @return Calldata - parsed arguments in format that contract is expecting\n   * @example\n   * ```typescript\n   * const calldata = myCallData.compile(\"constructor\", [\"0x34a\", [1, 3n]]);\n   * ```\n   * ```typescript\n   * const calldata2 = myCallData.compile(\"constructor\", {list:[1, 3n], balance:\"0x34\"}); // wrong order is valid\n   * ```\n   */\n  compile(method, argsCalldata) {\n    const abiMethod = this.abi.find((abiFunction) => abiFunction.name === method);\n    if (isNoConstructorValid(method, argsCalldata, abiMethod)) {\n      return [];\n    }\n    let args;\n    if (Array.isArray(argsCalldata)) {\n      args = argsCalldata;\n    } else {\n      const orderedObject = orderPropsByAbi(\n        argsCalldata,\n        abiMethod.inputs,\n        this.structs,\n        this.enums\n      );\n      args = Object.values(orderedObject);\n      validateFields(abiMethod, args, this.structs, this.enums);\n    }\n    const argsIterator = args[Symbol.iterator]();\n    const callArray = abiMethod.inputs.reduce(\n      (acc, input) => isLen(input.name) && !isCairo1Type(input.type) ? acc : acc.concat(parseCalldataField(argsIterator, input, this.structs, this.enums)),\n      []\n    );\n    Object.defineProperty(callArray, \"__compiled__\", {\n      enumerable: false,\n      writable: false,\n      value: true\n    });\n    return callArray;\n  }\n  /**\n   * Compile contract callData without abi\n   * @param rawArgs RawArgs representing cairo method arguments or string array of compiled data\n   * @returns Calldata\n   */\n  static compile(rawArgs) {\n    const createTree = (obj) => {\n      const getEntries = (o, prefix = \".\") => {\n        const oe = Array.isArray(o) ? [o.length.toString(), ...o] : o;\n        return Object.entries(oe).flatMap(([k, v]) => {\n          let value = v;\n          if (k === \"entrypoint\")\n            value = getSelectorFromName(value);\n          else if (isLongText(value))\n            value = splitLongString(value);\n          const kk = Array.isArray(oe) && k === \"0\" ? \"$$len\" : k;\n          if (isBigInt(value))\n            return [[`${prefix}${kk}`, felt(value)]];\n          if (Object(value) === value) {\n            const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(value));\n            const keys = [...Object.getOwnPropertyNames(value), ...methodsKeys];\n            if (keys.includes(\"isSome\") && keys.includes(\"isNone\")) {\n              const myOption = value;\n              const variantNb = myOption.isSome() ? 0 /* Some */ : 1 /* None */;\n              if (myOption.isSome())\n                return getEntries({ 0: variantNb, 1: myOption.unwrap() }, `${prefix}${kk}.`);\n              return [[`${prefix}${kk}`, felt(variantNb)]];\n            }\n            if (keys.includes(\"isOk\") && keys.includes(\"isErr\")) {\n              const myResult = value;\n              const variantNb = myResult.isOk() ? 0 /* Ok */ : 1 /* Err */;\n              return getEntries({ 0: variantNb, 1: myResult.unwrap() }, `${prefix}${kk}.`);\n            }\n            if (keys.includes(\"variant\") && keys.includes(\"activeVariant\")) {\n              const myEnum = value;\n              const activeVariant = myEnum.activeVariant();\n              const listVariants = Object.keys(myEnum.variant);\n              const activeVariantNb = listVariants.findIndex(\n                (variant) => variant === activeVariant\n              );\n              if (typeof myEnum.unwrap() === \"object\" && Object.keys(myEnum.unwrap()).length === 0) {\n                return [[`${prefix}${kk}`, felt(activeVariantNb)]];\n              }\n              return getEntries({ 0: activeVariantNb, 1: myEnum.unwrap() }, `${prefix}${kk}.`);\n            }\n            return getEntries(value, `${prefix}${kk}.`);\n          }\n          return [[`${prefix}${kk}`, felt(value)]];\n        });\n      };\n      const result = Object.fromEntries(getEntries(obj));\n      return result;\n    };\n    let callTreeArray;\n    if (!Array.isArray(rawArgs)) {\n      const callTree = createTree(rawArgs);\n      callTreeArray = Object.values(callTree);\n    } else {\n      const callObj = { ...rawArgs };\n      const callTree = createTree(callObj);\n      callTreeArray = Object.values(callTree);\n    }\n    Object.defineProperty(callTreeArray, \"__compiled__\", {\n      enumerable: false,\n      writable: false,\n      value: true\n    });\n    return callTreeArray;\n  }\n  /**\n   * Parse elements of the response array and structuring them into response object\n   * @param method string - method name\n   * @param response string[] - response from the method\n   * @return Result - parsed response corresponding to the abi\n   */\n  parse(method, response) {\n    const { outputs } = this.abi.find((abi) => abi.name === method);\n    const responseIterator = response.flat()[Symbol.iterator]();\n    const parsed = outputs.flat().reduce((acc, output, idx) => {\n      const propName = output.name ?? idx;\n      acc[propName] = responseParser(responseIterator, output, this.structs, this.enums, acc);\n      if (acc[propName] && acc[`${propName}_len`]) {\n        delete acc[`${propName}_len`];\n      }\n      return acc;\n    }, {});\n    return Object.keys(parsed).length === 1 && 0 in parsed ? parsed[0] : parsed;\n  }\n  /**\n   * Format cairo method response data to native js values based on provided format schema\n   * @param method string - cairo method name\n   * @param response string[] - cairo method response\n   * @param format object - formatter object schema\n   * @returns Result - parsed and formatted response object\n   */\n  format(method, response, format) {\n    const parsed = this.parse(method, response);\n    return formatter(parsed, format);\n  }\n  /**\n   * Helper to extract structs from abi\n   * @param abi Abi\n   * @returns AbiStructs - structs from abi\n   */\n  static getAbiStruct(abi) {\n    return abi.filter((abiEntry) => abiEntry.type === \"struct\").reduce(\n      (acc, abiEntry) => ({\n        ...acc,\n        [abiEntry.name]: abiEntry\n      }),\n      {}\n    );\n  }\n  /**\n   * Helper to extract enums from abi\n   * @param abi Abi\n   * @returns AbiEnums - enums from abi\n   */\n  static getAbiEnum(abi) {\n    const fullEnumList = abi.filter((abiEntry) => abiEntry.type === \"enum\").reduce(\n      (acc, abiEntry) => ({\n        ...acc,\n        [abiEntry.name]: abiEntry\n      }),\n      {}\n    );\n    delete fullEnumList[\"core::bool\"];\n    return fullEnumList;\n  }\n  /**\n   * Helper: Compile HexCalldata | RawCalldata | RawArgs\n   * @param rawCalldata HexCalldata | RawCalldata | RawArgs\n   * @returns Calldata\n   */\n  static toCalldata(rawCalldata = []) {\n    return CallData.compile(rawCalldata);\n  }\n  /**\n   * Helper: Convert raw to HexCalldata\n   * @param raw HexCalldata | RawCalldata | RawArgs\n   * @returns HexCalldata\n   */\n  static toHex(raw = []) {\n    const calldata = CallData.compile(raw);\n    return calldata.map((it) => toHex(it));\n  }\n};\n\n// src/utils/hash.ts\nvar hash_exports = {};\n__export(hash_exports, {\n  calculateContractAddressFromHash: () => calculateContractAddressFromHash,\n  calculateDeclareTransactionHash: () => calculateDeclareTransactionHash,\n  calculateDeployAccountTransactionHash: () => calculateDeployAccountTransactionHash,\n  calculateDeployTransactionHash: () => calculateDeployTransactionHash,\n  calculateTransactionHash: () => calculateTransactionHash,\n  calculateTransactionHashCommon: () => calculateTransactionHashCommon,\n  computeCompiledClassHash: () => computeCompiledClassHash,\n  computeContractClassHash: () => computeContractClassHash,\n  computeHashOnElements: () => computeHashOnElements,\n  computeLegacyContractClassHash: () => computeLegacyContractClassHash,\n  computeSierraContractClassHash: () => computeSierraContractClassHash,\n  default: () => computeHintedClassHash,\n  feeTransactionVersion: () => feeTransactionVersion,\n  feeTransactionVersion_2: () => feeTransactionVersion_2,\n  formatSpaces: () => formatSpaces,\n  getSelector: () => getSelector,\n  getSelectorFromName: () => getSelectorFromName,\n  getVersionsByType: () => getVersionsByType,\n  keccakBn: () => keccakBn,\n  poseidon: () => _noble_curves_abstract_poseidon__WEBPACK_IMPORTED_MODULE_3__,\n  starknetKeccak: () => starknetKeccak,\n  transactionVersion: () => transactionVersion,\n  transactionVersion_2: () => transactionVersion_2\n});\n\n\n// src/utils/ec.ts\nvar ec_exports = {};\n__export(ec_exports, {\n  starkCurve: () => _scure_starknet__WEBPACK_IMPORTED_MODULE_2__,\n  weierstrass: () => _noble_curves_abstract_weierstrass__WEBPACK_IMPORTED_MODULE_4__\n});\n\n\n\n// src/utils/json.ts\nvar json_exports = {};\n__export(json_exports, {\n  parse: () => parse2,\n  parseAlwaysAsBig: () => parseAlwaysAsBig,\n  stringify: () => stringify2,\n  stringifyAlwaysAsBig: () => stringifyAlwaysAsBig\n});\n\nvar parseIntAsNumberOrBigInt = (x) => {\n  if (!lossless_json__WEBPACK_IMPORTED_MODULE_5__.isInteger(x))\n    return parseFloat(x);\n  const v = parseInt(x, 10);\n  return Number.isSafeInteger(v) ? v : BigInt(x);\n};\nvar parse2 = (x) => lossless_json__WEBPACK_IMPORTED_MODULE_5__.parse(String(x), void 0, parseIntAsNumberOrBigInt);\nvar parseAlwaysAsBig = (x) => lossless_json__WEBPACK_IMPORTED_MODULE_5__.parse(String(x), void 0, lossless_json__WEBPACK_IMPORTED_MODULE_5__.parseNumberAndBigInt);\nvar stringify2 = (value, replacer, space, numberStringifiers) => lossless_json__WEBPACK_IMPORTED_MODULE_5__.stringify(value, replacer, space, numberStringifiers);\nvar stringifyAlwaysAsBig = stringify2;\n\n// src/utils/hash.ts\n\nvar transactionVersion = BN_TRANSACTION_VERSION_1;\nvar transactionVersion_2 = BN_TRANSACTION_VERSION_2;\nvar feeTransactionVersion = BN_FEE_TRANSACTION_VERSION_1;\nvar feeTransactionVersion_2 = BN_FEE_TRANSACTION_VERSION_2;\nfunction getVersionsByType(versionType) {\n  return versionType === \"fee\" ? { v1: feeTransactionVersion, v2: feeTransactionVersion_2 } : { v1: transactionVersion, v2: transactionVersion_2 };\n}\nfunction computeHashOnElements(data) {\n  return [...data, data.length].reduce((x, y) => _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.pedersen(toBigInt(x), toBigInt(y)), 0).toString();\n}\nfunction calculateTransactionHashCommon(txHashPrefix, version, contractAddress, entryPointSelector, calldata, maxFee, chainId, additionalData = []) {\n  const calldataHash = computeHashOnElements(calldata);\n  const dataToHash = [\n    txHashPrefix,\n    version,\n    contractAddress,\n    entryPointSelector,\n    calldataHash,\n    maxFee,\n    chainId,\n    ...additionalData\n  ];\n  return computeHashOnElements(dataToHash);\n}\nfunction calculateDeployTransactionHash(contractAddress, constructorCalldata, version, chainId, constructorName = \"constructor\") {\n  return calculateTransactionHashCommon(\n    \"0x6465706c6f79\" /* DEPLOY */,\n    version,\n    contractAddress,\n    getSelectorFromName(constructorName),\n    constructorCalldata,\n    0,\n    chainId\n  );\n}\nfunction calculateDeclareTransactionHash(classHash, senderAddress, version, maxFee, chainId, nonce, compiledClassHash) {\n  return calculateTransactionHashCommon(\n    \"0x6465636c617265\" /* DECLARE */,\n    version,\n    senderAddress,\n    0,\n    [classHash],\n    maxFee,\n    chainId,\n    [nonce, ...compiledClassHash ? [compiledClassHash] : []]\n  );\n}\nfunction calculateDeployAccountTransactionHash(contractAddress, classHash, constructorCalldata, salt, version, maxFee, chainId, nonce) {\n  const calldata = [classHash, salt, ...constructorCalldata];\n  return calculateTransactionHashCommon(\n    \"0x6465706c6f795f6163636f756e74\" /* DEPLOY_ACCOUNT */,\n    version,\n    contractAddress,\n    0,\n    calldata,\n    maxFee,\n    chainId,\n    [nonce]\n  );\n}\nfunction calculateTransactionHash(contractAddress, version, calldata, maxFee, chainId, nonce) {\n  return calculateTransactionHashCommon(\n    \"0x696e766f6b65\" /* INVOKE */,\n    version,\n    contractAddress,\n    0,\n    calldata,\n    maxFee,\n    chainId,\n    [nonce]\n  );\n}\nfunction calculateContractAddressFromHash(salt, classHash, constructorCalldata, deployerAddress) {\n  const compiledCalldata = CallData.compile(constructorCalldata);\n  const constructorCalldataHash = computeHashOnElements(compiledCalldata);\n  const CONTRACT_ADDRESS_PREFIX = felt(\"0x535441524b4e45545f434f4e54524143545f41444452455353\");\n  const hash = computeHashOnElements([\n    CONTRACT_ADDRESS_PREFIX,\n    deployerAddress,\n    salt,\n    classHash,\n    constructorCalldataHash\n  ]);\n  return toHex(BigInt(hash) % ADDR_BOUND);\n}\nfunction nullSkipReplacer(key, value) {\n  if (key === \"attributes\" || key === \"accessible_scopes\") {\n    return Array.isArray(value) && value.length === 0 ? void 0 : value;\n  }\n  if (key === \"debug_info\") {\n    return null;\n  }\n  return value === null ? void 0 : value;\n}\nfunction formatSpaces(json2) {\n  let insideQuotes = false;\n  const newString = [];\n  for (const char of json2) {\n    if (char === '\"' && (newString.length > 0 && newString.slice(-1)[0] === \"\\\\\") === false) {\n      insideQuotes = !insideQuotes;\n    }\n    if (insideQuotes) {\n      newString.push(char);\n    } else {\n      newString.push(char === \":\" ? \": \" : char === \",\" ? \", \" : char);\n    }\n  }\n  return newString.join(\"\");\n}\nfunction computeHintedClassHash(compiledContract) {\n  const { abi, program } = compiledContract;\n  const contractClass = { abi, program };\n  const serializedJson = formatSpaces(stringify2(contractClass, nullSkipReplacer));\n  return addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak(utf8ToArray(serializedJson)).toString(16));\n}\nfunction computeLegacyContractClassHash(contract) {\n  const compiledContract = typeof contract === \"string\" ? parse2(contract) : contract;\n  const apiVersion = toHex(API_VERSION);\n  const externalEntryPointsHash = computeHashOnElements(\n    compiledContract.entry_points_by_type.EXTERNAL.flatMap((e) => [e.selector, e.offset])\n  );\n  const l1HandlerEntryPointsHash = computeHashOnElements(\n    compiledContract.entry_points_by_type.L1_HANDLER.flatMap((e) => [e.selector, e.offset])\n  );\n  const constructorEntryPointHash = computeHashOnElements(\n    compiledContract.entry_points_by_type.CONSTRUCTOR.flatMap((e) => [e.selector, e.offset])\n  );\n  const builtinsHash = computeHashOnElements(\n    compiledContract.program.builtins.map((s) => encodeShortString(s))\n  );\n  const hintedClassHash = computeHintedClassHash(compiledContract);\n  const dataHash = computeHashOnElements(compiledContract.program.data);\n  return computeHashOnElements([\n    apiVersion,\n    externalEntryPointsHash,\n    l1HandlerEntryPointsHash,\n    constructorEntryPointHash,\n    builtinsHash,\n    hintedClassHash,\n    dataHash\n  ]);\n}\nfunction hashBuiltins(builtins) {\n  return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(\n    builtins.flatMap((it) => {\n      return BigInt(encodeShortString(it));\n    })\n  );\n}\nfunction hashEntryPoint(data) {\n  const base = data.flatMap((it) => {\n    return [BigInt(it.selector), BigInt(it.offset), hashBuiltins(it.builtins)];\n  });\n  return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(base);\n}\nfunction computeCompiledClassHash(casm) {\n  const COMPILED_CLASS_VERSION = \"COMPILED_CLASS_V1\";\n  const compiledClassVersion = BigInt(encodeShortString(COMPILED_CLASS_VERSION));\n  const externalEntryPointsHash = hashEntryPoint(casm.entry_points_by_type.EXTERNAL);\n  const l1Handlers = hashEntryPoint(casm.entry_points_by_type.L1_HANDLER);\n  const constructor = hashEntryPoint(casm.entry_points_by_type.CONSTRUCTOR);\n  const bytecode = (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(casm.bytecode.map((it) => BigInt(it)));\n  return toHex(\n    (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)([\n      compiledClassVersion,\n      externalEntryPointsHash,\n      l1Handlers,\n      constructor,\n      bytecode\n    ])\n  );\n}\nfunction hashEntryPointSierra(data) {\n  const base = data.flatMap((it) => {\n    return [BigInt(it.selector), BigInt(it.function_idx)];\n  });\n  return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(base);\n}\nfunction hashAbi(sierra) {\n  const indentString = formatSpaces(stringify2(sierra.abi, null));\n  return BigInt(addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak(utf8ToArray(indentString)).toString(16)));\n}\nfunction computeSierraContractClassHash(sierra) {\n  const CONTRACT_CLASS_VERSION = \"CONTRACT_CLASS_V0.1.0\";\n  const compiledClassVersion = BigInt(encodeShortString(CONTRACT_CLASS_VERSION));\n  const externalEntryPointsHash = hashEntryPointSierra(sierra.entry_points_by_type.EXTERNAL);\n  const l1Handlers = hashEntryPointSierra(sierra.entry_points_by_type.L1_HANDLER);\n  const constructor = hashEntryPointSierra(sierra.entry_points_by_type.CONSTRUCTOR);\n  const abiHash = hashAbi(sierra);\n  const sierraProgram = (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)(sierra.sierra_program.map((it) => BigInt(it)));\n  return toHex(\n    (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.poseidonHashMany)([\n      compiledClassVersion,\n      externalEntryPointsHash,\n      l1Handlers,\n      constructor,\n      abiHash,\n      sierraProgram\n    ])\n  );\n}\nfunction computeContractClassHash(contract) {\n  const compiledContract = typeof contract === \"string\" ? parse2(contract) : contract;\n  if (\"sierra_program\" in compiledContract) {\n    return computeSierraContractClassHash(compiledContract);\n  }\n  return computeLegacyContractClassHash(compiledContract);\n}\n\n// src/utils/stark.ts\nvar stark_exports = {};\n__export(stark_exports, {\n  compressProgram: () => compressProgram,\n  decompressProgram: () => decompressProgram,\n  estimatedFeeToMaxFee: () => estimatedFeeToMaxFee,\n  formatSignature: () => formatSignature,\n  makeAddress: () => makeAddress,\n  randomAddress: () => randomAddress,\n  signatureToDecimalArray: () => signatureToDecimalArray,\n  signatureToHexArray: () => signatureToHexArray\n});\n\n\nfunction compressProgram(jsonProgram) {\n  const stringified = typeof jsonProgram === \"string\" ? jsonProgram : stringify2(jsonProgram);\n  const compressedProgram = (0,pako__WEBPACK_IMPORTED_MODULE_6__.gzip)(stringified);\n  return btoaUniversal(compressedProgram);\n}\nfunction decompressProgram(base642) {\n  if (Array.isArray(base642))\n    return base642;\n  const decompressed = arrayBufferToString((0,pako__WEBPACK_IMPORTED_MODULE_6__.ungzip)(atobUniversal(base642)));\n  return parse2(decompressed);\n}\nfunction randomAddress() {\n  const randomKeyPair = _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.utils.randomPrivateKey();\n  return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.getStarkKey)(randomKeyPair);\n}\nfunction makeAddress(input) {\n  return addHexPrefix(input).toLowerCase();\n}\nfunction formatSignature(sig) {\n  if (!sig)\n    throw Error(\"formatSignature: provided signature is undefined\");\n  if (Array.isArray(sig)) {\n    return sig.map((it) => toHex(it));\n  }\n  try {\n    const { r, s } = sig;\n    return [toHex(r), toHex(s)];\n  } catch (e) {\n    throw new Error(\"Signature need to be weierstrass.SignatureType or an array for custom\");\n  }\n}\nfunction signatureToDecimalArray(sig) {\n  return bigNumberishArrayToDecimalStringArray(formatSignature(sig));\n}\nfunction signatureToHexArray(sig) {\n  return bigNumberishArrayToHexadecimalStringArray(formatSignature(sig));\n}\nfunction estimatedFeeToMaxFee(estimatedFee, overhead = 0.5) {\n  const overHeadPercent = Math.round((1 + overhead) * 100);\n  return toBigInt(estimatedFee) * toBigInt(overHeadPercent) / 100n;\n}\n\n// src/utils/contract.ts\nfunction isSierra(contract) {\n  const compiledContract = typeof contract === \"string\" ? parse2(contract) : contract;\n  return \"sierra_program\" in compiledContract;\n}\nfunction extractContractHashes(payload) {\n  const response = { ...payload };\n  if (isSierra(payload.contract)) {\n    if (!payload.compiledClassHash && payload.casm) {\n      response.compiledClassHash = computeCompiledClassHash(payload.casm);\n    }\n    if (!response.compiledClassHash)\n      throw new Error(\n        \"Extract compiledClassHash failed, provide (CairoAssembly).casm file or compiledClassHash\"\n      );\n  }\n  response.classHash = payload.classHash ?? computeContractClassHash(payload.contract);\n  if (!response.classHash)\n    throw new Error(\"Extract classHash failed, provide (CompiledContract).json file or classHash\");\n  return response;\n}\nfunction contractClassResponseToLegacyCompiledContract(ccr) {\n  if (isSierra(ccr)) {\n    throw Error(\"ContractClassResponse need to be LegacyContractClass (cairo0 response class)\");\n  }\n  const contract = ccr;\n  return { ...contract, program: decompressProgram(contract.program) };\n}\n\n// src/utils/fetchPonyfill.ts\n\nvar fetchPonyfill_default = typeof window !== \"undefined\" && window.fetch || // use buildin fetch in browser if available\ntypeof global !== \"undefined\" && global.fetch || // use buildin fetch in node, react-native and service worker if available\nisomorphic_fetch__WEBPACK_IMPORTED_MODULE_7__;\n\n// src/utils/provider.ts\nvar provider_exports = {};\n__export(provider_exports, {\n  createSierraContractClass: () => createSierraContractClass,\n  parseContract: () => parseContract,\n  wait: () => wait\n});\nfunction wait(delay) {\n  return new Promise((res) => {\n    setTimeout(res, delay);\n  });\n}\nfunction createSierraContractClass(contract) {\n  const result = { ...contract };\n  delete result.sierra_program_debug_info;\n  result.abi = formatSpaces(stringify2(contract.abi));\n  result.sierra_program = formatSpaces(stringify2(contract.sierra_program));\n  result.sierra_program = compressProgram(result.sierra_program);\n  return result;\n}\nfunction parseContract(contract) {\n  const parsedContract = typeof contract === \"string\" ? parse2(contract) : contract;\n  if (!isSierra(contract)) {\n    return {\n      ...parsedContract,\n      ...\"program\" in parsedContract && { program: compressProgram(parsedContract.program) }\n    };\n  }\n  return createSierraContractClass(parsedContract);\n}\n\n// src/utils/responseParser/rpc.ts\nvar RPCResponseParser = class {\n  parseGetBlockResponse(res) {\n    return {\n      timestamp: res.timestamp,\n      block_hash: \"block_hash\" in res ? res.block_hash : \"\",\n      block_number: \"block_number\" in res ? res.block_number : -1,\n      new_root: \"new_root\" in res ? res.new_root : \"\",\n      parent_hash: res.parent_hash,\n      status: \"status\" in res ? res.status : \"PENDING\" /* PENDING */,\n      transactions: res.transactions\n    };\n  }\n  parseGetTransactionResponse(res) {\n    return {\n      calldata: \"calldata\" in res ? res.calldata : [],\n      contract_address: \"contract_address\" in res ? res.contract_address : \"\",\n      sender_address: \"sender_address\" in res ? res.sender_address : \"\",\n      max_fee: \"max_fee\" in res ? res.max_fee : \"\",\n      nonce: \"nonce\" in res ? res.nonce : \"\",\n      signature: \"signature\" in res ? res.signature : [],\n      transaction_hash: res.transaction_hash,\n      version: res.version\n    };\n  }\n  parseFeeEstimateResponse(res) {\n    return {\n      overall_fee: toBigInt(res[0].overall_fee),\n      gas_consumed: toBigInt(res[0].gas_consumed),\n      gas_price: toBigInt(res[0].gas_price)\n    };\n  }\n  parseFeeEstimateBulkResponse(res) {\n    return res.map((val) => ({\n      overall_fee: toBigInt(val.overall_fee),\n      gas_consumed: toBigInt(val.gas_consumed),\n      gas_price: toBigInt(val.gas_price)\n    }));\n  }\n  parseCallContractResponse(res) {\n    return {\n      result: res\n    };\n  }\n  parseSimulateTransactionResponse(res) {\n    return res.map((it) => {\n      return {\n        ...it,\n        suggestedMaxFee: estimatedFeeToMaxFee(BigInt(it.fee_estimation.overall_fee))\n      };\n    });\n  }\n  parseContractClassResponse(res) {\n    return {\n      ...res,\n      abi: typeof res.abi === \"string\" ? JSON.parse(res.abi) : res.abi\n    };\n  }\n};\n\n// src/provider/errors.ts\nfunction fixStack(target, fn = target.constructor) {\n  const { captureStackTrace } = Error;\n  captureStackTrace && captureStackTrace(target, fn);\n}\nfunction fixProto(target, prototype) {\n  const { setPrototypeOf } = Object;\n  setPrototypeOf ? setPrototypeOf(target, prototype) : target.__proto__ = prototype;\n}\nvar CustomError = class extends Error {\n  constructor(message) {\n    super(message);\n    Object.defineProperty(this, \"name\", {\n      value: new.target.name,\n      enumerable: false,\n      configurable: true\n    });\n    fixProto(this, new.target.prototype);\n    fixStack(this);\n  }\n};\nvar LibraryError = class extends CustomError {\n};\nvar GatewayError = class extends LibraryError {\n  constructor(message, errorCode) {\n    super(message);\n    this.errorCode = errorCode;\n  }\n};\nvar HttpError = class extends LibraryError {\n  constructor(message, errorCode) {\n    super(message);\n    this.errorCode = errorCode;\n  }\n};\n\n// src/utils/starknetId.ts\nvar starknetId_exports = {};\n__export(starknetId_exports, {\n  StarknetIdContract: () => StarknetIdContract,\n  getStarknetIdContract: () => getStarknetIdContract,\n  useDecoded: () => useDecoded,\n  useEncoded: () => useEncoded\n});\nvar basicAlphabet = \"abcdefghijklmnopqrstuvwxyz0123456789-\";\nvar basicSizePlusOne = BigInt(basicAlphabet.length + 1);\nvar bigAlphabet = \"\\u8FD9\\u6765\";\nvar basicAlphabetSize = BigInt(basicAlphabet.length);\nvar bigAlphabetSize = BigInt(bigAlphabet.length);\nvar bigAlphabetSizePlusOne = BigInt(bigAlphabet.length + 1);\nfunction extractStars(str) {\n  let k = 0;\n  while (str.endsWith(bigAlphabet[bigAlphabet.length - 1])) {\n    str = str.substring(0, str.length - 1);\n    k += 1;\n  }\n  return [str, k];\n}\nfunction useDecoded(encoded) {\n  let decoded = \"\";\n  encoded.forEach((subdomain) => {\n    while (subdomain !== ZERO) {\n      const code = subdomain % basicSizePlusOne;\n      subdomain /= basicSizePlusOne;\n      if (code === BigInt(basicAlphabet.length)) {\n        const nextSubdomain = subdomain / bigAlphabetSizePlusOne;\n        if (nextSubdomain === ZERO) {\n          const code2 = subdomain % bigAlphabetSizePlusOne;\n          subdomain = nextSubdomain;\n          if (code2 === ZERO)\n            decoded += basicAlphabet[0];\n          else\n            decoded += bigAlphabet[Number(code2) - 1];\n        } else {\n          const code2 = subdomain % bigAlphabetSize;\n          decoded += bigAlphabet[Number(code2)];\n          subdomain /= bigAlphabetSize;\n        }\n      } else\n        decoded += basicAlphabet[Number(code)];\n    }\n    const [str, k] = extractStars(decoded);\n    if (k)\n      decoded = str + (k % 2 === 0 ? bigAlphabet[bigAlphabet.length - 1].repeat(k / 2 - 1) + bigAlphabet[0] + basicAlphabet[1] : bigAlphabet[bigAlphabet.length - 1].repeat((k - 1) / 2 + 1));\n    decoded += \".\";\n  });\n  if (!decoded) {\n    return decoded;\n  }\n  return decoded.concat(\"stark\");\n}\nfunction useEncoded(decoded) {\n  let encoded = BigInt(0);\n  let multiplier = BigInt(1);\n  if (decoded.endsWith(bigAlphabet[0] + basicAlphabet[1])) {\n    const [str, k] = extractStars(decoded.substring(0, decoded.length - 2));\n    decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(2 * (k + 1));\n  } else {\n    const [str, k] = extractStars(decoded);\n    if (k)\n      decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(1 + 2 * (k - 1));\n  }\n  for (let i = 0; i < decoded.length; i += 1) {\n    const char = decoded[i];\n    const index = basicAlphabet.indexOf(char);\n    const bnIndex = BigInt(basicAlphabet.indexOf(char));\n    if (index !== -1) {\n      if (i === decoded.length - 1 && decoded[i] === basicAlphabet[0]) {\n        encoded += multiplier * basicAlphabetSize;\n        multiplier *= basicSizePlusOne;\n        multiplier *= basicSizePlusOne;\n      } else {\n        encoded += multiplier * bnIndex;\n        multiplier *= basicSizePlusOne;\n      }\n    } else if (bigAlphabet.indexOf(char) !== -1) {\n      encoded += multiplier * basicAlphabetSize;\n      multiplier *= basicSizePlusOne;\n      const newid = (i === decoded.length - 1 ? 1 : 0) + bigAlphabet.indexOf(char);\n      encoded += multiplier * BigInt(newid);\n      multiplier *= bigAlphabetSize;\n    }\n  }\n  return encoded;\n}\nvar StarknetIdContract = /* @__PURE__ */ ((StarknetIdContract2) => {\n  StarknetIdContract2[\"MAINNET\"] = \"0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678\";\n  StarknetIdContract2[\"TESTNET\"] = \"0x3bab268e932d2cecd1946f100ae67ce3dff9fd234119ea2f6da57d16d29fce\";\n  return StarknetIdContract2;\n})(StarknetIdContract || {});\nfunction getStarknetIdContract(chainId) {\n  switch (chainId) {\n    case \"0x534e5f4d41494e\" /* SN_MAIN */:\n      return \"0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678\" /* MAINNET */;\n    case \"0x534e5f474f45524c49\" /* SN_GOERLI */:\n      return \"0x3bab268e932d2cecd1946f100ae67ce3dff9fd234119ea2f6da57d16d29fce\" /* TESTNET */;\n    default:\n      throw new Error(\"Starknet.id is not yet deployed on this network\");\n  }\n}\n\n// src/provider/starknetId.ts\nasync function getStarkName(provider, address, StarknetIdContract2) {\n  const chainId = await provider.getChainId();\n  const contract = StarknetIdContract2 ?? getStarknetIdContract(chainId);\n  try {\n    const hexDomain = await provider.callContract({\n      contractAddress: contract,\n      entrypoint: \"address_to_domain\",\n      calldata: CallData.compile({\n        address\n      })\n    });\n    const decimalDomain = hexDomain.result.map((element) => BigInt(element)).slice(1);\n    const stringDomain = useDecoded(decimalDomain);\n    if (!stringDomain) {\n      throw Error(\"Starkname not found\");\n    }\n    return stringDomain;\n  } catch (e) {\n    if (e instanceof Error && e.message === \"Starkname not found\") {\n      throw e;\n    }\n    throw Error(\"Could not get stark name\");\n  }\n}\nasync function getAddressFromStarkName(provider, name, StarknetIdContract2) {\n  const chainId = await provider.getChainId();\n  const contract = StarknetIdContract2 ?? getStarknetIdContract(chainId);\n  try {\n    const addressData = await provider.callContract({\n      contractAddress: contract,\n      entrypoint: \"domain_to_address\",\n      calldata: CallData.compile({\n        domain: [useEncoded(name.replace(\".stark\", \"\")).toString(10)]\n      })\n    });\n    return addressData.result[0];\n  } catch {\n    throw Error(\"Could not get address from stark name\");\n  }\n}\n\n// src/provider/utils.ts\nvar validBlockTags = Object.values(BlockTag);\nvar Block = class {\n  constructor(_identifier) {\n    this.hash = null;\n    this.number = null;\n    this.tag = null;\n    this.valueOf = () => this.number;\n    this.toString = () => this.hash;\n    this.setIdentifier(_identifier);\n  }\n  setIdentifier(__identifier) {\n    if (typeof __identifier === \"string\" && isHex(__identifier)) {\n      this.hash = __identifier;\n    } else if (typeof __identifier === \"bigint\") {\n      this.hash = toHex(__identifier);\n    } else if (typeof __identifier === \"number\") {\n      this.number = __identifier;\n    } else if (typeof __identifier === \"string\" && validBlockTags.includes(__identifier)) {\n      this.tag = __identifier;\n    } else {\n      this.tag = \"pending\" /* pending */;\n    }\n  }\n  // TODO: fix any\n  get queryIdentifier() {\n    if (this.number !== null) {\n      return `blockNumber=${this.number}`;\n    }\n    if (this.hash !== null) {\n      return `blockHash=${this.hash}`;\n    }\n    return `blockNumber=${this.tag}`;\n  }\n  // TODO: fix any\n  get identifier() {\n    if (this.number !== null) {\n      return { block_number: this.number };\n    }\n    if (this.hash !== null) {\n      return { block_hash: this.hash };\n    }\n    return this.tag;\n  }\n  set identifier(_identifier) {\n    this.setIdentifier(_identifier);\n  }\n  get sequencerIdentifier() {\n    return this.hash !== null ? { blockHash: this.hash } : { blockNumber: this.number ?? this.tag };\n  }\n};\n\n// src/provider/rpc.ts\nvar getDefaultNodeUrl = (networkName, mute = false, version = RPC_DEFAULT_VERSION) => {\n  if (!mute)\n    console.warn(\"Using default public node url, please provide nodeUrl in provider options!\");\n  const nodes = RPC_NODES[networkName ?? \"SN_GOERLI\" /* SN_GOERLI */];\n  const randIdx = Math.floor(Math.random() * nodes.length);\n  return `${nodes[randIdx]}${version}`;\n};\nvar defaultOptions = {\n  headers: { \"Content-Type\": \"application/json\" },\n  blockIdentifier: \"pending\" /* pending */,\n  retries: 200\n};\nvar RpcProvider = class {\n  constructor(optionsOrProvider) {\n    this.responseParser = new RPCResponseParser();\n    /**\n     * @deprecated renamed to getBlockLatestAccepted(); (will be removed in next minor version)\n     */\n    this.getBlockHashAndNumber = this.getBlockLatestAccepted;\n    /**\n     * @deprecated renamed to getBlockStateUpdate();\n     */\n    this.getStateUpdate = this.getBlockStateUpdate;\n    /**\n     * Returns the execution traces of all transactions included in the given block\n     * @deprecated renamed to getBlockTransactionsTraces()\n     */\n    this.traceBlockTransactions = this.getBlockTransactionsTraces;\n    /**\n     * Get the number of transactions in a block given a block id\n     * @deprecated renamed to getBlockTransactionCount()\n     * @returns Number of transactions\n     */\n    this.getTransactionCount = this.getBlockTransactionCount;\n    /**\n     * @deprecated renamed to getTransactionTrace();\n     * For a given executed transaction, return the trace of its execution, including internal calls\n     */\n    this.traceTransaction = this.getTransactionTrace;\n    /**\n     * @deprecated renamed to simulateTransaction();\n     */\n    this.getSimulateTransaction = this.simulateTransaction;\n    const { nodeUrl, retries, headers, blockIdentifier, chainId, rpcVersion } = optionsOrProvider || {};\n    if (Object.values(NetworkName).includes(nodeUrl)) {\n      this.nodeUrl = getDefaultNodeUrl(\n        nodeUrl,\n        optionsOrProvider?.default,\n        rpcVersion\n      );\n    } else if (nodeUrl) {\n      this.nodeUrl = nodeUrl;\n    } else {\n      this.nodeUrl = getDefaultNodeUrl(void 0, optionsOrProvider?.default, rpcVersion);\n    }\n    this.retries = retries || defaultOptions.retries;\n    this.headers = { ...defaultOptions.headers, ...headers };\n    this.blockIdentifier = blockIdentifier || defaultOptions.blockIdentifier;\n    this.chainId = chainId;\n  }\n  fetch(method, params, id = 0) {\n    const rpcRequestBody = {\n      id,\n      jsonrpc: \"2.0\",\n      method,\n      ...params && { params }\n    };\n    return fetchPonyfill_default(this.nodeUrl, {\n      method: \"POST\",\n      body: stringify2(rpcRequestBody),\n      headers: this.headers\n    });\n  }\n  errorHandler(method, params, rpcError, otherError) {\n    if (rpcError) {\n      const { code, message, data } = rpcError;\n      throw new LibraryError(\n        `RPC: ${method} with params ${stringify2(params)}\n ${code}: ${message}: ${stringify2(data)}`\n      );\n    }\n    if (otherError instanceof LibraryError) {\n      throw otherError;\n    }\n    if (otherError) {\n      throw Error(otherError.message);\n    }\n  }\n  async fetchEndpoint(method, params) {\n    try {\n      const rawResult = await this.fetch(method, params);\n      const { error, result } = await rawResult.json();\n      this.errorHandler(method, params, error);\n      return result;\n    } catch (error) {\n      this.errorHandler(method, params, error?.response?.data, error);\n      throw error;\n    }\n  }\n  async getChainId() {\n    this.chainId ?? (this.chainId = await this.fetchEndpoint(\"starknet_chainId\"));\n    return this.chainId;\n  }\n  /**\n   * NEW: Returns the version of the Starknet JSON-RPC specification being used\n   */\n  async getSpecVersion() {\n    return this.fetchEndpoint(\"starknet_specVersion\");\n  }\n  async getNonceForAddress(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getNonce\", {\n      contract_address,\n      block_id\n    });\n  }\n  /**\n   * @deprecated use getBlockWithTxHashes or getBlockWithTxs (will be removed on sequencer deprecation)\n   */\n  async getBlock(blockIdentifier = this.blockIdentifier) {\n    return this.getBlockWithTxHashes(blockIdentifier).then(\n      this.responseParser.parseGetBlockResponse\n    );\n  }\n  /**\n   * Get the most recent accepted block hash and number\n   */\n  async getBlockLatestAccepted() {\n    return this.fetchEndpoint(\"starknet_blockHashAndNumber\");\n  }\n  /**\n   * @deprecated redundant use getBlockLatestAccepted();\n   * Get the most recent accepted block number\n   * @returns Number of the latest block\n   */\n  async getBlockNumber() {\n    return this.fetchEndpoint(\"starknet_blockNumber\");\n  }\n  async getBlockWithTxHashes(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockWithTxHashes\", { block_id });\n  }\n  async getBlockWithTxs(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockWithTxs\", { block_id });\n  }\n  async getBlockStateUpdate(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getStateUpdate\", { block_id });\n  }\n  async getBlockTransactionsTraces(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_traceBlockTransactions\", { block_id });\n  }\n  async getBlockTransactionCount(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockTransactionCount\", { block_id });\n  }\n  /**\n   * Return transactions from pending block\n   * @deprecated Instead use getBlock(BlockTag.pending); (will be removed in next minor version)\n   */\n  async getPendingTransactions() {\n    const { transactions } = await this.getBlock(\"pending\" /* pending */);\n    return Promise.all(transactions.map((it) => this.getTransactionByHash(it)));\n  }\n  /**\n   * @deprecated use getTransactionByHash or getTransactionByBlockIdAndIndex (will be removed on sequencer deprecation)\n   */\n  async getTransaction(txHash) {\n    return this.getTransactionByHash(txHash).then(this.responseParser.parseGetTransactionResponse);\n  }\n  async getTransactionByHash(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_getTransactionByHash\", {\n      transaction_hash\n    });\n  }\n  async getTransactionByBlockIdAndIndex(blockIdentifier, index) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getTransactionByBlockIdAndIndex\", { block_id, index });\n  }\n  async getTransactionReceipt(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_getTransactionReceipt\", { transaction_hash });\n  }\n  async getTransactionTrace(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_traceTransaction\", { transaction_hash });\n  }\n  /**\n   * NEW: Get the status of a transaction\n   */\n  async getTransactionStatus(transactionHash) {\n    const transaction_hash = toHex(transactionHash);\n    return this.fetchEndpoint(\"starknet_getTransactionStatus\", { transaction_hash });\n  }\n  /**\n   * @param invocations AccountInvocations\n   * @param simulateTransactionOptions blockIdentifier and flags to skip validation and fee charge<br/>\n   * - blockIdentifier<br/>\n   * - skipValidate (default false)<br/>\n   * - skipFeeCharge (default true)<br/>\n   */\n  async simulateTransaction(invocations, {\n    blockIdentifier = this.blockIdentifier,\n    skipValidate = false,\n    skipFeeCharge = true\n  }) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const simulationFlags = [];\n    if (skipValidate)\n      simulationFlags.push(rpc_exports.ESimulationFlag.SKIP_VALIDATE);\n    if (skipFeeCharge)\n      simulationFlags.push(rpc_exports.ESimulationFlag.SKIP_FEE_CHARGE);\n    return this.fetchEndpoint(\"starknet_simulateTransactions\", {\n      block_id,\n      transactions: invocations.map((it) => this.buildTransaction(it)),\n      simulation_flags: simulationFlags\n    }).then(this.responseParser.parseSimulateTransactionResponse);\n  }\n  async waitForTransaction(txHash, options) {\n    const transactionHash = toHex(txHash);\n    let { retries } = this;\n    let onchain = false;\n    let isErrorState = false;\n    const retryInterval = options?.retryInterval ?? 5e3;\n    const errorStates = options?.errorStates ?? [\n      rpc_exports.ETransactionStatus.REJECTED\n      // TODO: commented out to preserve the long-standing behavior of \"reverted\" not being treated as an error by default\n      // should decide which behavior to keep in the future\n      // RPC.ETransactionExecutionStatus.REVERTED,\n    ];\n    const successStates = options?.successStates ?? [\n      rpc_exports.ETransactionExecutionStatus.SUCCEEDED,\n      rpc_exports.ETransactionStatus.ACCEPTED_ON_L2,\n      rpc_exports.ETransactionStatus.ACCEPTED_ON_L1\n    ];\n    let txStatus;\n    while (!onchain) {\n      await wait(retryInterval);\n      try {\n        txStatus = await this.getTransactionStatus(transactionHash);\n        const executionStatus = txStatus.execution_status;\n        const finalityStatus = txStatus.finality_status;\n        if (!finalityStatus) {\n          const error = new Error(\"waiting for transaction status\");\n          throw error;\n        }\n        if (errorStates.includes(executionStatus) || errorStates.includes(finalityStatus)) {\n          const message = `${executionStatus}: ${finalityStatus}`;\n          const error = new Error(message);\n          error.response = txStatus;\n          isErrorState = true;\n          throw error;\n        } else if (successStates.includes(executionStatus) || successStates.includes(finalityStatus)) {\n          onchain = true;\n        }\n      } catch (error) {\n        if (error instanceof Error && isErrorState) {\n          throw error;\n        }\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n      retries -= 1;\n    }\n    let txReceipt = null;\n    while (txReceipt === null) {\n      try {\n        txReceipt = await this.getTransactionReceipt(transactionHash);\n      } catch (error) {\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n      retries -= 1;\n      await wait(retryInterval);\n    }\n    return txReceipt;\n  }\n  async getStorageAt(contractAddress, key, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const parsedKey = toStorageKey(key);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getStorageAt\", {\n      contract_address,\n      key: parsedKey,\n      block_id\n    });\n  }\n  async getClassHashAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClassHashAt\", {\n      block_id,\n      contract_address\n    });\n  }\n  async getClassByHash(classHash) {\n    return this.getClass(classHash);\n  }\n  async getClass(classHash, blockIdentifier = this.blockIdentifier) {\n    const class_hash = toHex(classHash);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClass\", {\n      class_hash,\n      block_id\n    }).then(this.responseParser.parseContractClassResponse);\n  }\n  async getClassAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClassAt\", {\n      block_id,\n      contract_address\n    }).then(this.responseParser.parseContractClassResponse);\n  }\n  async getCode(_contractAddress, _blockIdentifier) {\n    throw new Error(\"RPC does not implement getCode function\");\n  }\n  async getContractVersion(contractAddress, classHash, { blockIdentifier = this.blockIdentifier, compiler = true } = {}) {\n    let contractClass;\n    if (contractAddress) {\n      contractClass = await this.getClassAt(contractAddress, blockIdentifier);\n    } else if (classHash) {\n      contractClass = await this.getClass(classHash, blockIdentifier);\n    } else {\n      throw Error(\"getContractVersion require contractAddress or classHash\");\n    }\n    if (isSierra(contractClass)) {\n      if (compiler) {\n        const abiTest = getAbiContractVersion(contractClass.abi);\n        return { cairo: \"1\", compiler: abiTest.compiler };\n      }\n      return { cairo: \"1\", compiler: void 0 };\n    }\n    return { cairo: \"0\", compiler: \"0\" };\n  }\n  /**\n   * @deprecated use get*type*EstimateFee (will be refactored based on type after sequencer deprecation)\n   */\n  async getEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier) {\n    return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier);\n  }\n  async getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction(\n      {\n        type: \"INVOKE_FUNCTION\" /* INVOKE */,\n        ...invocation,\n        ...invocationDetails\n      },\n      \"fee\"\n    );\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: [transaction],\n      block_id\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n  async getDeclareEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction(\n      {\n        type: \"DECLARE\" /* DECLARE */,\n        ...invocation,\n        ...details\n      },\n      \"fee\"\n    );\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: [transaction],\n      block_id\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n  async getDeployAccountEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const transaction = this.buildTransaction(\n      {\n        type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n        ...invocation,\n        ...details\n      },\n      \"fee\"\n    );\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: [transaction],\n      block_id\n    }).then(this.responseParser.parseFeeEstimateResponse);\n  }\n  async getEstimateFeeBulk(invocations, { blockIdentifier = this.blockIdentifier, skipValidate = false }) {\n    if (skipValidate) {\n      console.warn(\"getEstimateFeeBulk RPC does not support skipValidate\");\n    }\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: invocations.map((it) => this.buildTransaction(it, \"fee\")),\n      block_id\n    }).then(this.responseParser.parseFeeEstimateBulkResponse);\n  }\n  async invokeFunction(functionInvocation, details) {\n    return this.fetchEndpoint(\"starknet_addInvokeTransaction\", {\n      invoke_transaction: {\n        sender_address: functionInvocation.contractAddress,\n        calldata: CallData.toHex(functionInvocation.calldata),\n        type: rpc_exports.ETransactionType.INVOKE,\n        max_fee: toHex(details.maxFee || 0),\n        version: \"0x1\",\n        signature: signatureToHexArray(functionInvocation.signature),\n        nonce: toHex(details.nonce)\n      }\n    });\n  }\n  async declareContract({ contract, signature, senderAddress, compiledClassHash }, details) {\n    if (!isSierra(contract)) {\n      return this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n        declare_transaction: {\n          type: rpc_exports.ETransactionType.DECLARE,\n          contract_class: {\n            program: contract.program,\n            entry_points_by_type: contract.entry_points_by_type,\n            abi: contract.abi\n          },\n          version: HEX_STR_TRANSACTION_VERSION_1,\n          max_fee: toHex(details.maxFee || 0),\n          signature: signatureToHexArray(signature),\n          sender_address: senderAddress,\n          nonce: toHex(details.nonce)\n        }\n      });\n    }\n    return this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n      declare_transaction: {\n        type: rpc_exports.ETransactionType.DECLARE,\n        contract_class: {\n          sierra_program: decompressProgram(contract.sierra_program),\n          contract_class_version: contract.contract_class_version,\n          entry_points_by_type: contract.entry_points_by_type,\n          abi: contract.abi\n        },\n        compiled_class_hash: compiledClassHash || \"\",\n        version: HEX_STR_TRANSACTION_VERSION_2,\n        max_fee: toHex(details.maxFee || 0),\n        signature: signatureToHexArray(signature),\n        sender_address: senderAddress,\n        nonce: toHex(details.nonce)\n      }\n    });\n  }\n  async deployAccountContract({ classHash, constructorCalldata, addressSalt, signature }, details) {\n    return this.fetchEndpoint(\"starknet_addDeployAccountTransaction\", {\n      deploy_account_transaction: {\n        constructor_calldata: CallData.toHex(constructorCalldata || []),\n        class_hash: toHex(classHash),\n        contract_address_salt: toHex(addressSalt || 0),\n        type: rpc_exports.ETransactionType.DEPLOY_ACCOUNT,\n        max_fee: toHex(details.maxFee || 0),\n        version: toHex(details.version || 0),\n        signature: signatureToHexArray(signature),\n        nonce: toHex(details.nonce)\n      }\n    });\n  }\n  async callContract(call, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    const result = await this.fetchEndpoint(\"starknet_call\", {\n      request: {\n        contract_address: call.contractAddress,\n        entry_point_selector: getSelectorFromName(call.entrypoint),\n        calldata: CallData.toHex(call.calldata)\n      },\n      block_id\n    });\n    return this.responseParser.parseCallContractResponse(result);\n  }\n  /**\n   * NEW: Estimate the fee for a message from L1\n   * @param message Message From L1\n   */\n  async estimateMessageFee(message, blockIdentifier = this.blockIdentifier) {\n    const { from_address, to_address, entry_point_selector, payload } = message;\n    const formattedMessage = {\n      from_address: toHex(from_address),\n      to_address: toHex(to_address),\n      entry_point_selector: getSelector(entry_point_selector),\n      payload: getHexStringArray(payload)\n    };\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_estimateMessageFee\", {\n      message: formattedMessage,\n      block_id\n    });\n  }\n  /**\n   * Returns an object about the sync status, or false if the node is not synching\n   * @returns Object with the stats data\n   */\n  async getSyncingStats() {\n    return this.fetchEndpoint(\"starknet_syncing\");\n  }\n  /**\n   * Returns all events matching the given filter\n   * @returns events and the pagination of the events\n   */\n  async getEvents(eventFilter) {\n    return this.fetchEndpoint(\"starknet_getEvents\", { filter: eventFilter });\n  }\n  /**\n   * StarknetId Endpoint (get name from address)\n   */\n  async getStarkName(address, StarknetIdContract2) {\n    return getStarkName(this, address, StarknetIdContract2);\n  }\n  /**\n   * StarknetId Endpoint (get address from name)\n   */\n  async getAddressFromStarkName(name, StarknetIdContract2) {\n    return getAddressFromStarkName(this, name, StarknetIdContract2);\n  }\n  buildTransaction(invocation, versionType) {\n    const defaultVersions = getVersionsByType(versionType);\n    const details = {\n      signature: signatureToHexArray(invocation.signature),\n      nonce: toHex(invocation.nonce),\n      max_fee: toHex(invocation.maxFee || 0)\n    };\n    if (invocation.type === \"INVOKE_FUNCTION\" /* INVOKE */) {\n      return {\n        type: rpc_exports.ETransactionType.INVOKE,\n        // Diff between sequencer and rpc invoke type\n        sender_address: invocation.contractAddress,\n        calldata: CallData.toHex(invocation.calldata),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details\n      };\n    }\n    if (invocation.type === \"DECLARE\" /* DECLARE */) {\n      if (!isSierra(invocation.contract)) {\n        return {\n          type: invocation.type,\n          contract_class: invocation.contract,\n          sender_address: invocation.senderAddress,\n          version: toHex(invocation.version || defaultVersions.v1),\n          ...details\n        };\n      }\n      return {\n        // compiled_class_hash\n        type: invocation.type,\n        contract_class: {\n          ...invocation.contract,\n          sierra_program: decompressProgram(invocation.contract.sierra_program)\n        },\n        compiled_class_hash: invocation.compiledClassHash || \"\",\n        sender_address: invocation.senderAddress,\n        version: toHex(invocation.version || defaultVersions.v2),\n        ...details\n      };\n    }\n    if (invocation.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */) {\n      return {\n        type: invocation.type,\n        constructor_calldata: CallData.toHex(invocation.constructorCalldata || []),\n        class_hash: toHex(invocation.classHash),\n        contract_address_salt: toHex(invocation.addressSalt || 0),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details\n      };\n    }\n    throw Error(\"RPC buildTransaction received unknown TransactionType\");\n  }\n};\n\n// src/provider/sequencer.ts\n\n\n// src/utils/responseParser/index.ts\nvar ResponseParser = class {\n};\n\n// src/utils/responseParser/sequencer.ts\nvar SequencerAPIResponseParser = class extends ResponseParser {\n  parseGetBlockResponse(res) {\n    return {\n      ...res,\n      new_root: res.state_root,\n      parent_hash: res.parent_block_hash,\n      transactions: Object.values(res.transactions).map((value) => \"transaction_hash\" in value && value.transaction_hash).filter(Boolean)\n    };\n  }\n  parseGetTransactionResponse(res) {\n    if (res.status === \"NOT_RECEIVED\" /* NOT_RECEIVED */ && res.finality_status === \"NOT_RECEIVED\" /* NOT_RECEIVED */) {\n      throw new LibraryError();\n    }\n    return {\n      ...res,\n      calldata: \"calldata\" in res.transaction ? res.transaction.calldata : [],\n      contract_class: \"contract_class\" in res.transaction ? res.transaction.contract_class : void 0,\n      entry_point_selector: \"entry_point_selector\" in res.transaction ? res.transaction.entry_point_selector : void 0,\n      max_fee: \"max_fee\" in res.transaction ? res.transaction.max_fee : void 0,\n      nonce: res.transaction.nonce,\n      sender_address: \"sender_address\" in res.transaction ? res.transaction.sender_address : void 0,\n      signature: \"signature\" in res.transaction ? res.transaction.signature : void 0,\n      transaction_hash: \"transaction_hash\" in res.transaction ? res.transaction.transaction_hash : void 0,\n      version: \"version\" in res.transaction ? res.transaction.version : void 0\n    };\n  }\n  parseGetTransactionReceiptResponse(res) {\n    return {\n      ...res,\n      messages_sent: res.l2_to_l1_messages,\n      ...\"revert_error\" in res && { revert_reason: res.revert_error }\n    };\n  }\n  parseFeeEstimateResponse(res) {\n    if (\"overall_fee\" in res) {\n      let gasInfo = {};\n      try {\n        gasInfo = {\n          gas_consumed: toBigInt(res.gas_usage),\n          gas_price: toBigInt(res.gas_price)\n        };\n      } catch {\n      }\n      return {\n        overall_fee: toBigInt(res.overall_fee),\n        ...gasInfo\n      };\n    }\n    return {\n      overall_fee: toBigInt(res.amount)\n    };\n  }\n  parseFeeEstimateBulkResponse(res) {\n    return [].concat(res).map((item) => {\n      if (\"overall_fee\" in item) {\n        let gasInfo = {};\n        try {\n          gasInfo = {\n            gas_consumed: toBigInt(item.gas_usage),\n            gas_price: toBigInt(item.gas_price)\n          };\n        } catch {\n        }\n        return {\n          overall_fee: toBigInt(item.overall_fee),\n          ...gasInfo\n        };\n      }\n      return {\n        overall_fee: toBigInt(item.amount)\n      };\n    });\n  }\n  parseSimulateTransactionResponse(res) {\n    const suggestedMaxFee = \"overall_fee\" in res.fee_estimation ? res.fee_estimation.overall_fee : res.fee_estimation.amount;\n    return [\n      {\n        transaction_trace: res.trace,\n        fee_estimation: res.fee_estimation,\n        suggestedMaxFee: estimatedFeeToMaxFee(BigInt(suggestedMaxFee))\n      }\n    ];\n  }\n  parseCallContractResponse(res) {\n    return {\n      result: res.result\n    };\n  }\n  parseInvokeFunctionResponse(res) {\n    return {\n      transaction_hash: res.transaction_hash\n    };\n  }\n  parseDeployContractResponse(res) {\n    return {\n      transaction_hash: res.transaction_hash,\n      contract_address: res.address\n    };\n  }\n  parseDeclareContractResponse(res) {\n    return {\n      transaction_hash: res.transaction_hash,\n      class_hash: res.class_hash\n    };\n  }\n  parseGetStateUpdateResponse(res) {\n    const nonces = Object.entries(res.state_diff.nonces).map(([contract_address, nonce]) => ({\n      contract_address,\n      nonce\n    }));\n    const storage_diffs = Object.entries(res.state_diff.storage_diffs).map(\n      ([address, storage_entries]) => ({ address, storage_entries })\n    );\n    return {\n      ...res,\n      state_diff: {\n        ...res.state_diff,\n        storage_diffs,\n        nonces\n      }\n    };\n  }\n  parseContractClassResponse(res) {\n    const response = isSierra(res) ? res : parseContract(res);\n    return {\n      ...response,\n      abi: typeof response.abi === \"string\" ? JSON.parse(response.abi) : response.abi\n    };\n  }\n};\n\n// src/utils/url.ts\n\nvar protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\nvar localhostDomainRE = /^localhost[:?\\d]*(?:[^:?\\d]\\S*)?$/;\nvar nonLocalhostDomainRE = /^[^\\s.]+\\.\\S{2,}$/;\nfunction isUrl(s) {\n  if (!s) {\n    return false;\n  }\n  if (typeof s !== \"string\") {\n    return false;\n  }\n  const match = s.match(protocolAndDomainRE);\n  if (!match) {\n    return false;\n  }\n  const everythingAfterProtocol = match[1];\n  if (!everythingAfterProtocol) {\n    return false;\n  }\n  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {\n    return true;\n  }\n  return false;\n}\nfunction buildUrl(baseUrl, defaultPath, urlOrPath) {\n  return isUrl(urlOrPath) ? urlOrPath : url_join__WEBPACK_IMPORTED_MODULE_8__(baseUrl, urlOrPath ?? defaultPath);\n}\n\n// src/provider/sequencer.ts\nfunction isEmptyQueryObject(obj) {\n  return obj === void 0 || Object.keys(obj).length === 0 || Object.keys(obj).length === 1 && Object.entries(obj).every(([k, v]) => k === \"blockIdentifier\" && v === null);\n}\nvar defaultOptions2 = {\n  network: \"SN_GOERLI\" /* SN_GOERLI */,\n  blockIdentifier: \"pending\" /* pending */\n};\nvar SequencerProvider = class {\n  constructor(optionsOrProvider = defaultOptions2) {\n    this.responseParser = new SequencerAPIResponseParser();\n    if (\"network\" in optionsOrProvider) {\n      this.baseUrl = SequencerProvider.getNetworkFromName(optionsOrProvider.network);\n      this.feederGatewayUrl = buildUrl(this.baseUrl, \"feeder_gateway\");\n      this.gatewayUrl = buildUrl(this.baseUrl, \"gateway\");\n    } else {\n      this.baseUrl = optionsOrProvider.baseUrl;\n      this.feederGatewayUrl = buildUrl(\n        this.baseUrl,\n        \"feeder_gateway\",\n        optionsOrProvider.feederGatewayUrl\n      );\n      this.gatewayUrl = buildUrl(this.baseUrl, \"gateway\", optionsOrProvider.gatewayUrl);\n    }\n    this.chainId = optionsOrProvider?.chainId ?? SequencerProvider.getChainIdFromBaseUrl(this.baseUrl);\n    this.headers = optionsOrProvider.headers;\n    this.blockIdentifier = optionsOrProvider?.blockIdentifier || defaultOptions2.blockIdentifier;\n  }\n  static getNetworkFromName(name) {\n    switch (name) {\n      case \"SN_MAIN\" /* SN_MAIN */:\n      case \"0x534e5f4d41494e\" /* SN_MAIN */:\n        return \"https://alpha-mainnet.starknet.io\" /* SN_MAIN */;\n      case \"SN_GOERLI\" /* SN_GOERLI */:\n      case \"0x534e5f474f45524c49\" /* SN_GOERLI */:\n        return \"https://alpha4.starknet.io\" /* SN_GOERLI */;\n      default:\n        throw new Error(\"Could not detect base url from NetworkName\");\n    }\n  }\n  static getChainIdFromBaseUrl(baseUrl) {\n    try {\n      const url = new URL(baseUrl);\n      if (url.host.includes(\"mainnet.starknet.io\")) {\n        return \"0x534e5f4d41494e\" /* SN_MAIN */;\n      }\n      return \"0x534e5f474f45524c49\" /* SN_GOERLI */;\n    } catch {\n      console.error(`Could not parse baseUrl: ${baseUrl}`);\n      return \"0x534e5f474f45524c49\" /* SN_GOERLI */;\n    }\n  }\n  getFetchUrl(endpoint) {\n    const gatewayUrlEndpoints = [\"add_transaction\"];\n    return gatewayUrlEndpoints.includes(endpoint) ? this.gatewayUrl : this.feederGatewayUrl;\n  }\n  getFetchMethod(endpoint) {\n    const postMethodEndpoints = [\n      \"add_transaction\",\n      \"call_contract\",\n      \"estimate_fee\",\n      \"estimate_message_fee\",\n      \"estimate_fee_bulk\",\n      \"simulate_transaction\"\n    ];\n    return postMethodEndpoints.includes(endpoint) ? \"POST\" : \"GET\";\n  }\n  getQueryString(query) {\n    if (isEmptyQueryObject(query)) {\n      return \"\";\n    }\n    const queryString = Object.entries(query).map(([key, value]) => {\n      if (key === \"blockIdentifier\") {\n        const block = new Block(value);\n        return `${block.queryIdentifier}`;\n      }\n      return `${key}=${value}`;\n    }).join(\"&\");\n    return `?${queryString}`;\n  }\n  getHeaders(method) {\n    if (method === \"POST\") {\n      return {\n        \"Content-Type\": \"application/json\",\n        ...this.headers\n      };\n    }\n    return this.headers;\n  }\n  // typesafe fetch\n  async fetchEndpoint(endpoint, ...[query, request]) {\n    const baseUrl = this.getFetchUrl(endpoint);\n    const method = this.getFetchMethod(endpoint);\n    const queryString = this.getQueryString(query);\n    const url = url_join__WEBPACK_IMPORTED_MODULE_8__(baseUrl, endpoint, queryString);\n    return this.fetch(url, {\n      method,\n      body: request\n    });\n  }\n  async fetch(endpoint, options) {\n    const url = buildUrl(this.baseUrl, \"\", endpoint);\n    const method = options?.method ?? \"GET\";\n    const headers = this.getHeaders(method);\n    const body = stringify2(options?.body);\n    try {\n      const response = await fetchPonyfill_default(url, {\n        method,\n        body,\n        headers\n      });\n      const textResponse = await response.text();\n      if (!response.ok) {\n        let responseBody;\n        try {\n          responseBody = parse2(textResponse);\n        } catch {\n          throw new HttpError(response.statusText, response.status);\n        }\n        throw new GatewayError(responseBody.message, responseBody.code);\n      }\n      const parseChoice = options?.parseAlwaysAsBigInt ? parseAlwaysAsBig : parse2;\n      return parseChoice(textResponse);\n    } catch (error) {\n      if (error instanceof Error && !(error instanceof LibraryError))\n        throw Error(`Could not ${method} from endpoint \\`${url}\\`: ${error.message}`);\n      throw error;\n    }\n  }\n  async getChainId() {\n    return Promise.resolve(this.chainId);\n  }\n  async callContract({ contractAddress, entrypoint: entryPointSelector, calldata = [] }, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\n      \"call_contract\",\n      { blockIdentifier },\n      {\n        // TODO - determine best choice once both are fully supported in devnet\n        // signature: [],\n        // sender_address: contractAddress,\n        contract_address: contractAddress,\n        entry_point_selector: getSelectorFromName(entryPointSelector),\n        calldata: CallData.compile(calldata)\n      }\n    ).then(this.responseParser.parseCallContractResponse);\n  }\n  async getBlock(blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_block\", { blockIdentifier }).then(\n      this.responseParser.parseGetBlockResponse\n    );\n  }\n  async getNonceForAddress(contractAddress, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_nonce\", { contractAddress, blockIdentifier });\n  }\n  async getStorageAt(contractAddress, key, blockIdentifier = this.blockIdentifier) {\n    const parsedKey = toBigInt(key).toString(10);\n    return this.fetchEndpoint(\"get_storage_at\", {\n      blockIdentifier,\n      contractAddress,\n      key: parsedKey\n    });\n  }\n  async getTransaction(txHash) {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint(\"get_transaction\", { transactionHash: txHashHex }).then((result) => {\n      if (Object.values(result).length === 1)\n        throw new LibraryError(result.status);\n      return this.responseParser.parseGetTransactionResponse(result);\n    });\n  }\n  async getTransactionReceipt(txHash) {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint(\"get_transaction_receipt\", { transactionHash: txHashHex }).then(\n      this.responseParser.parseGetTransactionReceiptResponse\n    );\n  }\n  async getClassAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_full_contract\", { blockIdentifier, contractAddress }).then(\n      this.responseParser.parseContractClassResponse\n    );\n  }\n  async getClassHashAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_class_hash_at\", { blockIdentifier, contractAddress });\n  }\n  async getClassByHash(classHash, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_class_by_hash\", { classHash, blockIdentifier }).then(\n      this.responseParser.parseContractClassResponse\n    );\n  }\n  async getCompiledClassByClassHash(classHash, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_compiled_class_by_class_hash\", { classHash, blockIdentifier });\n  }\n  async getContractVersion(contractAddress, classHash, { blockIdentifier = this.blockIdentifier, compiler = true } = {}) {\n    let contractClass;\n    if (contractAddress) {\n      contractClass = await this.getClassAt(contractAddress, blockIdentifier);\n    } else if (classHash) {\n      contractClass = await this.getClassByHash(classHash, blockIdentifier);\n    } else {\n      throw Error(\"getContractVersion require contractAddress or classHash\");\n    }\n    if (isSierra(contractClass)) {\n      if (compiler) {\n        const abiTest = getAbiContractVersion(contractClass.abi);\n        return { cairo: \"1\", compiler: abiTest.compiler };\n      }\n      return { cairo: \"1\", compiler: void 0 };\n    }\n    return { cairo: \"0\", compiler: \"0\" };\n  }\n  async invokeFunction(functionInvocation, details) {\n    return this.fetchEndpoint(\"add_transaction\", void 0, {\n      type: \"INVOKE_FUNCTION\" /* INVOKE */,\n      sender_address: functionInvocation.contractAddress,\n      calldata: CallData.compile(functionInvocation.calldata ?? []),\n      signature: signatureToDecimalArray(functionInvocation.signature),\n      nonce: toHex(details.nonce),\n      max_fee: toHex(details.maxFee || 0),\n      version: \"0x1\"\n    }).then(this.responseParser.parseInvokeFunctionResponse);\n  }\n  async deployAccountContract({ classHash, constructorCalldata, addressSalt, signature }, details) {\n    return this.fetchEndpoint(\"add_transaction\", void 0, {\n      type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n      contract_address_salt: addressSalt ?? randomAddress(),\n      constructor_calldata: CallData.compile(constructorCalldata ?? []),\n      class_hash: toHex(classHash),\n      max_fee: toHex(details.maxFee || 0),\n      version: toHex(details.version || 0),\n      nonce: toHex(details.nonce),\n      signature: signatureToDecimalArray(signature)\n    }).then(this.responseParser.parseDeployContractResponse);\n  }\n  async declareContract({ senderAddress, contract, signature, compiledClassHash }, details) {\n    if (!isSierra(contract)) {\n      return this.fetchEndpoint(\"add_transaction\", void 0, {\n        type: \"DECLARE\" /* DECLARE */,\n        contract_class: contract,\n        nonce: toHex(details.nonce),\n        signature: signatureToDecimalArray(signature),\n        sender_address: senderAddress,\n        max_fee: toHex(details.maxFee || 0),\n        version: toHex(transactionVersion)\n      }).then(this.responseParser.parseDeclareContractResponse);\n    }\n    return this.fetchEndpoint(\"add_transaction\", void 0, {\n      type: \"DECLARE\" /* DECLARE */,\n      sender_address: senderAddress,\n      compiled_class_hash: compiledClassHash,\n      contract_class: contract,\n      nonce: toHex(details.nonce),\n      signature: signatureToDecimalArray(signature),\n      max_fee: toHex(details.maxFee || 0),\n      version: toHex(transactionVersion_2)\n    }).then(this.responseParser.parseDeclareContractResponse);\n  }\n  async getEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n    return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier, skipValidate);\n  }\n  async getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n    const transaction = this.buildTransaction(\n      {\n        type: \"INVOKE_FUNCTION\" /* INVOKE */,\n        ...invocation,\n        ...invocationDetails\n      },\n      \"fee\"\n    );\n    return this.fetchEndpoint(\"estimate_fee\", { blockIdentifier, skipValidate }, transaction).then(\n      this.responseParser.parseFeeEstimateResponse\n    );\n  }\n  async getDeclareEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n    const transaction = this.buildTransaction(\n      {\n        type: \"DECLARE\" /* DECLARE */,\n        ...invocation,\n        ...details\n      },\n      \"fee\"\n    );\n    return this.fetchEndpoint(\"estimate_fee\", { blockIdentifier, skipValidate }, transaction).then(\n      this.responseParser.parseFeeEstimateResponse\n    );\n  }\n  async getDeployAccountEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier, skipValidate = false) {\n    const transaction = this.buildTransaction(\n      {\n        type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n        ...invocation,\n        ...details\n      },\n      \"fee\"\n    );\n    return this.fetchEndpoint(\"estimate_fee\", { blockIdentifier, skipValidate }, transaction).then(\n      this.responseParser.parseFeeEstimateResponse\n    );\n  }\n  async getEstimateFeeBulk(invocations, { blockIdentifier = this.blockIdentifier, skipValidate = false }) {\n    const transactions = invocations.map((it) => this.buildTransaction(it, \"fee\"));\n    return this.fetchEndpoint(\n      \"estimate_fee_bulk\",\n      { blockIdentifier, skipValidate },\n      transactions\n    ).then(this.responseParser.parseFeeEstimateBulkResponse);\n  }\n  async getCode(contractAddress, blockIdentifier = this.blockIdentifier) {\n    return this.fetchEndpoint(\"get_code\", { contractAddress, blockIdentifier });\n  }\n  async waitForTransaction(txHash, options) {\n    let res;\n    let completed = false;\n    let retries = 0;\n    const retryInterval = options?.retryInterval ?? 5e3;\n    const errorStates = options?.errorStates ?? [\n      \"REJECTED\" /* REJECTED */,\n      \"NOT_RECEIVED\" /* NOT_RECEIVED */,\n      \"REVERTED\" /* REVERTED */\n    ];\n    const successStates = options?.successStates ?? [\n      \"SUCCEEDED\" /* SUCCEEDED */,\n      \"ACCEPTED_ON_L1\" /* ACCEPTED_ON_L1 */,\n      \"ACCEPTED_ON_L2\" /* ACCEPTED_ON_L2 */\n    ];\n    while (!completed) {\n      await wait(retryInterval);\n      res = await this.getTransactionStatus(txHash);\n      if (\"NOT_RECEIVED\" /* NOT_RECEIVED */ === res.finality_status && retries < 3) {\n        retries += 1;\n      } else if (successStates.includes(res.finality_status) || successStates.includes(res.execution_status)) {\n        completed = true;\n      } else if (errorStates.includes(res.finality_status) || errorStates.includes(res.execution_status)) {\n        let message;\n        if (res.tx_failure_reason) {\n          message = `${res.tx_status}: ${res.tx_failure_reason.code}\n${res.tx_failure_reason.error_message}`;\n        } else if (res.tx_revert_reason) {\n          message = `${res.tx_status}: ${res.tx_revert_reason}`;\n        } else {\n          message = res.tx_status;\n        }\n        const error = new Error(message);\n        error.response = res;\n        throw error;\n      }\n    }\n    const txReceipt = await this.getTransactionReceipt(txHash);\n    return txReceipt;\n  }\n  /**\n   * Gets the status of a transaction.\n   * @param txHash BigNumberish\n   * @returns GetTransactionStatusResponse - the transaction status object\n   */\n  async getTransactionStatus(txHash) {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint(\"get_transaction_status\", { transactionHash: txHashHex });\n  }\n  /**\n   * Gets the smart contract address on the goerli testnet.\n   * @returns GetContractAddressesResponse - starknet smart contract addresses\n   */\n  async getContractAddresses() {\n    return this.fetchEndpoint(\"get_contract_addresses\");\n  }\n  /**\n   * Gets the transaction trace from a tx id.\n   * @param txHash BigNumberish\n   * @returns TransactionTraceResponse - the transaction trace\n   */\n  async getTransactionTrace(txHash) {\n    const txHashHex = toHex(txHash);\n    return this.fetchEndpoint(\"get_transaction_trace\", { transactionHash: txHashHex });\n  }\n  async estimateMessageFee({ from_address, to_address, entry_point_selector, payload }, blockIdentifier = this.blockIdentifier) {\n    const validCallL1Handler = {\n      from_address: getDecimalString(from_address),\n      to_address: getHexString(to_address),\n      entry_point_selector: getSelector(entry_point_selector),\n      payload: getHexStringArray(payload)\n    };\n    return this.fetchEndpoint(\"estimate_message_fee\", { blockIdentifier }, validCallL1Handler);\n  }\n  /**\n   * Simulate transaction using Sequencer provider\n   * WARNING!: Sequencer will process only first element from invocations array\n   *\n   * @param invocations Array of invocations, but only first invocation will be processed\n   * @param blockIdentifier block identifier, default 'latest'\n   * @param skipValidate Skip Account __validate__ method\n   * @returns\n   */\n  async getSimulateTransaction(invocations, {\n    blockIdentifier = this.blockIdentifier,\n    skipValidate = false,\n    skipExecute = false\n  }) {\n    if (invocations.length > 1) {\n      console.warn(\"Sequencer simulate process only first element from invocations list\");\n    }\n    if (skipExecute) {\n      console.warn(\"Sequencer can't skip account __execute__\");\n    }\n    const transaction = this.buildTransaction(invocations[0]);\n    return this.fetchEndpoint(\n      \"simulate_transaction\",\n      {\n        blockIdentifier,\n        skipValidate: skipValidate ?? false\n      },\n      transaction\n    ).then(this.responseParser.parseSimulateTransactionResponse);\n  }\n  async getStateUpdate(blockIdentifier = this.blockIdentifier) {\n    const args = new Block(blockIdentifier).sequencerIdentifier;\n    return this.fetchEndpoint(\"get_state_update\", { ...args }).then(\n      this.responseParser.parseGetStateUpdateResponse\n    );\n  }\n  // consider adding an optional trace retrieval parameter to the getBlock method\n  async getBlockTraces(blockIdentifier = this.blockIdentifier) {\n    const args = new Block(blockIdentifier).sequencerIdentifier;\n    return this.fetchEndpoint(\"get_block_traces\", { ...args });\n  }\n  async getStarkName(address, StarknetIdContract2) {\n    return getStarkName(this, address, StarknetIdContract2);\n  }\n  async getAddressFromStarkName(name, StarknetIdContract2) {\n    return getAddressFromStarkName(this, name, StarknetIdContract2);\n  }\n  /**\n   * Build Single AccountTransaction from Single AccountInvocation\n   * @param invocation AccountInvocationItem\n   * @param versionType 'fee' | 'transaction' - used to determine default versions\n   * @returns AccountTransactionItem\n   */\n  buildTransaction(invocation, versionType) {\n    const defaultVersions = getVersionsByType(versionType);\n    const details = {\n      signature: signatureToDecimalArray(invocation.signature),\n      nonce: toHex(invocation.nonce)\n    };\n    if (invocation.type === \"INVOKE_FUNCTION\" /* INVOKE */) {\n      return {\n        type: invocation.type,\n        sender_address: invocation.contractAddress,\n        calldata: CallData.compile(invocation.calldata ?? []),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details\n      };\n    }\n    if (invocation.type === \"DECLARE\" /* DECLARE */) {\n      if (!isSierra(invocation.contract)) {\n        return {\n          type: invocation.type,\n          contract_class: invocation.contract,\n          sender_address: invocation.senderAddress,\n          version: toHex(invocation.version || defaultVersions.v1),\n          // fee from getDeclareEstimateFee use t.v. instead of feet.v.\n          ...details\n        };\n      }\n      return {\n        type: invocation.type,\n        contract_class: invocation.contract,\n        compiled_class_hash: invocation.compiledClassHash,\n        sender_address: invocation.senderAddress,\n        version: toHex(invocation.version || defaultVersions.v2),\n        // fee on getDeclareEstimateFee use t.v. instead of feet.v.\n        ...details\n      };\n    }\n    if (invocation.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */) {\n      return {\n        type: invocation.type,\n        constructor_calldata: CallData.compile(invocation.constructorCalldata || []),\n        class_hash: toHex(invocation.classHash),\n        contract_address_salt: toHex(invocation.addressSalt || 0),\n        version: toHex(invocation.version || defaultVersions.v1),\n        ...details\n      };\n    }\n    throw Error(\"Sequencer buildTransaction received unknown TransactionType\");\n  }\n};\n\n// src/provider/default.ts\nvar Provider = class {\n  constructor(providerOrOptions) {\n    if (providerOrOptions instanceof Provider) {\n      this.provider = providerOrOptions.provider;\n    } else if (providerOrOptions instanceof RpcProvider || providerOrOptions instanceof SequencerProvider) {\n      this.provider = providerOrOptions;\n    } else if (providerOrOptions && \"rpc\" in providerOrOptions) {\n      this.provider = new RpcProvider(providerOrOptions.rpc);\n    } else if (providerOrOptions && \"sequencer\" in providerOrOptions) {\n      this.provider = new SequencerProvider(providerOrOptions.sequencer);\n    } else {\n      this.provider = new RpcProvider();\n    }\n  }\n  async getChainId() {\n    return this.provider.getChainId();\n  }\n  async getBlock(blockIdentifier) {\n    return this.provider.getBlock(blockIdentifier);\n  }\n  async getClassAt(contractAddress, blockIdentifier) {\n    return this.provider.getClassAt(contractAddress, blockIdentifier);\n  }\n  async getClassHashAt(contractAddress, blockIdentifier) {\n    return this.provider.getClassHashAt(contractAddress, blockIdentifier);\n  }\n  getClassByHash(classHash) {\n    return this.provider.getClassByHash(classHash);\n  }\n  async getEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier) {\n    return this.provider.getEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier);\n  }\n  async getInvokeEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier, skipValidate) {\n    return this.provider.getInvokeEstimateFee(\n      invocationWithTxType,\n      invocationDetails,\n      blockIdentifier,\n      skipValidate\n    );\n  }\n  async getEstimateFeeBulk(invocations, options) {\n    return this.provider.getEstimateFeeBulk(invocations, options);\n  }\n  async getNonceForAddress(contractAddress, blockIdentifier) {\n    return this.provider.getNonceForAddress(contractAddress, blockIdentifier);\n  }\n  async getStorageAt(contractAddress, key, blockIdentifier) {\n    return this.provider.getStorageAt(contractAddress, key, blockIdentifier);\n  }\n  async getTransaction(txHash) {\n    return this.provider.getTransaction(txHash);\n  }\n  async getTransactionReceipt(txHash) {\n    return this.provider.getTransactionReceipt(txHash);\n  }\n  async callContract(request, blockIdentifier) {\n    return this.provider.callContract(request, blockIdentifier);\n  }\n  async invokeFunction(functionInvocation, details) {\n    return this.provider.invokeFunction(functionInvocation, details);\n  }\n  async deployAccountContract(payload, details) {\n    return this.provider.deployAccountContract(payload, details);\n  }\n  async declareContract(transaction, details) {\n    return this.provider.declareContract(transaction, details);\n  }\n  async getDeclareEstimateFee(transaction, details, blockIdentifier, skipValidate) {\n    return this.provider.getDeclareEstimateFee(transaction, details, blockIdentifier, skipValidate);\n  }\n  getDeployAccountEstimateFee(transaction, details, blockIdentifier, skipValidate) {\n    return this.provider.getDeployAccountEstimateFee(\n      transaction,\n      details,\n      blockIdentifier,\n      skipValidate\n    );\n  }\n  async getCode(contractAddress, blockIdentifier) {\n    return this.provider.getCode(contractAddress, blockIdentifier);\n  }\n  async waitForTransaction(txHash, options) {\n    return this.provider.waitForTransaction(txHash, options);\n  }\n  async getSimulateTransaction(invocations, options) {\n    return this.provider.getSimulateTransaction(invocations, options);\n  }\n  async getStateUpdate(blockIdentifier) {\n    return this.provider.getStateUpdate(blockIdentifier);\n  }\n  async getStarkName(address, StarknetIdContract2) {\n    return getStarkName(this, address, StarknetIdContract2);\n  }\n  async getAddressFromStarkName(name, StarknetIdContract2) {\n    return getAddressFromStarkName(this, name, StarknetIdContract2);\n  }\n  async getContractVersion(contractAddress, classHash, options) {\n    return this.provider.getContractVersion(contractAddress, classHash, options);\n  }\n};\n\n// src/signer/interface.ts\nvar SignerInterface = class {\n};\n\n// src/utils/transaction.ts\nvar transaction_exports = {};\n__export(transaction_exports, {\n  fromCallsToExecuteCalldata: () => fromCallsToExecuteCalldata,\n  fromCallsToExecuteCalldataWithNonce: () => fromCallsToExecuteCalldataWithNonce,\n  fromCallsToExecuteCalldata_cairo1: () => fromCallsToExecuteCalldata_cairo1,\n  getExecuteCalldata: () => getExecuteCalldata,\n  transformCallsToMulticallArrays: () => transformCallsToMulticallArrays,\n  transformCallsToMulticallArrays_cairo1: () => transformCallsToMulticallArrays_cairo1\n});\nvar transformCallsToMulticallArrays = (calls) => {\n  const callArray = [];\n  const calldata = [];\n  calls.forEach((call) => {\n    const data = CallData.compile(call.calldata || []);\n    callArray.push({\n      to: toBigInt(call.contractAddress).toString(10),\n      selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n      data_offset: calldata.length.toString(),\n      data_len: data.length.toString()\n    });\n    calldata.push(...data);\n  });\n  return {\n    callArray,\n    calldata: CallData.compile({ calldata })\n  };\n};\nvar fromCallsToExecuteCalldata = (calls) => {\n  const { callArray, calldata } = transformCallsToMulticallArrays(calls);\n  const compiledCalls = CallData.compile({ callArray });\n  return [...compiledCalls, ...calldata];\n};\nvar fromCallsToExecuteCalldataWithNonce = (calls, nonce) => {\n  return [...fromCallsToExecuteCalldata(calls), toBigInt(nonce).toString()];\n};\nvar transformCallsToMulticallArrays_cairo1 = (calls) => {\n  const callArray = calls.map((call) => ({\n    to: toBigInt(call.contractAddress).toString(10),\n    selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n    calldata: CallData.compile(call.calldata || [])\n  }));\n  return callArray;\n};\nvar fromCallsToExecuteCalldata_cairo1 = (calls) => {\n  const orderCalls = calls.map((call) => ({\n    contractAddress: call.contractAddress,\n    entrypoint: call.entrypoint,\n    calldata: Array.isArray(call.calldata) && \"__compiled__\" in call.calldata ? call.calldata : CallData.compile(call.calldata)\n    // RawArgsObject | RawArgsArray type\n  }));\n  return CallData.compile({ orderCalls });\n};\nvar getExecuteCalldata = (calls, cairoVersion = \"0\") => {\n  if (cairoVersion === \"1\") {\n    return fromCallsToExecuteCalldata_cairo1(calls);\n  }\n  return fromCallsToExecuteCalldata(calls);\n};\n\n// src/utils/typedData.ts\nvar typedData_exports = {};\n__export(typedData_exports, {\n  encodeData: () => encodeData,\n  encodeType: () => encodeType,\n  encodeValue: () => encodeValue,\n  getDependencies: () => getDependencies,\n  getMessageHash: () => getMessageHash,\n  getStructHash: () => getStructHash,\n  getTypeHash: () => getTypeHash,\n  isMerkleTreeType: () => isMerkleTreeType,\n  prepareSelector: () => prepareSelector\n});\n\n// src/utils/merkle.ts\nvar merkle_exports = {};\n__export(merkle_exports, {\n  MerkleTree: () => MerkleTree,\n  proofMerklePath: () => proofMerklePath\n});\nvar MerkleTree = class {\n  constructor(leafHashes) {\n    this.branches = [];\n    this.leaves = leafHashes;\n    this.root = this.build(leafHashes);\n  }\n  /**\n   * Create Merkle tree\n   * @param leaves hex-string array\n   * @returns format: hex-string; Merkle tree root\n   */\n  build(leaves) {\n    if (leaves.length === 1) {\n      return leaves[0];\n    }\n    if (leaves.length !== this.leaves.length) {\n      this.branches.push(leaves);\n    }\n    const newLeaves = [];\n    for (let i = 0; i < leaves.length; i += 2) {\n      if (i + 1 === leaves.length) {\n        newLeaves.push(MerkleTree.hash(leaves[i], \"0x0\"));\n      } else {\n        newLeaves.push(MerkleTree.hash(leaves[i], leaves[i + 1]));\n      }\n    }\n    return this.build(newLeaves);\n  }\n  /**\n   * Create pedersen hash from a and b\n   * @returns format: hex-string\n   */\n  static hash(a, b) {\n    const [aSorted, bSorted] = [toBigInt(a), toBigInt(b)].sort((x, y) => x >= y ? 1 : -1);\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.pedersen(aSorted, bSorted);\n  }\n  /**\n   * Return path to leaf\n   * @param leaf hex-string\n   * @param branch hex-string array\n   * @param hashPath hex-string array\n   * @returns format: hex-string array\n   */\n  getProof(leaf, branch = this.leaves, hashPath = []) {\n    const index = branch.indexOf(leaf);\n    if (index === -1) {\n      throw new Error(\"leaf not found\");\n    }\n    if (branch.length === 1) {\n      return hashPath;\n    }\n    const isLeft = index % 2 === 0;\n    const neededBranch = (isLeft ? branch[index + 1] : branch[index - 1]) ?? \"0x0\";\n    const newHashPath = [...hashPath, neededBranch];\n    const currentBranchLevelIndex = this.leaves.length === branch.length ? -1 : this.branches.findIndex((b) => b.length === branch.length);\n    const nextBranch = this.branches[currentBranchLevelIndex + 1] ?? [this.root];\n    return this.getProof(\n      MerkleTree.hash(isLeft ? leaf : neededBranch, isLeft ? neededBranch : leaf),\n      nextBranch,\n      newHashPath\n    );\n  }\n};\nfunction proofMerklePath(root, leaf, path) {\n  if (path.length === 0) {\n    return root === leaf;\n  }\n  const [next, ...rest] = path;\n  return proofMerklePath(root, MerkleTree.hash(leaf, next), rest);\n}\n\n// src/utils/typedData.ts\nfunction getHex(value) {\n  try {\n    return toHex(value);\n  } catch (e) {\n    if (typeof value === \"string\") {\n      return toHex(encodeShortString(value));\n    }\n    throw new Error(`Invalid BigNumberish: ${value}`);\n  }\n}\nvar validateTypedData = (data) => {\n  const typedData = data;\n  const valid = Boolean(typedData.types && typedData.primaryType && typedData.message);\n  return valid;\n};\nfunction prepareSelector(selector) {\n  return isHex(selector) ? selector : getSelectorFromName(selector);\n}\nfunction isMerkleTreeType(type) {\n  return type.type === \"merkletree\";\n}\nvar getDependencies = (types, type, dependencies = []) => {\n  if (type[type.length - 1] === \"*\") {\n    type = type.slice(0, -1);\n  }\n  if (dependencies.includes(type)) {\n    return dependencies;\n  }\n  if (!types[type]) {\n    return dependencies;\n  }\n  return [\n    type,\n    ...types[type].reduce(\n      (previous, t) => [\n        ...previous,\n        ...getDependencies(types, t.type, previous).filter(\n          (dependency) => !previous.includes(dependency)\n        )\n      ],\n      []\n    )\n  ];\n};\nfunction getMerkleTreeType(types, ctx) {\n  if (ctx.parent && ctx.key) {\n    const parentType = types[ctx.parent];\n    const merkleType = parentType.find((t) => t.name === ctx.key);\n    const isMerkleTree = isMerkleTreeType(merkleType);\n    if (!isMerkleTree) {\n      throw new Error(`${ctx.key} is not a merkle tree`);\n    }\n    if (merkleType.contains.endsWith(\"*\")) {\n      throw new Error(`Merkle tree contain property must not be an array but was given ${ctx.key}`);\n    }\n    return merkleType.contains;\n  }\n  return \"raw\";\n}\nvar encodeType = (types, type) => {\n  const [primary, ...dependencies] = getDependencies(types, type);\n  const newTypes = !primary ? [] : [primary, ...dependencies.sort()];\n  return newTypes.map((dependency) => {\n    return `${dependency}(${types[dependency].map((t) => `${t.name}:${t.type}`)})`;\n  }).join(\"\");\n};\nvar getTypeHash = (types, type) => {\n  return getSelectorFromName(encodeType(types, type));\n};\nvar encodeValue = (types, type, data, ctx = {}) => {\n  if (types[type]) {\n    return [type, getStructHash(types, type, data)];\n  }\n  if (Object.keys(types).map((x) => `${x}*`).includes(type)) {\n    const structHashes = data.map((struct) => {\n      return getStructHash(types, type.slice(0, -1), struct);\n    });\n    return [type, computeHashOnElements(structHashes)];\n  }\n  if (type === \"merkletree\") {\n    const merkleTreeType = getMerkleTreeType(types, ctx);\n    const structHashes = data.map((struct) => {\n      return encodeValue(types, merkleTreeType, struct)[1];\n    });\n    const { root } = new MerkleTree(structHashes);\n    return [\"felt\", root];\n  }\n  if (type === \"felt*\") {\n    return [\"felt*\", computeHashOnElements(data)];\n  }\n  if (type === \"selector\") {\n    return [\"felt\", prepareSelector(data)];\n  }\n  return [type, getHex(data)];\n};\nvar encodeData = (types, type, data) => {\n  const [returnTypes, values] = types[type].reduce(\n    ([ts, vs], field) => {\n      if (data[field.name] === void 0 || data[field.name] === null) {\n        throw new Error(`Cannot encode data: missing data for '${field.name}'`);\n      }\n      const value = data[field.name];\n      const [t, encodedValue] = encodeValue(types, field.type, value, {\n        parent: type,\n        key: field.name\n      });\n      return [\n        [...ts, t],\n        [...vs, encodedValue]\n      ];\n    },\n    [[\"felt\"], [getTypeHash(types, type)]]\n  );\n  return [returnTypes, values];\n};\nvar getStructHash = (types, type, data) => {\n  return computeHashOnElements(encodeData(types, type, data)[1]);\n};\nvar getMessageHash = (typedData, account) => {\n  if (!validateTypedData(typedData)) {\n    throw new Error(\"Typed data does not match JSON schema\");\n  }\n  const message = [\n    encodeShortString(\"StarkNet Message\"),\n    getStructHash(typedData.types, \"StarkNetDomain\", typedData.domain),\n    account,\n    getStructHash(typedData.types, typedData.primaryType, typedData.message)\n  ];\n  return computeHashOnElements(message);\n};\n\n// src/signer/default.ts\nvar Signer = class {\n  constructor(pk = _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.utils.randomPrivateKey()) {\n    this.pk = pk instanceof Uint8Array ? buf2hex(pk) : toHex(pk);\n  }\n  async getPubKey() {\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.getStarkKey(this.pk);\n  }\n  async signMessage(typedData, accountAddress) {\n    const msgHash = getMessageHash(typedData, accountAddress);\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.sign(msgHash, this.pk);\n  }\n  async signTransaction(transactions, transactionsDetail, abis) {\n    if (abis && abis.length !== transactions.length) {\n      throw new Error(\"ABI must be provided for each transaction or no transaction\");\n    }\n    const calldata = getExecuteCalldata(transactions, transactionsDetail.cairoVersion);\n    const msgHash = calculateTransactionHash(\n      transactionsDetail.walletAddress,\n      transactionsDetail.version,\n      calldata,\n      transactionsDetail.maxFee,\n      transactionsDetail.chainId,\n      transactionsDetail.nonce\n    );\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.sign(msgHash, this.pk);\n  }\n  async signDeployAccountTransaction({\n    classHash,\n    contractAddress,\n    constructorCalldata,\n    addressSalt,\n    maxFee,\n    version,\n    chainId,\n    nonce\n  }) {\n    const msgHash = calculateDeployAccountTransactionHash(\n      contractAddress,\n      classHash,\n      CallData.compile(constructorCalldata),\n      addressSalt,\n      version,\n      maxFee,\n      chainId,\n      nonce\n    );\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.sign(msgHash, this.pk);\n  }\n  async signDeclareTransaction({\n    classHash,\n    senderAddress,\n    chainId,\n    maxFee,\n    version,\n    nonce,\n    compiledClassHash\n  }) {\n    const msgHash = calculateDeclareTransactionHash(\n      classHash,\n      senderAddress,\n      version,\n      maxFee,\n      chainId,\n      nonce,\n      compiledClassHash\n    );\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.sign(msgHash, this.pk);\n  }\n};\n\n// src/utils/events.ts\nfunction parseUDCEvent(txReceipt) {\n  if (!txReceipt.events) {\n    throw new Error(\"UDC emitted event is empty\");\n  }\n  const event = txReceipt.events.find(\n    (it) => cleanHex(it.from_address) === cleanHex(UDC.ADDRESS)\n  ) || {\n    data: []\n  };\n  return {\n    transaction_hash: txReceipt.transaction_hash,\n    contract_address: event.data[0],\n    address: event.data[0],\n    deployer: event.data[1],\n    unique: event.data[2],\n    classHash: event.data[3],\n    calldata_len: event.data[4],\n    calldata: event.data.slice(5, 5 + parseInt(event.data[4], 16)),\n    salt: event.data[event.data.length - 1]\n  };\n}\n\n// src/account/default.ts\nvar Account = class extends Provider {\n  constructor(providerOrOptions, address, pkOrSigner, cairoVersion) {\n    super(providerOrOptions);\n    this.deploySelf = this.deployAccount;\n    this.address = address.toLowerCase();\n    this.signer = typeof pkOrSigner === \"string\" || pkOrSigner instanceof Uint8Array ? new Signer(pkOrSigner) : pkOrSigner;\n    if (cairoVersion) {\n      this.cairoVersion = cairoVersion.toString();\n    }\n  }\n  async getNonce(blockIdentifier) {\n    return super.getNonceForAddress(this.address, blockIdentifier);\n  }\n  async getNonceSafe(nonce) {\n    try {\n      return toBigInt(nonce ?? await this.getNonce());\n    } catch (error) {\n      return 0n;\n    }\n  }\n  /**\n   * Retrieves the Cairo version from the network and sets `cairoVersion` if not already set in the constructor\n   * @param classHash if provided detects Cairo version from classHash, otherwise from the account address\n   */\n  async getCairoVersion(classHash) {\n    if (!this.cairoVersion) {\n      const { cairo } = classHash ? await super.getContractVersion(void 0, classHash) : await super.getContractVersion(this.address);\n      this.cairoVersion = cairo;\n    }\n    return this.cairoVersion;\n  }\n  async estimateFee(calls, estimateFeeDetails) {\n    return this.estimateInvokeFee(calls, estimateFeeDetails);\n  }\n  async estimateInvokeFee(calls, { nonce: providedNonce, blockIdentifier, skipValidate } = {}) {\n    const transactions = Array.isArray(calls) ? calls : [calls];\n    const nonce = toBigInt(providedNonce ?? await this.getNonce());\n    const version = toBigInt(feeTransactionVersion);\n    const chainId = await this.getChainId();\n    const signerDetails = {\n      walletAddress: this.address,\n      nonce,\n      maxFee: ZERO,\n      version,\n      chainId,\n      cairoVersion: await this.getCairoVersion()\n    };\n    const invocation = await this.buildInvocation(transactions, signerDetails);\n    const response = await super.getInvokeEstimateFee(\n      { ...invocation },\n      { version, nonce },\n      blockIdentifier,\n      skipValidate\n    );\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n    return {\n      ...response,\n      suggestedMaxFee\n    };\n  }\n  async estimateDeclareFee({ contract, classHash: providedClassHash, casm, compiledClassHash }, { blockIdentifier, nonce: providedNonce, skipValidate } = {}) {\n    const nonce = toBigInt(providedNonce ?? await this.getNonce());\n    const version = !isSierra(contract) ? feeTransactionVersion : feeTransactionVersion_2;\n    const chainId = await this.getChainId();\n    const declareContractTransaction = await this.buildDeclarePayload(\n      { classHash: providedClassHash, contract, casm, compiledClassHash },\n      {\n        nonce,\n        chainId,\n        version,\n        walletAddress: this.address,\n        maxFee: ZERO,\n        cairoVersion: void 0\n        // unused parameter\n      }\n    );\n    const response = await super.getDeclareEstimateFee(\n      declareContractTransaction,\n      { version, nonce },\n      blockIdentifier,\n      skipValidate\n    );\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n    return {\n      ...response,\n      suggestedMaxFee\n    };\n  }\n  async estimateAccountDeployFee({\n    classHash,\n    addressSalt = 0,\n    constructorCalldata = [],\n    contractAddress: providedContractAddress\n  }, { blockIdentifier, skipValidate } = {}) {\n    const version = toBigInt(feeTransactionVersion);\n    const nonce = ZERO;\n    const chainId = await this.getChainId();\n    const payload = await this.buildAccountDeployPayload(\n      { classHash, addressSalt, constructorCalldata, contractAddress: providedContractAddress },\n      {\n        nonce,\n        chainId,\n        version,\n        walletAddress: this.address,\n        // unused parameter\n        maxFee: ZERO,\n        cairoVersion: void 0\n        // unused parameter\n      }\n    );\n    const response = await super.getDeployAccountEstimateFee(\n      { ...payload },\n      { version, nonce },\n      blockIdentifier,\n      skipValidate\n    );\n    const suggestedMaxFee = estimatedFeeToMaxFee(response.overall_fee);\n    return {\n      ...response,\n      suggestedMaxFee\n    };\n  }\n  async estimateDeployFee(payload, transactionsDetail) {\n    const calls = this.buildUDCContractPayload(payload);\n    return this.estimateInvokeFee(calls, transactionsDetail);\n  }\n  async estimateFeeBulk(invocations, { nonce, blockIdentifier, skipValidate } = {}) {\n    const accountInvocations = await this.accountInvocationsFactory(invocations, {\n      versions: [feeTransactionVersion, feeTransactionVersion_2],\n      nonce,\n      blockIdentifier\n    });\n    const response = await super.getEstimateFeeBulk(accountInvocations, {\n      blockIdentifier,\n      skipValidate\n    });\n    return [].concat(response).map((elem) => {\n      const suggestedMaxFee = estimatedFeeToMaxFee(elem.overall_fee);\n      return {\n        ...elem,\n        suggestedMaxFee\n      };\n    });\n  }\n  async buildInvocation(call, signerDetails) {\n    const calldata = getExecuteCalldata(call, await this.getCairoVersion());\n    const signature = await this.signer.signTransaction(call, signerDetails);\n    return {\n      contractAddress: this.address,\n      calldata,\n      signature\n    };\n  }\n  async execute(calls, abis = void 0, transactionsDetail = {}) {\n    const transactions = Array.isArray(calls) ? calls : [calls];\n    const nonce = toBigInt(transactionsDetail.nonce ?? await this.getNonce());\n    const maxFee = transactionsDetail.maxFee ?? await this.getSuggestedMaxFee(\n      { type: \"INVOKE_FUNCTION\" /* INVOKE */, payload: calls },\n      transactionsDetail\n    );\n    const version = toBigInt(transactionVersion);\n    const chainId = await this.getChainId();\n    const signerDetails = {\n      walletAddress: this.address,\n      nonce,\n      maxFee,\n      version,\n      chainId,\n      cairoVersion: await this.getCairoVersion()\n    };\n    const signature = await this.signer.signTransaction(transactions, signerDetails, abis);\n    const calldata = getExecuteCalldata(transactions, await this.getCairoVersion());\n    return this.invokeFunction(\n      { contractAddress: this.address, calldata, signature },\n      {\n        nonce,\n        maxFee,\n        version\n      }\n    );\n  }\n  /**\n   * First check if contract is already declared, if not declare it\n   * If contract already declared returned transaction_hash is ''.\n   * Method will pass even if contract is already declared\n   * @param transactionsDetail (optional)\n   */\n  async declareIfNot(payload, transactionsDetail = {}) {\n    const declareContractPayload = extractContractHashes(payload);\n    try {\n      await this.getClassByHash(declareContractPayload.classHash);\n    } catch (error) {\n      return this.declare(payload, transactionsDetail);\n    }\n    return {\n      transaction_hash: \"\",\n      class_hash: declareContractPayload.classHash\n    };\n  }\n  async declare(payload, transactionsDetail = {}) {\n    const declareContractPayload = extractContractHashes(payload);\n    const details = {};\n    details.nonce = toBigInt(transactionsDetail.nonce ?? await this.getNonce());\n    details.maxFee = transactionsDetail.maxFee ?? await this.getSuggestedMaxFee(\n      {\n        type: \"DECLARE\" /* DECLARE */,\n        payload: declareContractPayload\n      },\n      transactionsDetail\n    );\n    details.version = !isSierra(payload.contract) ? transactionVersion : transactionVersion_2;\n    details.chainId = await this.getChainId();\n    const declareContractTransaction = await this.buildDeclarePayload(declareContractPayload, {\n      ...details,\n      walletAddress: this.address,\n      cairoVersion: void 0\n      // unused parameter\n    });\n    return this.declareContract(declareContractTransaction, details);\n  }\n  async deploy(payload, details) {\n    const params = [].concat(payload).map((it) => {\n      const {\n        classHash,\n        salt,\n        unique = true,\n        constructorCalldata = []\n      } = it;\n      const compiledConstructorCallData = CallData.compile(constructorCalldata);\n      const deploySalt = salt ?? randomAddress();\n      return {\n        call: {\n          contractAddress: UDC.ADDRESS,\n          entrypoint: UDC.ENTRYPOINT,\n          calldata: [\n            classHash,\n            deploySalt,\n            toCairoBool(unique),\n            compiledConstructorCallData.length,\n            ...compiledConstructorCallData\n          ]\n        },\n        address: calculateContractAddressFromHash(\n          unique ? _scure_starknet__WEBPACK_IMPORTED_MODULE_2__.pedersen(this.address, deploySalt) : deploySalt,\n          classHash,\n          compiledConstructorCallData,\n          unique ? UDC.ADDRESS : 0\n        )\n      };\n    });\n    const calls = params.map((it) => it.call);\n    const addresses = params.map((it) => it.address);\n    const invokeResponse = await this.execute(calls, void 0, details);\n    return {\n      ...invokeResponse,\n      contract_address: addresses\n    };\n  }\n  async deployContract(payload, details) {\n    const deployTx = await this.deploy(payload, details);\n    const txReceipt = await this.waitForTransaction(deployTx.transaction_hash);\n    return parseUDCEvent(txReceipt);\n  }\n  async declareAndDeploy(payload, details) {\n    const { constructorCalldata, salt, unique } = payload;\n    let declare = await this.declareIfNot(payload, details);\n    if (declare.transaction_hash !== \"\") {\n      const tx = await this.waitForTransaction(declare.transaction_hash);\n      declare = { ...declare, ...tx };\n    }\n    const deploy = await this.deployContract(\n      { classHash: declare.class_hash, salt, unique, constructorCalldata },\n      details\n    );\n    return { declare: { ...declare }, deploy };\n  }\n  async deployAccount({\n    classHash,\n    constructorCalldata = [],\n    addressSalt = 0,\n    contractAddress: providedContractAddress\n  }, transactionsDetail = {}) {\n    const version = toBigInt(transactionVersion);\n    const nonce = ZERO;\n    const chainId = await this.getChainId();\n    const compiledCalldata = CallData.compile(constructorCalldata);\n    const contractAddress = providedContractAddress ?? calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n    const maxFee = transactionsDetail.maxFee ?? await this.getSuggestedMaxFee(\n      {\n        type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n        payload: {\n          classHash,\n          constructorCalldata: compiledCalldata,\n          addressSalt,\n          contractAddress\n        }\n      },\n      transactionsDetail\n    );\n    const signature = await this.signer.signDeployAccountTransaction({\n      classHash,\n      constructorCalldata: compiledCalldata,\n      contractAddress,\n      addressSalt,\n      chainId,\n      maxFee,\n      version,\n      nonce\n    });\n    return this.deployAccountContract(\n      { classHash, addressSalt, constructorCalldata, signature },\n      {\n        nonce,\n        maxFee,\n        version\n      }\n    );\n  }\n  async signMessage(typedData) {\n    return this.signer.signMessage(typedData, this.address);\n  }\n  async hashMessage(typedData) {\n    return getMessageHash(typedData, this.address);\n  }\n  async verifyMessageHash(hash, signature) {\n    try {\n      await this.callContract({\n        contractAddress: this.address,\n        entrypoint: \"isValidSignature\",\n        calldata: CallData.compile({\n          hash: toBigInt(hash).toString(),\n          signature: formatSignature(signature)\n        })\n      });\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  async verifyMessage(typedData, signature) {\n    const hash = await this.hashMessage(typedData);\n    return this.verifyMessageHash(hash, signature);\n  }\n  async getSuggestedMaxFee({ type, payload }, details) {\n    let feeEstimate;\n    switch (type) {\n      case \"INVOKE_FUNCTION\" /* INVOKE */:\n        feeEstimate = await this.estimateInvokeFee(payload, details);\n        break;\n      case \"DECLARE\" /* DECLARE */:\n        feeEstimate = await this.estimateDeclareFee(payload, details);\n        break;\n      case \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */:\n        feeEstimate = await this.estimateAccountDeployFee(payload, details);\n        break;\n      case \"DEPLOY\" /* DEPLOY */:\n        feeEstimate = await this.estimateDeployFee(payload, details);\n        break;\n      default:\n        feeEstimate = { suggestedMaxFee: ZERO, overall_fee: ZERO };\n        break;\n    }\n    return feeEstimate.suggestedMaxFee;\n  }\n  /**\n   * will be renamed to buildDeclareContractTransaction\n   */\n  async buildDeclarePayload(payload, { nonce, chainId, version, walletAddress, maxFee }) {\n    const { classHash, contract, compiledClassHash } = extractContractHashes(payload);\n    const compressedCompiledContract = parseContract(contract);\n    const signature = await this.signer.signDeclareTransaction({\n      classHash,\n      compiledClassHash,\n      senderAddress: walletAddress,\n      chainId,\n      maxFee,\n      version,\n      nonce\n    });\n    return {\n      senderAddress: walletAddress,\n      signature,\n      contract: compressedCompiledContract,\n      compiledClassHash\n    };\n  }\n  async buildAccountDeployPayload({\n    classHash,\n    addressSalt = 0,\n    constructorCalldata = [],\n    contractAddress: providedContractAddress\n  }, { nonce, chainId, version, maxFee }) {\n    const compiledCalldata = CallData.compile(constructorCalldata);\n    const contractAddress = providedContractAddress ?? calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n    const signature = await this.signer.signDeployAccountTransaction({\n      classHash,\n      contractAddress,\n      chainId,\n      maxFee,\n      version,\n      nonce,\n      addressSalt,\n      constructorCalldata: compiledCalldata\n    });\n    return {\n      classHash,\n      addressSalt,\n      constructorCalldata: compiledCalldata,\n      signature\n    };\n  }\n  buildUDCContractPayload(payload) {\n    const calls = [].concat(payload).map((it) => {\n      const {\n        classHash,\n        salt = \"0\",\n        unique = true,\n        constructorCalldata = []\n      } = it;\n      const compiledConstructorCallData = CallData.compile(constructorCalldata);\n      return {\n        contractAddress: UDC.ADDRESS,\n        entrypoint: UDC.ENTRYPOINT,\n        calldata: [\n          classHash,\n          salt,\n          toCairoBool(unique),\n          compiledConstructorCallData.length,\n          ...compiledConstructorCallData\n        ]\n      };\n    });\n    return calls;\n  }\n  async simulateTransaction(invocations, { nonce, blockIdentifier, skipValidate, skipExecute } = {}) {\n    const accountInvocations = await this.accountInvocationsFactory(invocations, {\n      versions: [transactionVersion, transactionVersion_2],\n      nonce,\n      blockIdentifier\n    });\n    return super.getSimulateTransaction(accountInvocations, {\n      blockIdentifier,\n      skipValidate,\n      skipExecute\n    });\n  }\n  async accountInvocationsFactory(invocations, { versions, nonce, blockIdentifier }) {\n    const version = versions[0];\n    const safeNonce = await this.getNonceSafe(nonce);\n    const chainId = await this.getChainId();\n    const tx0Payload = \"payload\" in invocations[0] ? invocations[0].payload : invocations[0];\n    const cairoVersion = invocations[0].type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */ ? await this.getCairoVersion(tx0Payload.classHash) : await this.getCairoVersion();\n    return Promise.all(\n      [].concat(invocations).map(async (transaction, index) => {\n        const txPayload = \"payload\" in transaction ? transaction.payload : transaction;\n        const signerDetails = {\n          walletAddress: this.address,\n          nonce: toBigInt(Number(safeNonce) + index),\n          maxFee: ZERO,\n          version,\n          chainId,\n          cairoVersion\n        };\n        const common = {\n          type: transaction.type,\n          version,\n          nonce: toBigInt(Number(safeNonce) + index),\n          blockIdentifier\n        };\n        if (transaction.type === \"INVOKE_FUNCTION\" /* INVOKE */) {\n          const payload = await this.buildInvocation(\n            [].concat(txPayload),\n            signerDetails\n          );\n          return {\n            ...common,\n            ...payload\n          };\n        }\n        if (transaction.type === \"DECLARE\" /* DECLARE */) {\n          signerDetails.version = !isSierra(txPayload.contract) ? toBigInt(versions[0]) : toBigInt(versions[1]);\n          const payload = await this.buildDeclarePayload(txPayload, signerDetails);\n          return {\n            ...common,\n            ...payload,\n            version: signerDetails.version\n          };\n        }\n        if (transaction.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */) {\n          const payload = await this.buildAccountDeployPayload(txPayload, signerDetails);\n          return {\n            ...common,\n            ...payload\n          };\n        }\n        if (transaction.type === \"DEPLOY\" /* DEPLOY */) {\n          const calls = this.buildUDCContractPayload(txPayload);\n          const payload = await this.buildInvocation(calls, signerDetails);\n          return {\n            ...common,\n            ...payload,\n            type: \"INVOKE_FUNCTION\" /* INVOKE */\n          };\n        }\n        throw Error(`accountInvocationsFactory: unsupported transaction type: ${transaction}`);\n      })\n    );\n  }\n  async getStarkName(address = this.address, StarknetIdContract2) {\n    return super.getStarkName(address, StarknetIdContract2);\n  }\n};\n\n// src/provider/interface.ts\nvar ProviderInterface = class {\n};\n\n// src/provider/index.ts\nvar defaultProvider = new Provider({ rpc: { default: true } });\n\n// src/account/interface.ts\nvar AccountInterface = class extends ProviderInterface {\n};\n\n// src/utils/events/index.ts\nvar events_exports = {};\n__export(events_exports, {\n  getAbiEvents: () => getAbiEvents,\n  parseEvents: () => parseEvents\n});\nfunction getAbiEvents(abi) {\n  return abi.filter((abiEntry) => abiEntry.type === \"event\" && (abiEntry.size || abiEntry.kind !== \"enum\")).reduce((acc, abiEntry) => {\n    const entryName = abiEntry.name.slice(abiEntry.name.lastIndexOf(\":\") + 1);\n    const abiEntryMod = { ...abiEntry };\n    abiEntryMod.name = entryName;\n    return {\n      ...acc,\n      [addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_2__.keccak(utf8ToArray(entryName)).toString(16))]: abiEntryMod\n    };\n  }, {});\n}\nfunction parseEvents(providerReceivedEvents, abiEvents, abiStructs, abiEnums) {\n  const ret = providerReceivedEvents.flat().reduce((acc, recEvent) => {\n    const abiEvent = abiEvents[recEvent.keys[0]];\n    if (!abiEvent) {\n      return acc;\n    }\n    const parsedEvent = {};\n    parsedEvent[abiEvent.name] = {};\n    recEvent.keys.shift();\n    const keysIter = recEvent.keys[Symbol.iterator]();\n    const dataIter = recEvent.data[Symbol.iterator]();\n    const abiEventKeys = abiEvent.members?.filter((it) => it.kind === \"key\") || abiEvent.keys;\n    const abiEventData = abiEvent.members?.filter((it) => it.kind === \"data\") || abiEvent.data;\n    abiEventKeys.forEach((key) => {\n      parsedEvent[abiEvent.name][key.name] = responseParser(\n        keysIter,\n        key,\n        abiStructs,\n        abiEnums,\n        parsedEvent[abiEvent.name]\n      );\n    });\n    abiEventData.forEach((data) => {\n      parsedEvent[abiEvent.name][data.name] = responseParser(\n        dataIter,\n        data,\n        abiStructs,\n        abiEnums,\n        parsedEvent[abiEvent.name]\n      );\n    });\n    acc.push(parsedEvent);\n    return acc;\n  }, []);\n  return ret;\n}\n\n// src/contract/default.ts\nvar splitArgsAndOptions = (args) => {\n  const options = [\n    \"blockIdentifier\",\n    \"parseRequest\",\n    \"parseResponse\",\n    \"formatResponse\",\n    \"maxFee\",\n    \"nonce\",\n    \"signature\",\n    \"addressSalt\"\n  ];\n  const lastArg = args[args.length - 1];\n  if (typeof lastArg === \"object\" && options.some((x) => x in lastArg)) {\n    return { args, options: args.pop() };\n  }\n  return { args };\n};\nfunction buildCall(contract, functionAbi) {\n  return async function(...args) {\n    const params = splitArgsAndOptions(args);\n    return contract.call(functionAbi.name, params.args, {\n      parseRequest: true,\n      parseResponse: true,\n      ...params.options\n    });\n  };\n}\nfunction buildInvoke(contract, functionAbi) {\n  return async function(...args) {\n    const params = splitArgsAndOptions(args);\n    return contract.invoke(functionAbi.name, params.args, {\n      parseRequest: true,\n      ...params.options\n    });\n  };\n}\nfunction buildDefault(contract, functionAbi) {\n  if (functionAbi.stateMutability === \"view\" || functionAbi.state_mutability === \"view\") {\n    return buildCall(contract, functionAbi);\n  }\n  return buildInvoke(contract, functionAbi);\n}\nfunction buildPopulate(contract, functionAbi) {\n  return function(...args) {\n    return contract.populate(functionAbi.name, args);\n  };\n}\nfunction buildEstimate(contract, functionAbi) {\n  return function(...args) {\n    return contract.estimate(functionAbi.name, args);\n  };\n}\nfunction getCalldata(args, callback) {\n  if (Array.isArray(args) && \"__compiled__\" in args)\n    return args;\n  if (Array.isArray(args) && Array.isArray(args[0]) && \"__compiled__\" in args[0])\n    return args[0];\n  return callback();\n}\nvar Contract = class {\n  /**\n   * Contract class to handle contract methods\n   *\n   * @param abi - Abi of the contract object\n   * @param address (optional) - address to connect to\n   * @param providerOrAccount (optional) - Provider or Account to attach to\n   */\n  constructor(abi, address, providerOrAccount = defaultProvider) {\n    this.address = address && address.toLowerCase();\n    this.providerOrAccount = providerOrAccount;\n    this.callData = new CallData(abi);\n    this.structs = CallData.getAbiStruct(abi);\n    this.events = getAbiEvents(abi);\n    const parser = createAbiParser(abi);\n    this.abi = parser.getLegacyFormat();\n    const options = { enumerable: true, value: {}, writable: false };\n    Object.defineProperties(this, {\n      functions: { enumerable: true, value: {}, writable: false },\n      callStatic: { enumerable: true, value: {}, writable: false },\n      populateTransaction: { enumerable: true, value: {}, writable: false },\n      estimateFee: { enumerable: true, value: {}, writable: false }\n    });\n    this.abi.forEach((abiElement) => {\n      if (abiElement.type !== \"function\")\n        return;\n      const signature = abiElement.name;\n      if (!this[signature]) {\n        Object.defineProperty(this, signature, {\n          ...options,\n          value: buildDefault(this, abiElement)\n        });\n      }\n      if (!this.functions[signature]) {\n        Object.defineProperty(this.functions, signature, {\n          ...options,\n          value: buildDefault(this, abiElement)\n        });\n      }\n      if (!this.callStatic[signature]) {\n        Object.defineProperty(this.callStatic, signature, {\n          ...options,\n          value: buildCall(this, abiElement)\n        });\n      }\n      if (!this.populateTransaction[signature]) {\n        Object.defineProperty(this.populateTransaction, signature, {\n          ...options,\n          value: buildPopulate(this, abiElement)\n        });\n      }\n      if (!this.estimateFee[signature]) {\n        Object.defineProperty(this.estimateFee, signature, {\n          ...options,\n          value: buildEstimate(this, abiElement)\n        });\n      }\n    });\n  }\n  attach(address) {\n    this.address = address;\n  }\n  connect(providerOrAccount) {\n    this.providerOrAccount = providerOrAccount;\n  }\n  async deployed() {\n    if (this.deployTransactionHash) {\n      await this.providerOrAccount.waitForTransaction(this.deployTransactionHash);\n      this.deployTransactionHash = void 0;\n    }\n    return this;\n  }\n  async call(method, args = [], {\n    parseRequest = true,\n    parseResponse = true,\n    formatResponse = void 0,\n    blockIdentifier = void 0\n  } = {}) {\n    assert(this.address !== null, \"contract is not connected to an address\");\n    const calldata = getCalldata(args, () => {\n      if (parseRequest) {\n        this.callData.validate(\"CALL\" /* CALL */, method, args);\n        return this.callData.compile(method, args);\n      }\n      console.warn(\"Call skipped parsing but provided rawArgs, possible malfunction request\");\n      return args;\n    });\n    return this.providerOrAccount.callContract(\n      {\n        contractAddress: this.address,\n        calldata,\n        entrypoint: method\n      },\n      blockIdentifier\n    ).then((x) => {\n      if (!parseResponse) {\n        return x.result;\n      }\n      if (formatResponse) {\n        return this.callData.format(method, x.result, formatResponse);\n      }\n      return this.callData.parse(method, x.result);\n    });\n  }\n  invoke(method, args = [], { parseRequest = true, maxFee, nonce, signature } = {}) {\n    assert(this.address !== null, \"contract is not connected to an address\");\n    const calldata = getCalldata(args, () => {\n      if (parseRequest) {\n        this.callData.validate(\"INVOKE\" /* INVOKE */, method, args);\n        return this.callData.compile(method, args);\n      }\n      console.warn(\"Invoke skipped parsing but provided rawArgs, possible malfunction request\");\n      return args;\n    });\n    const invocation = {\n      contractAddress: this.address,\n      calldata,\n      entrypoint: method\n    };\n    if (\"execute\" in this.providerOrAccount) {\n      return this.providerOrAccount.execute(invocation, void 0, {\n        maxFee,\n        nonce\n      });\n    }\n    if (!nonce)\n      throw new Error(`Nonce is required when invoking a function without an account`);\n    console.warn(`Invoking ${method} without an account. This will not work on a public node.`);\n    return this.providerOrAccount.invokeFunction(\n      {\n        ...invocation,\n        signature\n      },\n      {\n        nonce\n      }\n    );\n  }\n  async estimate(method, args = []) {\n    assert(this.address !== null, \"contract is not connected to an address\");\n    if (!getCalldata(args, () => false)) {\n      this.callData.validate(\"INVOKE\" /* INVOKE */, method, args);\n    }\n    const invocation = this.populate(method, args);\n    if (\"estimateInvokeFee\" in this.providerOrAccount) {\n      return this.providerOrAccount.estimateInvokeFee(invocation);\n    }\n    throw Error(\"Contract must be connected to the account contract to estimate\");\n  }\n  populate(method, args = []) {\n    const calldata = getCalldata(args, () => this.callData.compile(method, args));\n    return {\n      contractAddress: this.address,\n      entrypoint: method,\n      calldata\n    };\n  }\n  parseEvents(receipt) {\n    return parseEvents(\n      receipt.events?.filter(\n        (event) => cleanHex(event.from_address) === cleanHex(this.address),\n        []\n      ) || [],\n      this.events,\n      this.structs,\n      CallData.getAbiEnum(this.abi)\n    );\n  }\n  isCairo1() {\n    return cairo_exports.isCairo1Abi(this.abi);\n  }\n  async getVersion() {\n    return this.providerOrAccount.getContractVersion(this.address);\n  }\n  typed(tAbi) {\n    return this;\n  }\n};\n\n// src/contract/interface.ts\nvar ContractInterface = class {\n};\n\n// src/contract/contractFactory.ts\nvar ContractFactory = class {\n  /**\n   * @param params CFParams\n   *  - compiledContract: CompiledContract;\n   *  - account: AccountInterface;\n   *  - casm?: CairoAssembly;\n   *  - classHash?: string;\n   *  - compiledClassHash?: string;\n   *  - abi?: Abi;\n   */\n  constructor(params) {\n    this.compiledContract = params.compiledContract;\n    this.account = params.account;\n    this.casm = params.casm;\n    this.abi = params.abi ?? params.compiledContract.abi;\n    this.classHash = params.classHash;\n    this.compiledClassHash = params.compiledClassHash;\n    this.CallData = new CallData(this.abi);\n  }\n  /**\n   * Deploys contract and returns new instance of the Contract\n   *\n   * If contract is not declared it will first declare it, and then deploy\n   */\n  async deploy(...args) {\n    const { args: param, options = { parseRequest: true } } = splitArgsAndOptions(args);\n    const constructorCalldata = getCalldata(param, () => {\n      if (options.parseRequest) {\n        this.CallData.validate(\"DEPLOY\" /* DEPLOY */, \"constructor\", param);\n        return this.CallData.compile(\"constructor\", param);\n      }\n      console.warn(\"Call skipped parsing but provided rawArgs, possible malfunction request\");\n      return param;\n    });\n    const {\n      deploy: { contract_address, transaction_hash }\n    } = await this.account.declareAndDeploy({\n      contract: this.compiledContract,\n      casm: this.casm,\n      classHash: this.classHash,\n      compiledClassHash: this.compiledClassHash,\n      constructorCalldata,\n      salt: options.addressSalt\n    });\n    assert(Boolean(contract_address), \"Deployment of the contract failed\");\n    const contractInstance = new Contract(\n      this.compiledContract.abi,\n      contract_address,\n      this.account\n    );\n    contractInstance.deployTransactionHash = transaction_hash;\n    return contractInstance;\n  }\n  /**\n   * Attaches to new Account\n   *\n   * @param account - new Account to attach to\n   */\n  connect(account) {\n    this.account = account;\n    return this;\n  }\n  /**\n   * Attaches current abi and account to the new address\n   */\n  attach(address) {\n    return new Contract(this.abi, address, this.account);\n  }\n  // ethers.js' getDeployTransaction cant be supported as it requires the account or signer to return a signed transaction which is not possible with the current implementation\n};\n\n// src/utils/address.ts\n\nfunction addAddressPadding(address) {\n  return addHexPrefix(removeHexPrefix(toHex(address)).padStart(64, \"0\"));\n}\nfunction validateAndParseAddress(address) {\n  assertInRange(address, ZERO, ADDR_BOUND - 1n, \"Starknet Address\");\n  const result = addAddressPadding(address);\n  if (!result.match(/^(0x)?[0-9a-fA-F]{64}$/)) {\n    throw new Error(\"Invalid Address Format\");\n  }\n  return result;\n}\nfunction getChecksumAddress(address) {\n  const chars = removeHexPrefix(validateAndParseAddress(address)).toLowerCase().split(\"\");\n  const hex = removeHexPrefix(keccakBn(address));\n  const hashed = (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_1__.hexToBytes)(hex.padStart(64, \"0\"));\n  for (let i = 0; i < chars.length; i += 2) {\n    if (hashed[i >> 1] >> 4 >= 8) {\n      chars[i] = chars[i].toUpperCase();\n    }\n    if ((hashed[i >> 1] & 15) >= 8) {\n      chars[i + 1] = chars[i + 1].toUpperCase();\n    }\n  }\n  return addHexPrefix(chars.join(\"\"));\n}\nfunction validateChecksumAddress(address) {\n  return getChecksumAddress(address) === address;\n}\n\n// src/index.ts\nvar number = num_exports;\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/LosslessNumber.js":
/*!************************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/LosslessNumber.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LosslessNumber: () => (/* binding */ LosslessNumber),\n/* harmony export */   isLosslessNumber: () => (/* binding */ isLosslessNumber),\n/* harmony export */   toLosslessNumber: () => (/* binding */ toLosslessNumber)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n/**\n * A lossless number. Stores its numeric value as string\n */\nvar LosslessNumber = /*#__PURE__*/function () {\n  function LosslessNumber(value) {\n    _classCallCheck(this, LosslessNumber);\n    // numeric value as string\n    // type information\n    _defineProperty(this, \"isLosslessNumber\", true);\n    if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(value)) {\n      throw new Error('Invalid number (value: \"' + value + '\")');\n    }\n    this.value = value;\n  }\n\n  /**\n   * Get the value of the LosslessNumber as number or bigint.\n   *\n   * - a number is returned for safe numbers and decimal values that only lose some insignificant digits\n   * - a bigint is returned for big integer numbers\n   * - an Error is thrown for values that will overflow or underflow\n   *\n   * Note that you can implement your own strategy for conversion by just getting the value as string\n   * via .toString(), and using util functions like isInteger, isSafeNumber, getUnsafeNumberReason,\n   * and toSafeNumberOrThrow to convert it to a numeric value.\n   */\n  _createClass(LosslessNumber, [{\n    key: \"valueOf\",\n    value: function valueOf() {\n      var unsafeReason = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getUnsafeNumberReason)(this.value);\n\n      // safe or truncate_float\n      if (unsafeReason === undefined || unsafeReason === _utils_js__WEBPACK_IMPORTED_MODULE_0__.UnsafeNumberReason.truncate_float) {\n        return parseFloat(this.value);\n      }\n\n      // truncate_integer\n      if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(this.value)) {\n        return BigInt(this.value);\n      }\n\n      // overflow or underflow\n      throw new Error('Cannot safely convert to number: ' + \"the value '\".concat(this.value, \"' would \").concat(unsafeReason, \" and become \").concat(parseFloat(this.value)));\n    }\n\n    /**\n     * Get the value of the LosslessNumber as string.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.value;\n    }\n\n    // Note: we do NOT implement a .toJSON() method, and you should not implement\n    // or use that, it cannot safely turn the numeric value in the string into\n    // stringified JSON since it has to be parsed into a number first.\n  }]);\n  return LosslessNumber;\n}();\n\n/**\n * Test whether a value is a LosslessNumber\n */\nfunction isLosslessNumber(value) {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return value && _typeof(value) === 'object' && value.isLosslessNumber === true || false;\n}\n\n/**\n * Convert a number into a LosslessNumber if this is possible in a safe way\n * If the value has too many digits, or is NaN or Infinity, an error will be thrown\n */\nfunction toLosslessNumber(value) {\n  if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.extractSignificantDigits)(value + '').length > 15) {\n    throw new Error('Invalid number: contains more than 15 digits and is most likely truncated and unsafe by itself ' + \"(value: \".concat(value, \")\"));\n  }\n  if (isNaN(value)) {\n    throw new Error('Invalid number: NaN');\n  }\n  if (!isFinite(value)) {\n    throw new Error('Invalid number: ' + value);\n  }\n  return new LosslessNumber(String(value));\n}\n//# sourceMappingURL=LosslessNumber.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/LosslessNumber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/config.js":
/*!****************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/config.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config)\n/* harmony export */ });\n/**\n * Get and/or set configuration options\n * @deprecated There is no config anymore\n */ // eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction config(options) {\n  // Backward compatibility warning for v1.x\n  throw new Error('config is deprecated, support for circularRefs is removed from the library. ' + 'If you encounter circular references in your data structures, ' + 'please rethink your datastructures: ' + 'better prevent circular references in the first place.');\n}\n//# sourceMappingURL=config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9jb25maWcuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bzcy0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9zdGFya25ldC9ub2RlX21vZHVsZXMvbG9zc2xlc3MtanNvbi9saWIvZXNtL2NvbmZpZy5qcz83ZjNiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2V0IGFuZC9vciBzZXQgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gKiBAZGVwcmVjYXRlZCBUaGVyZSBpcyBubyBjb25maWcgYW55bW9yZVxuICovIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmV4cG9ydCBmdW5jdGlvbiBjb25maWcob3B0aW9ucykge1xuICAvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdhcm5pbmcgZm9yIHYxLnhcbiAgdGhyb3cgbmV3IEVycm9yKCdjb25maWcgaXMgZGVwcmVjYXRlZCwgc3VwcG9ydCBmb3IgY2lyY3VsYXJSZWZzIGlzIHJlbW92ZWQgZnJvbSB0aGUgbGlicmFyeS4gJyArICdJZiB5b3UgZW5jb3VudGVyIGNpcmN1bGFyIHJlZmVyZW5jZXMgaW4geW91ciBkYXRhIHN0cnVjdHVyZXMsICcgKyAncGxlYXNlIHJldGhpbmsgeW91ciBkYXRhc3RydWN0dXJlczogJyArICdiZXR0ZXIgcHJldmVudCBjaXJjdWxhciByZWZlcmVuY2VzIGluIHRoZSBmaXJzdCBwbGFjZS4nKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LosslessNumber: () => (/* reexport safe */ _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_3__.LosslessNumber),\n/* harmony export */   UnsafeNumberReason: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.UnsafeNumberReason),\n/* harmony export */   config: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_0__.config),\n/* harmony export */   getUnsafeNumberReason: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.getUnsafeNumberReason),\n/* harmony export */   isInteger: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.isInteger),\n/* harmony export */   isLosslessNumber: () => (/* reexport safe */ _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_3__.isLosslessNumber),\n/* harmony export */   isNumber: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.isNumber),\n/* harmony export */   isSafeNumber: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.isSafeNumber),\n/* harmony export */   parse: () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_1__.parse),\n/* harmony export */   parseLosslessNumber: () => (/* reexport safe */ _numberParsers_js__WEBPACK_IMPORTED_MODULE_5__.parseLosslessNumber),\n/* harmony export */   parseNumberAndBigInt: () => (/* reexport safe */ _numberParsers_js__WEBPACK_IMPORTED_MODULE_5__.parseNumberAndBigInt),\n/* harmony export */   reviveDate: () => (/* reexport safe */ _reviveDate_js__WEBPACK_IMPORTED_MODULE_4__.reviveDate),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_2__.stringify),\n/* harmony export */   toLosslessNumber: () => (/* reexport safe */ _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_3__.toLosslessNumber),\n/* harmony export */   toSafeNumberOrThrow: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.toSafeNumberOrThrow)\n/* harmony export */ });\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/config.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/parse.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/stringify.js\");\n/* harmony import */ var _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LosslessNumber.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/LosslessNumber.js\");\n/* harmony import */ var _reviveDate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./reviveDate.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/reviveDate.js\");\n/* harmony import */ var _numberParsers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./numberParsers.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/numberParsers.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/types.js\");\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFxQztBQUNGO0FBQ1E7QUFDOEM7QUFDNUM7QUFDa0M7QUFDZ0Q7QUFDcEc7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac3MtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9pbmRleC5qcz9hMTM2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnLmpzJztcbmV4cG9ydCB7IHBhcnNlIH0gZnJvbSAnLi9wYXJzZS5qcyc7XG5leHBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5leHBvcnQgeyBMb3NzbGVzc051bWJlciwgaXNMb3NzbGVzc051bWJlciwgdG9Mb3NzbGVzc051bWJlciB9IGZyb20gJy4vTG9zc2xlc3NOdW1iZXIuanMnO1xuZXhwb3J0IHsgcmV2aXZlRGF0ZSB9IGZyb20gJy4vcmV2aXZlRGF0ZS5qcyc7XG5leHBvcnQgeyBwYXJzZUxvc3NsZXNzTnVtYmVyLCBwYXJzZU51bWJlckFuZEJpZ0ludCB9IGZyb20gJy4vbnVtYmVyUGFyc2Vycy5qcyc7XG5leHBvcnQgeyBVbnNhZmVOdW1iZXJSZWFzb24sIGlzSW50ZWdlciwgaXNOdW1iZXIsIGlzU2FmZU51bWJlciwgdG9TYWZlTnVtYmVyT3JUaHJvdywgZ2V0VW5zYWZlTnVtYmVyUmVhc29uIH0gZnJvbSAnLi91dGlscy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzLmpzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/numberParsers.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/numberParsers.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseLosslessNumber: () => (/* binding */ parseLosslessNumber),\n/* harmony export */   parseNumberAndBigInt: () => (/* binding */ parseNumberAndBigInt)\n/* harmony export */ });\n/* harmony import */ var _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LosslessNumber.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/LosslessNumber.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js\");\n\n\nfunction parseLosslessNumber(value) {\n  return new _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_0__.LosslessNumber(value);\n}\nfunction parseNumberAndBigInt(value) {\n  return (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isInteger)(value) ? BigInt(value) : parseFloat(value);\n}\n//# sourceMappingURL=numberParsers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9udW1iZXJQYXJzZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBcUQ7QUFDZDtBQUNoQztBQUNQLGFBQWEsOERBQWM7QUFDM0I7QUFDTztBQUNQLFNBQVMsb0RBQVM7QUFDbEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bzcy0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9zdGFya25ldC9ub2RlX21vZHVsZXMvbG9zc2xlc3MtanNvbi9saWIvZXNtL251bWJlclBhcnNlcnMuanM/MjgzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb3NzbGVzc051bWJlciB9IGZyb20gJy4vTG9zc2xlc3NOdW1iZXIuanMnO1xuaW1wb3J0IHsgaXNJbnRlZ2VyIH0gZnJvbSAnLi91dGlscy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VMb3NzbGVzc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gbmV3IExvc3NsZXNzTnVtYmVyKHZhbHVlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU51bWJlckFuZEJpZ0ludCh2YWx1ZSkge1xuICByZXR1cm4gaXNJbnRlZ2VyKHZhbHVlKSA/IEJpZ0ludCh2YWx1ZSkgOiBwYXJzZUZsb2F0KHZhbHVlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW51bWJlclBhcnNlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/numberParsers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/parse.js":
/*!***************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/parse.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   codeLowercaseA: () => (/* binding */ codeLowercaseA),\n/* harmony export */   codeLowercaseE: () => (/* binding */ codeLowercaseE),\n/* harmony export */   codeLowercaseF: () => (/* binding */ codeLowercaseF),\n/* harmony export */   codeUppercaseA: () => (/* binding */ codeUppercaseA),\n/* harmony export */   codeUppercaseE: () => (/* binding */ codeUppercaseE),\n/* harmony export */   codeUppercaseF: () => (/* binding */ codeUppercaseF),\n/* harmony export */   isDeepEqual: () => (/* binding */ isDeepEqual),\n/* harmony export */   isValidStringCharacter: () => (/* binding */ isValidStringCharacter),\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var _numberParsers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./numberParsers.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/numberParsers.js\");\n/* harmony import */ var _revive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./revive.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/revive.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n/**\n * The LosslessJSON.parse() method parses a string as JSON, optionally transforming\n * the value produced by parsing.\n *\n * The parser is based on the parser of Tan Li Hou shared in\n * https://lihautan.com/json-parser-with-javascript/\n *\n * @param text\n * The string to parse as JSON. See the JSON object for a description of JSON syntax.\n *\n * @param [reviver]\n * If a function, prescribes how the value originally produced by parsing is\n * transformed, before being returned.\n *\n * @param [parseNumber=parseLosslessNumber]\n * Pass a custom number parser. Input is a string, and the output can be unknown\n * numeric value: number, bigint, LosslessNumber, or a custom BigNumber library.\n *\n * @returns Returns the Object corresponding to the given JSON text.\n *\n * @throws Throws a SyntaxError exception if the string to parse is not valid JSON.\n */\nfunction parse(text, reviver) {\n  var parseNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _numberParsers_js__WEBPACK_IMPORTED_MODULE_0__.parseLosslessNumber;\n  var i = 0;\n  var value = parseValue();\n  expectValue(value);\n  expectEndOfInput();\n  return reviver ? (0,_revive_js__WEBPACK_IMPORTED_MODULE_1__.revive)(value, reviver) : value;\n  function parseObject() {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      i++;\n      skipWhitespace();\n      var object = {};\n      var initial = true;\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        if (!initial) {\n          eatComma();\n          skipWhitespace();\n        } else {\n          initial = false;\n        }\n        var start = i;\n        var key = parseString();\n        if (key === undefined) {\n          throwObjectKeyExpected();\n        }\n        skipWhitespace();\n        eatColon();\n        var _value = parseValue();\n        if (_value === undefined) {\n          throwObjectValueExpected();\n        }\n\n        // TODO: test deep equal instead of strict equal\n        if (Object.prototype.hasOwnProperty.call(object, key) && !isDeepEqual(_value, object[key])) {\n          // Note that we could also test `if(key in object) {...}`\n          // or `if (object[key] !== 'undefined') {...}`, but that is slower.\n          throwDuplicateKey(key, start + 1);\n        }\n        object[key] = _value;\n      }\n      if (text.charCodeAt(i) !== codeClosingBrace) {\n        throwObjectKeyOrEndExpected();\n      }\n      i++;\n      return object;\n    }\n  }\n  function parseArray() {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      i++;\n      skipWhitespace();\n      var array = [];\n      var initial = true;\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          eatComma();\n        } else {\n          initial = false;\n        }\n        var _value2 = parseValue();\n        expectArrayItem(_value2);\n        array.push(_value2);\n      }\n      if (text.charCodeAt(i) !== codeClosingBracket) {\n        throwArrayItemOrEndExpected();\n      }\n      i++;\n      return array;\n    }\n  }\n  function parseValue() {\n    var _ref, _ref2, _ref3, _ref4, _ref5, _parseString;\n    skipWhitespace();\n    var value = (_ref = (_ref2 = (_ref3 = (_ref4 = (_ref5 = (_parseString = parseString()) !== null && _parseString !== void 0 ? _parseString : parseNumeric()) !== null && _ref5 !== void 0 ? _ref5 : parseObject()) !== null && _ref4 !== void 0 ? _ref4 : parseArray()) !== null && _ref3 !== void 0 ? _ref3 : parseKeyword('true', true)) !== null && _ref2 !== void 0 ? _ref2 : parseKeyword('false', false)) !== null && _ref !== void 0 ? _ref : parseKeyword('null', null);\n    skipWhitespace();\n    return value;\n  }\n  function parseKeyword(name, value) {\n    if (text.slice(i, i + name.length) === name) {\n      i += name.length;\n      return value;\n    }\n  }\n  function skipWhitespace() {\n    while (isWhitespace(text.charCodeAt(i))) {\n      i++;\n    }\n  }\n  function parseString() {\n    if (text.charCodeAt(i) === codeDoubleQuote) {\n      i++;\n      var result = '';\n      while (i < text.length && text.charCodeAt(i) !== codeDoubleQuote) {\n        if (text.charCodeAt(i) === codeBackslash) {\n          var char = text[i + 1];\n          var escapeChar = escapeCharacters[char];\n          if (escapeChar !== undefined) {\n            result += escapeChar;\n            i++;\n          } else if (char === 'u') {\n            if (isHex(text.charCodeAt(i + 2)) && isHex(text.charCodeAt(i + 3)) && isHex(text.charCodeAt(i + 4)) && isHex(text.charCodeAt(i + 5))) {\n              result += String.fromCharCode(parseInt(text.slice(i + 2, i + 6), 16));\n              i += 5;\n            } else {\n              throwInvalidUnicodeCharacter(i);\n            }\n          } else {\n            throwInvalidEscapeCharacter(i);\n          }\n        } else {\n          if (isValidStringCharacter(text.charCodeAt(i))) {\n            result += text[i];\n          } else {\n            throwInvalidCharacter(text[i]);\n          }\n        }\n        i++;\n      }\n      expectEndOfString();\n      i++;\n      return result;\n    }\n  }\n  function parseNumeric() {\n    var start = i;\n    if (text.charCodeAt(i) === codeMinus) {\n      i++;\n      expectDigit(start);\n    }\n    if (text.charCodeAt(i) === codeZero) {\n      i++;\n    } else if (isNonZeroDigit(text.charCodeAt(i))) {\n      i++;\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (text.charCodeAt(i) === codeDot) {\n      i++;\n      expectDigit(start);\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++;\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++;\n      }\n      expectDigit(start);\n      while (isDigit(text.charCodeAt(i))) {\n        i++;\n      }\n    }\n    if (i > start) {\n      return parseNumber(text.slice(start, i));\n    }\n  }\n  function eatComma() {\n    if (text.charCodeAt(i) !== codeComma) {\n      throw new SyntaxError(\"Comma ',' expected after value \".concat(gotAt()));\n    }\n    i++;\n  }\n  function eatColon() {\n    if (text.charCodeAt(i) !== codeColon) {\n      throw new SyntaxError(\"Colon ':' expected after property name \".concat(gotAt()));\n    }\n    i++;\n  }\n  function expectValue(value) {\n    if (value === undefined) {\n      throw new SyntaxError(\"JSON value expected \".concat(gotAt()));\n    }\n  }\n  function expectArrayItem(value) {\n    if (value === undefined) {\n      throw new SyntaxError(\"Array item expected \".concat(gotAt()));\n    }\n  }\n  function expectEndOfInput() {\n    if (i < text.length) {\n      throw new SyntaxError(\"Expected end of input \".concat(gotAt()));\n    }\n  }\n  function expectDigit(start) {\n    if (!isDigit(text.charCodeAt(i))) {\n      var numSoFar = text.slice(start, i);\n      throw new SyntaxError(\"Invalid number '\".concat(numSoFar, \"', expecting a digit \").concat(gotAt()));\n    }\n  }\n  function expectEndOfString() {\n    if (text.charCodeAt(i) !== codeDoubleQuote) {\n      throw new SyntaxError(\"End of string '\\\"' expected \".concat(gotAt()));\n    }\n  }\n  function throwObjectKeyExpected() {\n    throw new SyntaxError(\"Quoted object key expected \".concat(gotAt()));\n  }\n  function throwDuplicateKey(key, pos) {\n    throw new SyntaxError(\"Duplicate key '\".concat(key, \"' encountered at position \").concat(pos));\n  }\n  function throwObjectKeyOrEndExpected() {\n    throw new SyntaxError(\"Quoted object key or end of object '}' expected \".concat(gotAt()));\n  }\n  function throwArrayItemOrEndExpected() {\n    throw new SyntaxError(\"Array item or end of array ']' expected \".concat(gotAt()));\n  }\n  function throwInvalidCharacter(char) {\n    throw new SyntaxError(\"Invalid character '\".concat(char, \"' \").concat(pos()));\n  }\n  function throwInvalidEscapeCharacter(start) {\n    var chars = text.slice(start, start + 2);\n    throw new SyntaxError(\"Invalid escape character '\".concat(chars, \"' \").concat(pos()));\n  }\n  function throwObjectValueExpected() {\n    throw new SyntaxError(\"Object value expected after ':' \".concat(pos()));\n  }\n  function throwInvalidUnicodeCharacter(start) {\n    var end = start + 2;\n    while (/\\w/.test(text[end])) {\n      end++;\n    }\n    var chars = text.slice(start, end);\n    throw new SyntaxError(\"Invalid unicode character '\".concat(chars, \"' \").concat(pos()));\n  }\n\n  // zero based character position\n  function pos() {\n    return \"at position \".concat(i);\n  }\n  function got() {\n    return i < text.length ? \"but got '\".concat(text[i], \"'\") : 'but reached end of input';\n  }\n  function gotAt() {\n    return got() + ' ' + pos();\n  }\n}\nfunction isWhitespace(code) {\n  return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn;\n}\nfunction isHex(code) {\n  return code >= codeZero && code <= codeNine || code >= codeUppercaseA && code <= codeUppercaseF || code >= codeLowercaseA && code <= codeLowercaseF;\n}\nfunction isDigit(code) {\n  return code >= codeZero && code <= codeNine;\n}\nfunction isNonZeroDigit(code) {\n  return code >= codeOne && code <= codeNine;\n}\nfunction isValidStringCharacter(code) {\n  return code >= 0x20 && code <= 0x10ffff;\n}\nfunction isDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every(function (item, index) {\n      return isDeepEqual(item, b[index]);\n    });\n  }\n  if (isObject(a) && isObject(b)) {\n    var keys = _toConsumableArray(new Set([].concat(_toConsumableArray(Object.keys(a)), _toConsumableArray(Object.keys(b)))));\n    return keys.every(function (key) {\n      return isDeepEqual(a[key], b[key]);\n    });\n  }\n  return false;\n}\nfunction isObject(value) {\n  return _typeof(value) === 'object' && value !== null;\n}\n\n// map with all escape characters\nvar escapeCharacters = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n};\n\nvar codeBackslash = 0x5c; // \"\\\"\nvar codeOpeningBrace = 0x7b; // \"{\"\nvar codeClosingBrace = 0x7d; // \"}\"\nvar codeOpeningBracket = 0x5b; // \"[\"\nvar codeClosingBracket = 0x5d; // \"]\"\nvar codeSpace = 0x20; // \" \"\nvar codeNewline = 0xa; // \"\\n\"\nvar codeTab = 0x9; // \"\\t\"\nvar codeReturn = 0xd; // \"\\r\"\nvar codeDoubleQuote = 0x0022; // \"\nvar codePlus = 0x2b; // \"+\"\nvar codeMinus = 0x2d; // \"-\"\nvar codeZero = 0x30;\nvar codeOne = 0x31;\nvar codeNine = 0x39;\nvar codeComma = 0x2c; // \",\"\nvar codeDot = 0x2e; // \".\" (dot, period)\nvar codeColon = 0x3a; // \":\"\nvar codeUppercaseA = 0x41; // \"A\"\nvar codeLowercaseA = 0x61; // \"a\"\nvar codeUppercaseE = 0x45; // \"E\"\nvar codeLowercaseE = 0x65; // \"e\"\nvar codeUppercaseF = 0x46; // \"F\"\nvar codeLowercaseF = 0x66; // \"f\"\n//# sourceMappingURL=parse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/revive.js":
/*!****************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/revive.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   revive: () => (/* binding */ revive)\n/* harmony export */ });\n/* harmony import */ var _LosslessNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LosslessNumber.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/LosslessNumber.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/**\n * Revive a json object.\n * Applies the reviver function recursively on all values in the JSON object.\n * @param json   A JSON Object, Array, or value\n * @param reviver\n *              A reviver function invoked with arguments `key` and `value`,\n *              which must return a replacement value. The function context\n *              (`this`) is the Object or Array that contains the currently\n *              handled value.\n */\nfunction revive(json, reviver) {\n  return reviveValue({\n    '': json\n  }, '', json, reviver);\n}\n\n/**\n * Revive a value\n */\nfunction reviveValue(context, key, value, reviver) {\n  if (Array.isArray(value)) {\n    return reviver.call(context, key, reviveArray(value, reviver));\n  } else if (value && _typeof(value) === 'object' && !(0,_LosslessNumber_js__WEBPACK_IMPORTED_MODULE_0__.isLosslessNumber)(value)) {\n    // note the special case for LosslessNumber,\n    // we don't want to iterate over the internals of a LosslessNumber\n    return reviver.call(context, key, reviveObject(value, reviver));\n  } else {\n    return reviver.call(context, key, value);\n  }\n}\n\n/**\n * Revive the properties of an object\n */\nfunction reviveObject(object, reviver) {\n  Object.keys(object).forEach(function (key) {\n    var value = reviveValue(object, key, object[key], reviver);\n    if (value !== undefined) {\n      object[key] = value;\n    } else {\n      delete object[key];\n    }\n  });\n  return object;\n}\n\n/**\n * Revive the properties of an Array\n */\nfunction reviveArray(array, reviver) {\n  for (var i = 0; i < array.length; i++) {\n    array[i] = reviveValue(array, i + '', array[i], reviver);\n  }\n  return array;\n}\n//# sourceMappingURL=revive.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9yZXZpdmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3QkFBd0IsMkJBQTJCLHNHQUFzRyxxQkFBcUIsbUJBQW1CLDhIQUE4SDtBQUN4UTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGtEQUFrRCxvRUFBZ0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0Bzcy0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9zdGFya25ldC9ub2RlX21vZHVsZXMvbG9zc2xlc3MtanNvbi9saWIvZXNtL3Jldml2ZS5qcz80YThjIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cbmltcG9ydCB7IGlzTG9zc2xlc3NOdW1iZXIgfSBmcm9tICcuL0xvc3NsZXNzTnVtYmVyLmpzJztcbi8qKlxuICogUmV2aXZlIGEganNvbiBvYmplY3QuXG4gKiBBcHBsaWVzIHRoZSByZXZpdmVyIGZ1bmN0aW9uIHJlY3Vyc2l2ZWx5IG9uIGFsbCB2YWx1ZXMgaW4gdGhlIEpTT04gb2JqZWN0LlxuICogQHBhcmFtIGpzb24gICBBIEpTT04gT2JqZWN0LCBBcnJheSwgb3IgdmFsdWVcbiAqIEBwYXJhbSByZXZpdmVyXG4gKiAgICAgICAgICAgICAgQSByZXZpdmVyIGZ1bmN0aW9uIGludm9rZWQgd2l0aCBhcmd1bWVudHMgYGtleWAgYW5kIGB2YWx1ZWAsXG4gKiAgICAgICAgICAgICAgd2hpY2ggbXVzdCByZXR1cm4gYSByZXBsYWNlbWVudCB2YWx1ZS4gVGhlIGZ1bmN0aW9uIGNvbnRleHRcbiAqICAgICAgICAgICAgICAoYHRoaXNgKSBpcyB0aGUgT2JqZWN0IG9yIEFycmF5IHRoYXQgY29udGFpbnMgdGhlIGN1cnJlbnRseVxuICogICAgICAgICAgICAgIGhhbmRsZWQgdmFsdWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXZpdmUoanNvbiwgcmV2aXZlcikge1xuICByZXR1cm4gcmV2aXZlVmFsdWUoe1xuICAgICcnOiBqc29uXG4gIH0sICcnLCBqc29uLCByZXZpdmVyKTtcbn1cblxuLyoqXG4gKiBSZXZpdmUgYSB2YWx1ZVxuICovXG5mdW5jdGlvbiByZXZpdmVWYWx1ZShjb250ZXh0LCBrZXksIHZhbHVlLCByZXZpdmVyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiByZXZpdmVyLmNhbGwoY29udGV4dCwga2V5LCByZXZpdmVBcnJheSh2YWx1ZSwgcmV2aXZlcikpO1xuICB9IGVsc2UgaWYgKHZhbHVlICYmIF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyAmJiAhaXNMb3NzbGVzc051bWJlcih2YWx1ZSkpIHtcbiAgICAvLyBub3RlIHRoZSBzcGVjaWFsIGNhc2UgZm9yIExvc3NsZXNzTnVtYmVyLFxuICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gaXRlcmF0ZSBvdmVyIHRoZSBpbnRlcm5hbHMgb2YgYSBMb3NzbGVzc051bWJlclxuICAgIHJldHVybiByZXZpdmVyLmNhbGwoY29udGV4dCwga2V5LCByZXZpdmVPYmplY3QodmFsdWUsIHJldml2ZXIpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmV2aXZlci5jYWxsKGNvbnRleHQsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogUmV2aXZlIHRoZSBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdFxuICovXG5mdW5jdGlvbiByZXZpdmVPYmplY3Qob2JqZWN0LCByZXZpdmVyKSB7XG4gIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHZhbHVlID0gcmV2aXZlVmFsdWUob2JqZWN0LCBrZXksIG9iamVjdFtrZXldLCByZXZpdmVyKTtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIG9iamVjdFtrZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbi8qKlxuICogUmV2aXZlIHRoZSBwcm9wZXJ0aWVzIG9mIGFuIEFycmF5XG4gKi9cbmZ1bmN0aW9uIHJldml2ZUFycmF5KGFycmF5LCByZXZpdmVyKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICBhcnJheVtpXSA9IHJldml2ZVZhbHVlKGFycmF5LCBpICsgJycsIGFycmF5W2ldLCByZXZpdmVyKTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXZpdmUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/revive.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/reviveDate.js":
/*!********************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/reviveDate.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   reviveDate: () => (/* binding */ reviveDate)\n/* harmony export */ });\n/**\n * Revive a string containing an ISO 8601 date string into a JavaScript `Date` object\n */\nfunction reviveDate(key, value) {\n  return typeof value === 'string' && isoDateRegex.test(value) ? new Date(value) : value;\n}\n\n// Matches strings like \"2022-08-25T09:39:19.288Z\"\nvar isoDateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\n//# sourceMappingURL=reviveDate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS9yZXZpdmVEYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRTtBQUMvRCIsInNvdXJjZXMiOlsid2VicGFjazovL0Bzcy0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9zdGFya25ldC9ub2RlX21vZHVsZXMvbG9zc2xlc3MtanNvbi9saWIvZXNtL3Jldml2ZURhdGUuanM/OTU1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJldml2ZSBhIHN0cmluZyBjb250YWluaW5nIGFuIElTTyA4NjAxIGRhdGUgc3RyaW5nIGludG8gYSBKYXZhU2NyaXB0IGBEYXRlYCBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJldml2ZURhdGUoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiBpc29EYXRlUmVnZXgudGVzdCh2YWx1ZSkgPyBuZXcgRGF0ZSh2YWx1ZSkgOiB2YWx1ZTtcbn1cblxuLy8gTWF0Y2hlcyBzdHJpbmdzIGxpa2UgXCIyMDIyLTA4LTI1VDA5OjM5OjE5LjI4OFpcIlxudmFyIGlzb0RhdGVSZWdleCA9IC9eXFxkezR9LVxcZHsyfS1cXGR7Mn1UXFxkezJ9OlxcZHsyfTpcXGR7Mn1cXC5cXGR7M31aJC87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXZpdmVEYXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/reviveDate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/stringify.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/stringify.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringify: () => (/* binding */ stringify)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n\n/**\n * The LosslessJSON.stringify() method converts a JavaScript value to a JSON string,\n * optionally replacing values if a replacer function is specified, or\n * optionally including only the specified properties if a replacer array is specified.\n *\n * @param value\n * The value to convert to a JSON string.\n *\n * @param [replacer]\n * A function that alters the behavior of the stringification process,\n * or an array of String and Number objects that serve as a whitelist for\n * selecting the properties of the value object to be included in the JSON string.\n * If this value is null or not provided, all properties of the object are\n * included in the resulting JSON string.\n *\n * @param [space]\n * A String or Number object that's used to insert white space into the output\n * JSON string for readability purposes. If this is a Number, it indicates the\n * number of space characters to use as white space; this number is capped at 10\n * if it's larger than that. Values less than 1 indicate that no space should be\n * used. If this is a String, the string (or the first 10 characters of the string,\n * if it's longer than that) is used as white space. If this parameter is not\n * provided (or is null), no white space is used.\n *\n * @param [numberStringifiers]\n * An optional list with additional number stringifiers, for example to serialize\n * a BigNumber. The output of the function must be valid stringified JSON.\n * When `undefined` is returned, the property will be deleted from the object.\n * The difference with using a `replacer` is that the output of a `replacer`\n * must be JSON and will be stringified afterwards, whereas the output of the\n * `numberStringifiers` is already stringified JSON.\n *\n * @returns Returns the string representation of the JSON object.\n */\nfunction stringify(value, replacer, space, numberStringifiers) {\n  var resolvedSpace = resolveSpace(space);\n  var replacedValue = typeof replacer === 'function' ? replacer.call({\n    '': value\n  }, '', value) : value;\n  return stringifyValue(replacedValue, '');\n\n  /**\n   * Stringify a value\n   */\n  function stringifyValue(value, indent) {\n    if (Array.isArray(numberStringifiers)) {\n      var stringifier = numberStringifiers.find(function (item) {\n        return item.test(value);\n      });\n      if (stringifier) {\n        var str = stringifier.stringify(value);\n        if (typeof str !== 'string' || !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isNumber)(str)) {\n          throw new Error('Invalid JSON number: ' + 'output of a number stringifier must be a string containing a JSON number ' + \"(output: \".concat(str, \")\"));\n        }\n        return str;\n      }\n    }\n\n    // boolean, null, number, string, or date\n    if (typeof value === 'boolean' || typeof value === 'number' || typeof value === 'string' || value === null || value instanceof Date || value instanceof Boolean || value instanceof Number || value instanceof String) {\n      return JSON.stringify(value);\n    }\n\n    // lossless number, the secret ingredient :)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    if (value && value.isLosslessNumber) {\n      return value.toString();\n    }\n\n    // BigInt\n    if (typeof value === 'bigint') {\n      return value.toString();\n    }\n\n    // Array\n    if (Array.isArray(value)) {\n      return stringifyArray(value, indent);\n    }\n\n    // Object (test lastly!)\n    if (value && _typeof(value) === 'object') {\n      return stringifyObject(value, indent);\n    }\n    return undefined;\n  }\n\n  /**\n   * Stringify an array\n   */\n  function stringifyArray(array, indent) {\n    if (array.length === 0) {\n      return '[]';\n    }\n    var childIndent = resolvedSpace ? indent + resolvedSpace : undefined;\n    var str = resolvedSpace ? '[\\n' : '[';\n    for (var i = 0; i < array.length; i++) {\n      var item = typeof replacer === 'function' ? replacer.call(array, String(i), array[i]) : array[i];\n      if (resolvedSpace) {\n        str += childIndent;\n      }\n      if (typeof item !== 'undefined' && typeof item !== 'function') {\n        str += stringifyValue(item, childIndent);\n      } else {\n        str += 'null';\n      }\n      if (i < array.length - 1) {\n        str += resolvedSpace ? ',\\n' : ',';\n      }\n    }\n    str += resolvedSpace ? '\\n' + indent + ']' : ']';\n    return str;\n  }\n\n  /**\n   * Stringify an object\n   */\n  function stringifyObject(object, indent) {\n    if (typeof object.toJSON === 'function') {\n      return stringify(object.toJSON(), replacer, space, undefined);\n    }\n    var keys = Array.isArray(replacer) ? replacer.map(String) : Object.keys(object);\n    if (keys.length === 0) {\n      return '{}';\n    }\n    var childIndent = resolvedSpace ? indent + resolvedSpace : undefined;\n    var first = true;\n    var str = resolvedSpace ? '{\\n' : '{';\n    keys.forEach(function (key) {\n      var value = typeof replacer === 'function' ? replacer.call(object, key, object[key]) : object[key];\n      if (includeProperty(key, value)) {\n        if (first) {\n          first = false;\n        } else {\n          str += resolvedSpace ? ',\\n' : ',';\n        }\n        var keyStr = JSON.stringify(key);\n        str += resolvedSpace ? childIndent + keyStr + ': ' : keyStr + ':';\n        str += stringifyValue(value, childIndent);\n      }\n    });\n    str += resolvedSpace ? '\\n' + indent + '}' : '}';\n    return str;\n  }\n\n  /**\n   * Test whether to include a property in a stringified object or not.\n   */\n  function includeProperty(key, value) {\n    return typeof value !== 'undefined' && typeof value !== 'function' && _typeof(value) !== 'symbol';\n  }\n}\n\n/**\n * Resolve a JSON stringify space:\n * replace a number with a string containing that number of spaces\n */\nfunction resolveSpace(space) {\n  if (typeof space === 'number') {\n    return ' '.repeat(space);\n  }\n  if (typeof space === 'string' && space !== '') {\n    return space;\n  }\n  return undefined;\n}\n//# sourceMappingURL=stringify.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/stringify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/types.js":
/*!***************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/types.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiO0FBQVU7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL0Bzcy0yL25leHRqcy8uL25vZGVfbW9kdWxlcy9zdGFya25ldC9ub2RlX21vZHVsZXMvbG9zc2xlc3MtanNvbi9saWIvZXNtL3R5cGVzLmpzP2NhM2MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnsafeNumberReason: () => (/* binding */ UnsafeNumberReason),\n/* harmony export */   extractSignificantDigits: () => (/* binding */ extractSignificantDigits),\n/* harmony export */   getUnsafeNumberReason: () => (/* binding */ getUnsafeNumberReason),\n/* harmony export */   isInteger: () => (/* binding */ isInteger),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isSafeNumber: () => (/* binding */ isSafeNumber),\n/* harmony export */   toSafeNumberOrThrow: () => (/* binding */ toSafeNumberOrThrow)\n/* harmony export */ });\n/**\n * Test whether a string contains an integer number\n */\nfunction isInteger(value) {\n  return INTEGER_REGEX.test(value);\n}\nvar INTEGER_REGEX = /^-?[0-9]+$/;\n\n/**\n * Test whether a string contains a number\n * http://stackoverflow.com/questions/13340717/json-numbers-regular-expression\n */\nfunction isNumber(value) {\n  return NUMBER_REGEX.test(value);\n}\nvar NUMBER_REGEX = /^-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?$/;\n\n/**\n * Test whether a string can be safely represented with a number\n * without information loss.\n *\n * When approx is true, floating point numbers that lose a few digits but\n * are still approximately equal in value are considered safe too.\n * Integer numbers must still be exactly equal.\n */\nfunction isSafeNumber(value, config) {\n  var num = parseFloat(value);\n  var str = String(num);\n  var v = extractSignificantDigits(value);\n  var s = extractSignificantDigits(str);\n  if (v === s) {\n    return true;\n  }\n  if ((config === null || config === void 0 ? void 0 : config.approx) === true) {\n    // A value is approximately equal when:\n    // 1. it is a floating point number, not an integer\n    // 2. it has at least 14 digits\n    // 3. the first 14 digits are equal\n    var requiredDigits = 14;\n    if (!isInteger(value) && s.length >= requiredDigits && v.startsWith(s.substring(0, requiredDigits))) {\n      return true;\n    }\n  }\n  return false;\n}\nvar UnsafeNumberReason = /*#__PURE__*/function (UnsafeNumberReason) {\n  UnsafeNumberReason[\"underflow\"] = \"underflow\";\n  UnsafeNumberReason[\"overflow\"] = \"overflow\";\n  UnsafeNumberReason[\"truncate_integer\"] = \"truncate_integer\";\n  UnsafeNumberReason[\"truncate_float\"] = \"truncate_float\";\n  return UnsafeNumberReason;\n}({});\n\n/**\n * When the provided value is an unsafe number, describe what the reason is:\n * overflow, underflow, truncate_integer, or truncate_float.\n * Returns undefined when the value is safe.\n */\nfunction getUnsafeNumberReason(value) {\n  if (isSafeNumber(value, {\n    approx: false\n  })) {\n    return undefined;\n  }\n  if (isInteger(value)) {\n    return UnsafeNumberReason.truncate_integer;\n  }\n  var num = parseFloat(value);\n  if (!isFinite(num)) {\n    return UnsafeNumberReason.overflow;\n  }\n  if (num === 0) {\n    return UnsafeNumberReason.underflow;\n  }\n  return UnsafeNumberReason.truncate_float;\n}\n\n/**\n * Convert a string into a number when it is safe to do so.\n * Throws an error otherwise, explaining the reason.\n */\nfunction toSafeNumberOrThrow(value, config) {\n  var number = parseFloat(value);\n  var unsafeReason = getUnsafeNumberReason(value);\n  if ((config === null || config === void 0 ? void 0 : config.approx) === true ? unsafeReason && unsafeReason !== UnsafeNumberReason.truncate_float : unsafeReason) {\n    var unsafeReasonText = unsafeReason.replace(/_\\w+$/, '');\n    throw new Error('Cannot safely convert to number: ' + \"the value '\".concat(value, \"' would \").concat(unsafeReasonText, \" and become \").concat(number));\n  }\n  return number;\n}\n\n/**\n * Get the significant digits of a number.\n *\n * For example:\n *   '2.34' returns '234'\n *   '-77' returns '77'\n *   '0.003400' returns '34'\n *   '120.5e+30' returns '1205'\n **/\nfunction extractSignificantDigits(value) {\n  return value\n  // from \"-0.250e+30\" to \"-0.250\"\n  .replace(EXPONENTIAL_PART_REGEX, '')\n\n  // from \"-0.250\" to \"-0250\"\n  .replace(DOT_REGEX, '')\n\n  // from \"-0250\" to \"-025\"\n  .replace(TRAILING_ZEROS_REGEX, '')\n\n  // from \"-025\" to \"25\"\n  .replace(LEADING_MINUS_AND_ZEROS_REGEX, '');\n}\nvar EXPONENTIAL_PART_REGEX = /[eE][+-]?\\d+$/;\nvar LEADING_MINUS_AND_ZEROS_REGEX = /^-?(0*)?/;\nvar DOT_REGEX = /\\./;\nvar TRAILING_ZEROS_REGEX = /0+$/;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsR0FBRzs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac3MtMi9uZXh0anMvLi9ub2RlX21vZHVsZXMvc3RhcmtuZXQvbm9kZV9tb2R1bGVzL2xvc3NsZXNzLWpzb24vbGliL2VzbS91dGlscy5qcz85YjA5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdCB3aGV0aGVyIGEgc3RyaW5nIGNvbnRhaW5zIGFuIGludGVnZXIgbnVtYmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgcmV0dXJuIElOVEVHRVJfUkVHRVgudGVzdCh2YWx1ZSk7XG59XG52YXIgSU5URUdFUl9SRUdFWCA9IC9eLT9bMC05XSskLztcblxuLyoqXG4gKiBUZXN0IHdoZXRoZXIgYSBzdHJpbmcgY29udGFpbnMgYSBudW1iZXJcbiAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTMzNDA3MTcvanNvbi1udW1iZXJzLXJlZ3VsYXItZXhwcmVzc2lvblxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIE5VTUJFUl9SRUdFWC50ZXN0KHZhbHVlKTtcbn1cbnZhciBOVU1CRVJfUkVHRVggPSAvXi0/KD86MHxbMS05XVxcZCopKD86XFwuXFxkKyk/KD86W2VFXVsrLV0/XFxkKyk/JC87XG5cbi8qKlxuICogVGVzdCB3aGV0aGVyIGEgc3RyaW5nIGNhbiBiZSBzYWZlbHkgcmVwcmVzZW50ZWQgd2l0aCBhIG51bWJlclxuICogd2l0aG91dCBpbmZvcm1hdGlvbiBsb3NzLlxuICpcbiAqIFdoZW4gYXBwcm94IGlzIHRydWUsIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgdGhhdCBsb3NlIGEgZmV3IGRpZ2l0cyBidXRcbiAqIGFyZSBzdGlsbCBhcHByb3hpbWF0ZWx5IGVxdWFsIGluIHZhbHVlIGFyZSBjb25zaWRlcmVkIHNhZmUgdG9vLlxuICogSW50ZWdlciBudW1iZXJzIG11c3Qgc3RpbGwgYmUgZXhhY3RseSBlcXVhbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2FmZU51bWJlcih2YWx1ZSwgY29uZmlnKSB7XG4gIHZhciBudW0gPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgdmFyIHN0ciA9IFN0cmluZyhudW0pO1xuICB2YXIgdiA9IGV4dHJhY3RTaWduaWZpY2FudERpZ2l0cyh2YWx1ZSk7XG4gIHZhciBzID0gZXh0cmFjdFNpZ25pZmljYW50RGlnaXRzKHN0cik7XG4gIGlmICh2ID09PSBzKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKChjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuYXBwcm94KSA9PT0gdHJ1ZSkge1xuICAgIC8vIEEgdmFsdWUgaXMgYXBwcm94aW1hdGVseSBlcXVhbCB3aGVuOlxuICAgIC8vIDEuIGl0IGlzIGEgZmxvYXRpbmcgcG9pbnQgbnVtYmVyLCBub3QgYW4gaW50ZWdlclxuICAgIC8vIDIuIGl0IGhhcyBhdCBsZWFzdCAxNCBkaWdpdHNcbiAgICAvLyAzLiB0aGUgZmlyc3QgMTQgZGlnaXRzIGFyZSBlcXVhbFxuICAgIHZhciByZXF1aXJlZERpZ2l0cyA9IDE0O1xuICAgIGlmICghaXNJbnRlZ2VyKHZhbHVlKSAmJiBzLmxlbmd0aCA+PSByZXF1aXJlZERpZ2l0cyAmJiB2LnN0YXJ0c1dpdGgocy5zdWJzdHJpbmcoMCwgcmVxdWlyZWREaWdpdHMpKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCB2YXIgVW5zYWZlTnVtYmVyUmVhc29uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChVbnNhZmVOdW1iZXJSZWFzb24pIHtcbiAgVW5zYWZlTnVtYmVyUmVhc29uW1widW5kZXJmbG93XCJdID0gXCJ1bmRlcmZsb3dcIjtcbiAgVW5zYWZlTnVtYmVyUmVhc29uW1wib3ZlcmZsb3dcIl0gPSBcIm92ZXJmbG93XCI7XG4gIFVuc2FmZU51bWJlclJlYXNvbltcInRydW5jYXRlX2ludGVnZXJcIl0gPSBcInRydW5jYXRlX2ludGVnZXJcIjtcbiAgVW5zYWZlTnVtYmVyUmVhc29uW1widHJ1bmNhdGVfZmxvYXRcIl0gPSBcInRydW5jYXRlX2Zsb2F0XCI7XG4gIHJldHVybiBVbnNhZmVOdW1iZXJSZWFzb247XG59KHt9KTtcblxuLyoqXG4gKiBXaGVuIHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBhbiB1bnNhZmUgbnVtYmVyLCBkZXNjcmliZSB3aGF0IHRoZSByZWFzb24gaXM6XG4gKiBvdmVyZmxvdywgdW5kZXJmbG93LCB0cnVuY2F0ZV9pbnRlZ2VyLCBvciB0cnVuY2F0ZV9mbG9hdC5cbiAqIFJldHVybnMgdW5kZWZpbmVkIHdoZW4gdGhlIHZhbHVlIGlzIHNhZmUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVbnNhZmVOdW1iZXJSZWFzb24odmFsdWUpIHtcbiAgaWYgKGlzU2FmZU51bWJlcih2YWx1ZSwge1xuICAgIGFwcHJveDogZmFsc2VcbiAgfSkpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc0ludGVnZXIodmFsdWUpKSB7XG4gICAgcmV0dXJuIFVuc2FmZU51bWJlclJlYXNvbi50cnVuY2F0ZV9pbnRlZ2VyO1xuICB9XG4gIHZhciBudW0gPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgaWYgKCFpc0Zpbml0ZShudW0pKSB7XG4gICAgcmV0dXJuIFVuc2FmZU51bWJlclJlYXNvbi5vdmVyZmxvdztcbiAgfVxuICBpZiAobnVtID09PSAwKSB7XG4gICAgcmV0dXJuIFVuc2FmZU51bWJlclJlYXNvbi51bmRlcmZsb3c7XG4gIH1cbiAgcmV0dXJuIFVuc2FmZU51bWJlclJlYXNvbi50cnVuY2F0ZV9mbG9hdDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGEgc3RyaW5nIGludG8gYSBudW1iZXIgd2hlbiBpdCBpcyBzYWZlIHRvIGRvIHNvLlxuICogVGhyb3dzIGFuIGVycm9yIG90aGVyd2lzZSwgZXhwbGFpbmluZyB0aGUgcmVhc29uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9TYWZlTnVtYmVyT3JUaHJvdyh2YWx1ZSwgY29uZmlnKSB7XG4gIHZhciBudW1iZXIgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgdmFyIHVuc2FmZVJlYXNvbiA9IGdldFVuc2FmZU51bWJlclJlYXNvbih2YWx1ZSk7XG4gIGlmICgoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmFwcHJveCkgPT09IHRydWUgPyB1bnNhZmVSZWFzb24gJiYgdW5zYWZlUmVhc29uICE9PSBVbnNhZmVOdW1iZXJSZWFzb24udHJ1bmNhdGVfZmxvYXQgOiB1bnNhZmVSZWFzb24pIHtcbiAgICB2YXIgdW5zYWZlUmVhc29uVGV4dCA9IHVuc2FmZVJlYXNvbi5yZXBsYWNlKC9fXFx3KyQvLCAnJyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2FmZWx5IGNvbnZlcnQgdG8gbnVtYmVyOiAnICsgXCJ0aGUgdmFsdWUgJ1wiLmNvbmNhdCh2YWx1ZSwgXCInIHdvdWxkIFwiKS5jb25jYXQodW5zYWZlUmVhc29uVGV4dCwgXCIgYW5kIGJlY29tZSBcIikuY29uY2F0KG51bWJlcikpO1xuICB9XG4gIHJldHVybiBudW1iZXI7XG59XG5cbi8qKlxuICogR2V0IHRoZSBzaWduaWZpY2FudCBkaWdpdHMgb2YgYSBudW1iZXIuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKiAgICcyLjM0JyByZXR1cm5zICcyMzQnXG4gKiAgICctNzcnIHJldHVybnMgJzc3J1xuICogICAnMC4wMDM0MDAnIHJldHVybnMgJzM0J1xuICogICAnMTIwLjVlKzMwJyByZXR1cm5zICcxMjA1J1xuICoqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RTaWduaWZpY2FudERpZ2l0cyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWVcbiAgLy8gZnJvbSBcIi0wLjI1MGUrMzBcIiB0byBcIi0wLjI1MFwiXG4gIC5yZXBsYWNlKEVYUE9ORU5USUFMX1BBUlRfUkVHRVgsICcnKVxuXG4gIC8vIGZyb20gXCItMC4yNTBcIiB0byBcIi0wMjUwXCJcbiAgLnJlcGxhY2UoRE9UX1JFR0VYLCAnJylcblxuICAvLyBmcm9tIFwiLTAyNTBcIiB0byBcIi0wMjVcIlxuICAucmVwbGFjZShUUkFJTElOR19aRVJPU19SRUdFWCwgJycpXG5cbiAgLy8gZnJvbSBcIi0wMjVcIiB0byBcIjI1XCJcbiAgLnJlcGxhY2UoTEVBRElOR19NSU5VU19BTkRfWkVST1NfUkVHRVgsICcnKTtcbn1cbnZhciBFWFBPTkVOVElBTF9QQVJUX1JFR0VYID0gL1tlRV1bKy1dP1xcZCskLztcbnZhciBMRUFESU5HX01JTlVTX0FORF9aRVJPU19SRUdFWCA9IC9eLT8oMCopPy87XG52YXIgRE9UX1JFR0VYID0gL1xcLi87XG52YXIgVFJBSUxJTkdfWkVST1NfUkVHRVggPSAvMCskLztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/node_modules/lossless-json/lib/esm/utils.js\n");

/***/ })

};
;